# -*- coding: utf-8 -*-
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, CallbackQueryHandler, filters
)
from ai_helper import parse_free_text, parse_due
from db import DB

# === –ö–û–ù–§–ò–ì ===
TOKEN = "7611168200:AAFkdTWAz1xMawJOKF0Mu21ViFA5Oz8wblk"
OWNER_USERNAMES = ["SukhrobAbdurazzakov", "revivemd"]  # —É –∫–æ–≥–æ –¥–æ—Å—Ç—É–ø –ø–æ username

# === –ë–î ===
db = DB("data.sqlite")

# === –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–û–í ===
ADD_AMOUNT, ADD_DESC, DEBT_CP, DEBT_AMOUNT, DEBT_DUE, DEBT_NOTE, DEBT_CLOSE_ID = range(7)

def menu_kb():
    rows = [
        ["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"],
        ["üí∞ –ë–∞–ª–∞–Ω—Å", "üìí –ò—Å—Ç–æ—Ä–∏—è"],
        ["ü§ù –î–µ–±–∏—Ç–æ—Ä—ã", "üí≥ –ö—Ä–µ–¥–∏—Ç–æ—Ä—ã"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def is_allowed(update: Update) -> bool:
    u = update.effective_user
    if not u:
        return False
    if u.username and u.username in OWNER_USERNAMES:
        return True
    return db.is_allowed(u.id)

# ---------- –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        # –∞–≤—Ç–æ-–æ–Ω–±–æ—Ä–¥–∏–Ω–≥: –ø–µ—Ä–≤—ã—Ö –¥–≤–æ–∏—Ö –¥–æ–±–∞–≤–ª—è–µ–º –≤ allowlist
        if db.allow_count() < 2:
            db.allow(update.effective_user.id)
        else:
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            return
    await update.message.reply_text("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb())

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    inc, exp, net = db.get_balance(update.effective_user.id)
    rec, pay = db.get_debt_totals(update.effective_user.id)
    txt = (
        f"–î–æ—Ö–æ–¥—ã: {inc:.2f}\n"
        f"–†–∞—Å—Ö–æ–¥—ã: {exp:.2f}\n"
        f"–ò—Ç–æ–≥–æ: {net:.2f}\n"
        f"–î–µ–±–∏—Ç–æ—Ä—ã (–≤–∞–º –¥–æ–ª–∂–Ω—ã): {rec:.2f}\n"
        f"–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã (–≤—ã –¥–æ–ª–∂–Ω—ã): {pay:.2f}"
    )
    await update.message.reply_text(txt, reply_markup=menu_kb())

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    rows = db.last_tx(update.effective_user.id, 20)
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.", reply_markup=menu_kb())
        return
    lines = []
    for r in rows:
        sign = "+" if r["type"] == "income" else "-"
        when = datetime.fromtimestamp(r["created_at"] / 1000).strftime("%Y-%m-%d %H:%M")
        lines.append(f"{when} ‚Ä¢ {sign}{r['amount']} {r['currency']} ‚Ä¢ {r['category'] or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}")
    await update.message.reply_text("\n".join(lines), reply_markup=menu_kb())

# ---------- –î–û–•–û–î / –†–ê–°–•–û–î ----------
async def ask_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    context.user_data.clear()
    context.user_data["mode"] = "income"
    await update.message.reply_text("–î–æ—Ö–æ–¥: –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä. 120000 –∏–ª–∏ 15.5 USD):",
                                    reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return ADD_AMOUNT

async def ask_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    context.user_data.clear()
    context.user_data["mode"] = "expense"
    await update.message.reply_text("–†–∞—Å—Ö–æ–¥: –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä. 120000 –∏–ª–∏ 15.5 USD):",
                                    reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return ADD_AMOUNT

async def got_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    text = update.message.text or ""
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb())
        return ConversationHandler.END
    p = parse_free_text(text)
    if not p.get("amount"):
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞:")
        return ADD_AMOUNT
    context.user_data["amount"] = p["amount"]
    context.user_data["currency"] = p.get("currency", "UZS")
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ / –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ).")
    return ADD_DESC

async def got_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    note = update.message.text or None
    mode = context.user_data.get("mode")
    amount = float(context.user_data.get("amount", 0))
    currency = context.user_data.get("currency", "UZS")
    db.add_tx(update.effective_user.id, mode, amount, currency, None, note)
    await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=menu_kb())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb())
    return ConversationHandler.END

# ---------- –î–ï–ë–ò–¢–û–†–´ / –ö–†–ï–î–ò–¢–û–†–´ ----------
def debt_menu_markup(kind: str):
    # kind: 'receivable' (–≤–∞–º –¥–æ–ª–∂–Ω—ã) –∏–ª–∏ 'payable' (–≤—ã –¥–æ–ª–∂–Ω—ã)
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π", callback_data=f"debt_{kind}_new"),
         InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—ã–µ", callback_data=f"debt_{kind}_list")],
        [InlineKeyboardButton("‚úÖ –ü–æ–≥–∞—Å–∏—Ç—å", callback_data=f"debt_{kind}_close"),
         InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data=f"debt_{kind}_balance")],
    ])

async def debtors_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    await update.message.reply_text("–î–µ–±–∏—Ç–æ—Ä—ã ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb())
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=debt_menu_markup("receivable"))

async def creditors_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    await update.message.reply_text("–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb())
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=debt_menu_markup("payable"))

async def debt_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        await update.callback_query.answer()
        return
    q = update.callback_query
    await q.answer()
    data = q.data
    if data.endswith("_new"):
        kind = "receivable" if "receivable" in data else "payable"
        context.user_data.clear()
        context.user_data["debt_kind"] = kind
        await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:",
                                   reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return DEBT_CP
    elif data.endswith("_list"):
        kind = "receivable" if "receivable" in data else "payable"
        rows = db.open_debts(update.effective_user.id, kind)
        if not rows:
            await q.message.reply_text("–û—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç.")
        else:
            lines = [f"ID#{r['id']} ‚Ä¢ {r['cp_name']} ‚Ä¢ {r['amount']} {r['currency']} ‚Ä¢ "
                     f"–¥–æ {datetime.fromtimestamp(r['due_date']/1000).strftime('%d.%m.%Y') if r['due_date'] else '‚Äî'}"
                     for r in rows]
            await q.message.reply_text("\n".join(lines))
    elif data.endswith("_close"):
        kind = "receivable" if "receivable" in data else "payable"
        context.user_data.clear()
        context.user_data["debt_kind"] = kind
        await q.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –¥–æ–ª–≥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ '–û—Ç–∫—Ä—ã—Ç—ã–µ'):",
                                   reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return DEBT_CLOSE_ID
    elif data.endswith("_balance"):
        kind = "receivable" if "receivable" in data else "payable"
        total = db.debt_total(update.effective_user.id, kind)
        label = "–≤–∞–º –¥–æ–ª–∂–Ω—ã" if kind == "receivable" else "–≤—ã –¥–æ–ª–∂–Ω—ã"
        await q.message.reply_text(f"–í—Å–µ–≥–æ {label}: {total:.2f}")

async def debt_get_cp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    text = update.message.text or ""
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb()); return ConversationHandler.END
    context.user_data["cp_name"] = text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 20 USD):")
    return DEBT_AMOUNT

async def debt_get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    text = update.message.text or ""
    p = parse_free_text(text)
    if not p.get("amount"):
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å—É–º–º—É. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return DEBT_AMOUNT
    context.user_data["amount"] = float(p["amount"])
    context.user_data["currency"] = p.get("currency", "UZS")
    await update.message.reply_text("–°—Ä–æ–∫ (–¥–¥.–º–º.–≥–≥–≥–≥), –º–æ–∂–Ω–æ '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞' –∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ —Å—Ä–æ–∫–∞:")
    return DEBT_DUE

async def debt_get_due(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    text = update.message.text or ""
    if text.strip() == "-":
        due_ts = None
    else:
        due_ts = parse_due(text)
        if due_ts is None:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥, '—Å–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞', –ª–∏–±–æ '-' –±–µ–∑ —Å—Ä–æ–∫–∞:")
            return DEBT_DUE
    context.user_data["due_ts"] = due_ts
    await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):")
    return DEBT_NOTE

async def debt_get_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    note = update.message.text or None
    d = context.user_data
    db.add_debt(update.effective_user.id, d["debt_kind"], d["cp_name"], d["amount"], d["currency"], note, d.get("due_ts"))
    await update.message.reply_text("‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=menu_kb())
    return ConversationHandler.END

async def debt_close_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    text = update.message.text or ""
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb()); return ConversationHandler.END
    try:
        debt_id = int(text.strip().lstrip("#"))
    except:
        await update.message.reply_text("–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π ID. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –û—Ç–º–µ–Ω–∞:")
        return DEBT_CLOSE_ID
    ok = db.close_debt(update.effective_user.id, debt_id)
    if ok:
        await update.message.reply_text("‚úÖ –ó–∞–∫—Ä—ã—Ç–æ.", reply_markup=menu_kb())
    else:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ–ª–≥ —Å —Ç–∞–∫–∏–º ID.", reply_markup=menu_kb())
    return ConversationHandler.END

# ---------- –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É ----------
async def quick_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    text = update.message.text or ""
    p = parse_free_text(text)
    if p.get("amount"):
        db.add_tx(update.effective_user.id, p.get("mode", "expense"), float(p["amount"]),
                  p.get("currency", "UZS"), None, p.get("note"))
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–ª. –ù–∞–ø–∏—à–∏—Ç–µ '–±–∞–ª–∞–Ω—Å' –∏–ª–∏ '–∏—Å—Ç–æ—Ä–∏—è'.", reply_markup=menu_kb())
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–º–µ–Ω—é'.", reply_markup=menu_kb())

# ---------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–∞—Ö ----------
async def notify_overdues(context: ContextTypes.DEFAULT_TYPE):
    for uid in db.list_allowed_ids():
        rows = db.overdue_debts(uid)
        if not rows:
            continue
        lines = [
            f"ID#{r['id']} ‚Ä¢ {r['cp_name']} ‚Ä¢ {r['amount']} {r['currency']} ‚Ä¢ "
            f"—Å—Ä–æ–∫ –±—ã–ª {datetime.fromtimestamp(r['due_date']/1000).strftime('%d.%m.%Y')}"
            for r in rows
        ]
        try:
            await context.bot.send_message(uid, "üîî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏:\n" + "\n".join(lines))
        except Exception as e:
            print("notify error:", e)

# >>> –î–û–ë–ê–í–õ–ï–ù–û: post_init, —á—Ç–æ–±—ã job_queue –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
async def _post_init(app: Application):
    app.job_queue.run_repeating(notify_overdues, interval=60*60*12, first=60)

# ---------- –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------
def build_app() -> Application:
    # >>> –ò–ó–ú–ï–ù–ï–ù–û: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º post_init –∑–¥–µ—Å—å
    app = ApplicationBuilder().token(TOKEN).post_init(_post_init).build()

    conv_tx = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^\+|^‚ûï|^–î–æ—Ö–æ–¥$"), ask_income),
            MessageHandler(filters.Regex(r"^\-|^‚ûñ|^–†–∞—Å—Ö–æ–¥$"), ask_expense),
        ],
        states={
            ADD_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, got_amount)],
            ADD_DESC:   [MessageHandler(filters.TEXT & ~filters.COMMAND, got_desc)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    conv_debt = ConversationHandler(
        entry_points=[CallbackQueryHandler(debt_cb, pattern=r"^debt_")],
        states={
            DEBT_CP:       [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_get_cp)],
            DEBT_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_get_amount)],
            DEBT_DUE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_get_due)],
            DEBT_NOTE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_get_note)],
            DEBT_CLOSE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_close_id)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r"^(–ú–µ–Ω—é|–º–µ–Ω—é)$"), menu))
    app.add_handler(MessageHandler(filters.Regex(r"^üí∞|^–ë–∞–ª–∞–Ω—Å$"), balance))
    app.add_handler(MessageHandler(filters.Regex(r"^üìí|^–ò—Å—Ç–æ—Ä–∏—è$"), history))
    app.add_handler(MessageHandler(filters.Regex(r"^ü§ù –î–µ–±–∏—Ç–æ—Ä—ã$"), debtors_entry))
    app.add_handler(MessageHandler(filters.Regex(r"^üí≥ –ö—Ä–µ–¥–∏—Ç–æ—Ä—ã$"), creditors_entry))
    app.add_handler(conv_tx)
    app.add_handler(conv_debt)
    app.add_handler(CallbackQueryHandler(debt_cb, pattern=r"^debt_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, quick_add))

    return app

async def _boot():
    app = build_app()
    # –°–Ω—è—Ç—å –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π webhook –ø–µ—Ä–µ–¥ polling
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        print("delete_webhook warning:", e)
    await app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(_boot())
