# main.py ‚Äî –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ (webhook + "AI"-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è + SQLite)
# –¢—Ä–µ–±—É–µ—Ç—Å—è: python-telegram-bot==21.4
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (requirements.txt):
# python-telegram-bot==21.4
# pydantic==2.8.2

import os
import re
import sqlite3
import time
from datetime import datetime
from typing import Optional, Tuple

from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤) ===
# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π—Ç–µ BOT_TOKEN –∏ WEBHOOK_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–µ–ø–ª–æ—è
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable is required")

WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "")
PORT = int(os.environ.get("PORT", "8080"))

# –°–µ–∫—Ä–µ—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞ Telegram (–Ω–µ –≤–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ URL)
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", TOKEN)

DB_PATH = "finance.db"

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ====
def _connect_db():
    # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç + WAL –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
    con = sqlite3.connect(DB_PATH, timeout=30)
    con.execute("PRAGMA journal_mode=WAL;")
    con.execute("PRAGMA synchronous=NORMAL;")
    return con

def init_db():
    con = _connect_db()
    c = con.cursor()
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS tx (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            ttype TEXT NOT NULL CHECK (ttype IN ('income','expense')),
            amount REAL NOT NULL,
            currency TEXT NOT NULL,
            category TEXT NOT NULL,
            note TEXT,
            ts INTEGER NOT NULL
        )
        """
    )
    c.execute(
        """CREATE INDEX IF NOT EXISTS idx_user_ts ON tx(user_id, ts)"""
    )
    con.commit()
    con.close()

init_db()

# ==== –ö–õ–ê–í–ò–ê–¢–£–†–ê ====
MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìä –û—Ç—á—ë—Ç (–º–µ—Å—è—Ü)"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

# ==== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø "AI"-–ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API) ====
CURRENCY_SIGNS = {
    "usd": ["$", "usd", "–¥–æ–ª", "–¥–æ–ª–ª–∞—Ä"],
    "uzs": ["—Å—É–º", "sum", "uzs", "—Å—É–º—ã", "—Å—É–º–æ–≤"]
}

CATEGORY_KEYWORDS = {
    "–ï–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–∑–∞–≤—Ç—Ä–∞–∫", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "—Å–∞–º—Å–∞", "–ø–ª–æ–≤", "—à–∞—É—Ä–º–∞", "–ø–∏—Ü—Ü–∞"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏", "—Ç–æ–ø–ª–∏–≤–æ", "–±–µ–Ω–∑–∏–Ω", "–≥–∞–∑", "–º–µ—Ç—Ä–æ", "–∞–≤—Ç–æ–±—É—Å", "–∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ", "–∞—Ä–µ–Ω–¥–∞ –º–∞—à–∏–Ω—ã"],
    "–ó–∞—Ä–ø–ª–∞—Ç–∞": ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–æ–∫–ª–∞–¥", "–ø—Ä–µ–º–∏—è", "–±–æ–Ω—É—Å", "–∞–≤–∞–Ω—Å"],
    "–ó–¥–æ—Ä–æ–≤—å–µ": ["–∞–ø—Ç–µ–∫–∞", "–≤—Ä–∞—á", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–º–µ–¥", "–ª–µ–∫–∞—Ä", "–≤–∏—Ç–∞–º–∏–Ω"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä–∞", "cs2", "steam", "–ø–æ–¥–ø–∏—Å–∫–∞", "spotify", "netflix"],
    "–î–æ–º": ["–∞—Ä–µ–Ω–¥–∞", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∫–æ–º–º—É–Ω–∞–ª", "—ç–ª–µ–∫—Ç—Ä", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Ä–µ–º–æ–Ω—Ç"],
    "–î–µ—Ç—Å–∫–æ–µ": ["–ø–∞–º–ø–µ—Ä—Å", "–ø–æ–¥–≥—É–∑", "–∫–æ–ª—è—Å–∫–∞", "–∏–≥—Ä—É—à", "—Å–æ–∫ –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞", "–¥–µ—Ç—Å–∫", "–¥–æ—á–∫–∞", "—Ö–∞–¥–∏–¥–∂–∞"],
    "–°–ø–æ—Ä—Ç": ["–∑–∞–ª", "—Å–ø–æ—Ä—Ç", "–∫—Ä–µ–∞—Ç–∏–Ω", "–ø—Ä–æ—Ç–µ–∏–Ω", "–≥–µ–π–Ω–µ—Ä", "–∞–±–æ–Ω–µ–º–µ–Ω—Ç"],
    "–ü—Ä–æ—á–µ–µ": []
}

def detect_currency(text: str) -> str:
    t = text.lower()
    for cur, signs in CURRENCY_SIGNS.items():
        if any(s in t for s in signs):
            return cur
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é UZS
    return "uzs"

def parse_amount(text: str) -> Optional[float]:
    # –ò—â–µ–º —á–∏—Å–ª–∞ –≤–∏–¥–∞ 120000, 120 000, 120,000, 12.5, 12,5, $120
    candidates = re.findall(r"(?:(?<=\s)|^)(\d{1,3}(?:[ ,.\u00A0]\d{3})+|\d+)(?:[.,](\d{1,2}))?", text)
    if not candidates:
        return None
    raw, frac = candidates[-1]
    num = re.sub(r"[ ,\u00A0]", "", raw)
    if frac:
        return float(f"{num}.{frac}")
    return float(num)

def guess_type(text: str) -> str:
    t = text.lower()
    # —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–æ—Ö–æ–¥–∞
    if any(w in t for w in ["–¥–æ—Ö–æ–¥", "–ø–æ–ª—É—á–∏–ª", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ø—Ä–µ–º–∏—è", "–±–æ–Ω—É—Å", "–∑–∞—á–∏—Å–ª–∏–ª–∏", "–ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏—à–µ–ª", "–ø—Ä–∏—à–ª–æ"]):
        return "income"
    # —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Ä–∞—Å—Ö–æ–¥–∞
    if any(w in t for w in ["—Ä–∞—Å—Ö–æ–¥", "–∫—É–ø–∏–ª", "–æ–ø–ª–∞—Ç–∏–ª", "–∑–∞–ø–ª–∞—Ç–∏–ª", "—Å–Ω—è–ª", "–ø–æ—Ç—Ä–∞—Ç–∏–ª", "–æ–ø–ª–∞—Ç–∞"]):
        return "expense"
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥
    return "expense"

def guess_category(text: str) -> str:
    t = text.lower()
    for cat, kws in CATEGORY_KEYWORDS.items():
        if any(k in t for k in kws):
            return cat
    # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º –≤–∞–ª—é—Ç/–∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if "–∑–∞—Ä–ø–ª–∞—Ç" in t or "–ø—Ä–µ–º" in t or "–±–æ–Ω—É—Å" in t:
        return "–ó–∞—Ä–ø–ª–∞—Ç–∞"
    return "–ü—Ä–æ—á–µ–µ"

def ai_classify(text: str) -> Tuple[str, Optional[float], str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (ttype, amount, currency, category)
    ttype: income|expense
    currency: usd|uzs
    """
    ttype = guess_type(text)
    amount = parse_amount(text)
    currency = detect_currency(text)
    category = guess_category(text)
    return ttype, amount, currency, category

# ==== –†–ê–ë–û–¢–ê –° –ë–î ====
def add_tx(user_id: int, ttype: str, amount: float, currency: str, category: str, note: str):
    con = _connect_db()
    c = con.cursor()
    c.execute(
        "INSERT INTO tx (user_id, ttype, amount, currency, category, note, ts) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (user_id, ttype, amount, currency, category, note, int(time.time()))
    )
    con.commit()
    con.close()

def get_balance(user_id: int) -> Tuple[float, float]:
    con = _connect_db()
    c = con.cursor()
    c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype='income' AND currency='uzs'", (user_id,))
    inc_uzs = c.fetchone()[0]
    c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype='expense' AND currency='uzs'", (user_id,))
    exp_uzs = c.fetchone()[0]
    bal_uzs = inc_uzs - exp_uzs

    c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype='income' AND currency='usd'", (user_id,))
    inc_usd = c.fetchone()[0]
    c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype='expense' AND currency='usd'", (user_id,))
    exp_usd = c.fetchone()[0]
    bal_usd = inc_usd - exp_usd

    con.close()
    return bal_uzs, bal_usd

def month_report(user_id: int, y: int, m: int) -> Tuple[float, float, float, float]:
    # –°—É–º–º—ã –∑–∞ –º–µ—Å—è—Ü –ø–æ –≤–∞–ª—é—Ç–∞–º
    start = int(datetime(y, m, 1).timestamp())
    if m == 12:
        end = int(datetime(y + 1, 1, 1).timestamp())
    else:
        end = int(datetime(y, m + 1, 1).timestamp())

    con = _connect_db()
    c = con.cursor()
    def sum_where(ttype, cur):
        c.execute(
            "SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype=? AND currency=? AND ts>=? AND ts<?",
            (user_id, ttype, cur, start, end)
        )
        return c.fetchone()[0]

    inc_uzs = sum_where("income", "uzs")
    exp_uzs = sum_where("expense", "uzs")
    inc_usd = sum_where("income", "usd")
    exp_usd = sum_where("expense", "usd")
    con.close()
    return inc_uzs - exp_uzs, inc_usd - exp_usd, inc_uzs, exp_uzs

def last_txs(user_id: int, limit: int = 10):
    con = _connect_db()
    c = con.cursor()
    c.execute(
        "SELECT ttype, amount, currency, category, note, ts FROM tx WHERE user_id=? ORDER BY id DESC LIMIT ?",
        (user_id, limit)
    )
    rows = c.fetchall()
    con.close()
    return rows

# ==== –•–≠–ù–î–õ–ï–†–´ ====
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Razzakov‚Äôs Finance ‚úÖ\n"
        "–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Å–∞–º—Å–∞ 18 000 —Å—É–º¬ª, ¬´—Ç–∞–∫—Å–∏ 25 000¬ª, ¬´–∑–∞—Ä–ø–ª–∞—Ç–∞ 800$¬ª.\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=MAIN_KB
    )

async def help_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —Å–∞–º—Å–∞ 18 000 —Å—É–º ‚Üí —Ä–∞—Å—Ö–æ–¥, –ï–¥–∞\n"
        "‚Ä¢ —Ç–∞–∫—Å–∏ 25 000 ‚Üí —Ä–∞—Å—Ö–æ–¥, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n"
        "‚Ä¢ –∑–∞—Ä–ø–ª–∞—Ç–∞ 800$ ‚Üí –¥–æ—Ö–æ–¥, –ó–∞—Ä–ø–ª–∞—Ç–∞\n"
        "–ö–æ–º–∞–Ω–¥—ã: ¬´–ë–∞–ª–∞–Ω—Å¬ª, ¬´–ò—Å—Ç–æ—Ä–∏—è¬ª, ¬´–û—Ç—á—ë—Ç (–º–µ—Å—è—Ü)¬ª.",
        reply_markup=MAIN_KB
    )

async def handle_income_btn(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –¥–æ—Ö–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞—Ä–ø–ª–∞—Ç–∞ 6 000 000 —Å—É–º¬ª", reply_markup=MAIN_KB)

async def handle_expense_btn(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ä–∞—Å—Ö–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ç–∞–∫—Å–∏ 25 000¬ª –∏–ª–∏ ¬´–µ–¥–∞ 120 000 —Å—É–º¬ª", reply_markup=MAIN_KB)

async def balance_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    bal_uzs, bal_usd = get_balance(uid)
    await update.message.reply_text(
        f"–ë–∞–ª–∞–Ω—Å:\n"
        f"‚Ä¢ UZS: {int(bal_uzs):,}".replace(",", " ") + "\n"
        f"‚Ä¢ USD: {bal_usd:.2f}",
        reply_markup=MAIN_KB
    )

async def history_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    rows = last_txs(uid, 10)
    if not rows:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB)
        return
    lines = []
    for ttype, amount, cur, cat, note, ts in rows:
        dt = datetime.fromtimestamp(ts).strftime("%d.%m %H:%M")
        sign = "‚ûï" if ttype == "income" else "‚ûñ"
        lines.append(f"{dt} {sign} {amount:.2f} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or '-'}")
    await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(lines), reply_markup=MAIN_KB)

async def monthly_report_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    now = datetime.now()
    bal_m_uzs, bal_m_usd, inc_uzs, exp_uzs = month_report(uid, now.year, now.month)
    await update.message.reply_text(
        f"–û—Ç—á—ë—Ç –∑–∞ {now.strftime('%B %Y')}:\n"
        f"‚Ä¢ –î–æ—Ö–æ–¥ UZS: {int(inc_uzs):,}".replace(",", " ") + "\n"
        f"‚Ä¢ –†–∞—Å—Ö–æ–¥ UZS: {int(exp_uzs):,}".replace(",", " ") + "\n"
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å UZS (–º–µ—Å—è—Ü): {int(bal_m_uzs):,}".replace(",", " ") + "\n"
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å USD (–º–µ—Å—è—Ü): {bal_m_usd:.2f}",
        reply_markup=MAIN_KB
    )

async def text_router(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = (update.message.text or "").strip()

    # –ö–Ω–æ–ø–∫–∏
    low = text.lower()
    if "–±–∞–ª–∞–Ω—Å" in low:
        await balance_handler(update, _); return
    if "–∏—Å—Ç–æ—Ä–∏—è" in low:
        await history_handler(update, _); return
    if "–æ—Ç—á—ë—Ç" in low or "–æ—Ç—á–µ—Ç" in low:
        await monthly_report_handler(update, _); return
    if "–ø–æ–º–æ—â" in low or "help" in low:
        await help_handler(update, _); return
    if "–¥–æ—Ö–æ–¥" in low:
        await handle_income_btn(update, _); return
    if "—Ä–∞—Å—Ö–æ–¥" in low:
        await handle_expense_btn(update, _); return

    # "AI" –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    ttype, amount, currency, category = ai_classify(text)
    if amount is None:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: ¬´–µ–¥–∞ 45 000 —Å—É–º¬ª.", reply_markup=MAIN_KB)
        return

    add_tx(uid, ttype, amount, currency, category, text)
    sign = "–î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥" if ttype == "income" else "–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥"
    await update.message.reply_text(
        f"{sign}: {amount:.2f} {currency.upper()} ‚Ä¢ {category}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
        reply_markup=MAIN_KB
    )

async def unknown_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É/–æ–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=MAIN_KB)

# ==== –ó–ê–ü–£–°–ö –ß–ï–†–ï–ó WEBHOOK ====
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))

    # PTB —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç setWebhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook" if WEBHOOK_URL else None,
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()
