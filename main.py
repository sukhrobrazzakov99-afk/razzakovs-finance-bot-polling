# main.py ‚Äî –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å –æ—Ñ–ª–∞–π–Ω "AI"-—Ä–∞–∑–±–æ—Ä–æ–º —Ç–µ–∫—Å—Ç–∞ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∏), —É—á—ë—Ç–æ–º –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ (SQLite)
# –∏ webhook –ø–æ–¥ Railway. –ù–∏—á–µ–≥–æ –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
# –¢—Ä–µ–±—É–µ—Ç: python-telegram-bot[webhooks]==21.4

import os
import re
import sqlite3
import time
import logging
from datetime import datetime
from typing import Optional, Tuple

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# === –ó–ê–ü–û–õ–ù–ï–ù–û: —Ç–æ–∫–µ–Ω –∏ –∞–¥—Ä–µ—Å Railway (webhook) ===
BOT_TOKEN = "7611168200:AAHj7B6FelvvcoJMDBuKwKpveBHEo0NItnI"
WEBHOOK_URL = "https://beautiful-love.up.railway.app"  # –∞–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ –¥–µ–ø–ª–æ—è Railway
PORT = int(os.environ.get("PORT", "8080"))

# === –õ–û–ì–ò ===
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    level=logging.INFO
)
log = logging.getLogger("razzakovs-ai-bot")

DB_PATH = "finance.db"

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===
def init_db():
    con = sqlite3.connect(DB_PATH)
    c = con.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS tx (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            ttype TEXT NOT NULL CHECK (ttype IN ('income','expense')),
            amount REAL NOT NULL,
            currency TEXT NOT NULL,
            category TEXT NOT NULL,
            note TEXT,
            ts INTEGER NOT NULL
        )
    """)
    c.execute("CREATE INDEX IF NOT EXISTS idx_user_ts ON tx(user_id, ts)")
    con.commit()
    con.close()

init_db()

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìä –û—Ç—á—ë—Ç (–º–µ—Å—è—Ü)"), KeyboardButton("ü§ñ AI-–æ—Ç–≤–µ—Ç")]
    ],
    resize_keyboard=True
)

# === –≠–í–†–ò–°–¢–ò–ö–ò ("AI" –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API) ===
CURRENCY_SIGNS = {
    "usd": ["$", "usd", "–¥–æ–ª", "–¥–æ–ª–ª–∞—Ä"],
    "uzs": ["—Å—É–º", "sum", "uzs", "—Å—É–º—ã", "—Å—É–º–æ–≤"]
}
CATEGORY_KEYWORDS = {
    "–ï–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–∑–∞–≤—Ç—Ä–∞–∫", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "—Å–∞–º—Å–∞", "–ø–ª–æ–≤", "—à–∞—É—Ä–º–∞", "–ø–∏—Ü—Ü–∞"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏", "—Ç–æ–ø–ª–∏–≤–æ", "–±–µ–Ω–∑–∏–Ω", "–≥–∞–∑", "–º–µ—Ç—Ä–æ", "–∞–≤—Ç–æ–±—É—Å", "–∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ", "–∞—Ä–µ–Ω–¥–∞ –º–∞—à–∏–Ω—ã"],
    "–ó–∞—Ä–ø–ª–∞—Ç–∞": ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–æ–∫–ª–∞–¥", "–ø—Ä–µ–º–∏—è", "–±–æ–Ω—É—Å", "–∞–≤–∞–Ω—Å"],
    "–ó–¥–æ—Ä–æ–≤—å–µ": ["–∞–ø—Ç–µ–∫–∞", "–≤—Ä–∞—á", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–ª–µ–∫–∞—Ä", "–≤–∏—Ç–∞–º–∏–Ω"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä–∞", "cs2", "steam", "–ø–æ–¥–ø–∏—Å–∫–∞", "spotify", "netflix"],
    "–î–æ–º": ["–∞—Ä–µ–Ω–¥–∞", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∫–æ–º–º—É–Ω–∞–ª", "—ç–ª–µ–∫—Ç—Ä", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Ä–µ–º–æ–Ω—Ç"],
    "–î–µ—Ç—Å–∫–æ–µ": ["–ø–∞–º–ø–µ—Ä—Å", "–ø–æ–¥–≥—É–∑", "–∫–æ–ª—è—Å–∫–∞", "–∏–≥—Ä—É—à", "–¥–µ—Ç—Å–∫", "–¥–æ—á–∫–∞", "—Ö–∞–¥–∏–¥–∂–∞"],
    "–°–ø–æ—Ä—Ç": ["–∑–∞–ª", "—Å–ø–æ—Ä—Ç", "–∫—Ä–µ–∞—Ç–∏–Ω", "–ø—Ä–æ—Ç–µ–∏–Ω", "–≥–µ–π–Ω–µ—Ä", "–∞–±–æ–Ω–µ–º–µ–Ω—Ç"],
    "–ü—Ä–æ—á–µ–µ": []
}

def detect_currency(text: str) -> str:
    t = text.lower()
    for cur, signs in CURRENCY_SIGNS.items():
        if any(s in t for s in signs):
            return cur
    return "uzs"

def parse_amount(text: str) -> Optional[float]:
    # –Ω–∞—Ö–æ–¥–∏–º 120000 / 120 000 / 120,000 / 12.5 / 12,5
    m = re.findall(r"(?:(?<=\s)|^)(\d{1,3}(?:[ \u00A0,\.]\d{3})+|\d+)(?:[.,](\d{1,2}))?", text)
    if not m:
        return None
    raw, frac = m[-1]
    num = re.sub(r"[ \u00A0,\.]", "", raw)  # —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
    if frac:
        return float(f"{num}.{frac}")
    return float(num)

def guess_type(text: str) -> str:
    t = text.lower()
    if any(w in t for w in ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ø—Ä–µ–º–∏—è", "–±–æ–Ω—É—Å", "–ø–æ–ª—É—á–∏–ª", "–ø—Ä–∏—à–ª–æ", "–¥–æ—Ö–æ–¥"]):
        return "income"
    if any(w in t for w in ["—Ä–∞—Å—Ö–æ–¥", "–∫—É–ø–∏–ª", "–æ–ø–ª–∞—Ç–∏–ª", "–∑–∞–ø–ª–∞—Ç–∏–ª", "–ø–æ—Ç—Ä–∞—Ç–∏–ª", "—Å–Ω—è–ª"]):
        return "expense"
    return "expense"

def guess_category(text: str) -> str:
    t = text.lower()
    for cat, kws in CATEGORY_KEYWORDS.items():
        if any(k in t for k in kws):
            return cat
    if "–∑–∞—Ä–ø–ª–∞—Ç" in t or "–ø—Ä–µ–º" in t or "–±–æ–Ω—É—Å" in t:
        return "–ó–∞—Ä–ø–ª–∞—Ç–∞"
    return "–ü—Ä–æ—á–µ–µ"

def ai_classify_finance(text: str) -> Tuple[str, Optional[float], str, str]:
    ttype = guess_type(text)
    amount = parse_amount(text)
    currency = detect_currency(text)
    category = guess_category(text)
    return ttype, amount, currency, category

def ai_chat_reply(text: str) -> str:
    t = text.strip().lower()
    if any(w in t for w in ["–∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å", "–∫–∞–∫ –≤–Ω–µ—Å—Ç–∏", "—á—Ç–æ –ø–∏—Å–∞—Ç—å", "–ø–æ–º–æ—â"]):
        return ("–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: ¬´—Å–∞–º—Å–∞ 18 000 —Å—É–º¬ª, ¬´—Ç–∞–∫—Å–∏ 25 000¬ª, ¬´–∑–∞—Ä–ø–ª–∞—Ç–∞ 800$¬ª.\n"
                "–ö–Ω–æ–ø–∫–∏: –ë–∞–ª–∞–Ω—Å, –ò—Å—Ç–æ—Ä–∏—è, –û—Ç—á—ë—Ç (–º–µ—Å—è—Ü).")
    if "–±–∞–ª–∞–Ω—Å" in t:
        return "–ù–∞–∂–º–∏ ¬´üí∞ –ë–∞–ª–∞–Ω—Å¬ª ‚Äî –ø–æ–∫–∞–∂—É –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ UZS –∏ USD."
    if any(w in t for w in ["–æ—Ç—á—ë—Ç", "–æ—Ç—á–µ—Ç", "–º–µ—Å—è—Ü"]):
        return "–ù–∞–∂–º–∏ ¬´üìä –û—Ç—á—ë—Ç (–º–µ—Å—è—Ü)¬ª ‚Äî –¥–∞–º —Å—É–º–º–∞—Ä–Ω–æ –¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥ –∏ –±–∞–ª–∞–Ω—Å –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."
    if any(w in t for w in ["–∫–æ–ø–∏—Ç—å", "—ç–∫–æ–Ω–æ–º", "—Å–æ–≤–µ—Ç", "–∫–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å"]):
        return "–°–æ–≤–µ—Ç: —Ñ–∏–∫—Å–∏—Ä—É–π –≤—Å–µ —Ç—Ä–∞—Ç—ã 7 –¥–Ω–µ–π, –ø–æ—Ç–æ–º —É—Ä–µ–∂—å —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ 20% ‚Äî –æ–±—ã—á–Ω–æ —ç—Ç–æ +10‚Äì15% –∫ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏."
    return "–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ –ú–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å/–∏—Å—Ç–æ—Ä–∏—é –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."

# === –†–ê–ë–û–¢–ê –° –ë–î ===
def add_tx(user_id: int, ttype: str, amount: float, currency: str, category: str, note: str):
    con = sqlite3.connect(DB_PATH)
    c = con.cursor()
    c.execute(
        "INSERT INTO tx (user_id, ttype, amount, currency, category, note, ts) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (user_id, ttype, amount, currency, category, note, int(time.time()))
    )
    con.commit()
    con.close()

def get_balance(user_id: int) -> Tuple[float, float]:
    con = sqlite3.connect(DB_PATH)
    c = con.cursor()
    def s(ttype, cur):
        c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype=? AND currency=?",
                  (user_id, ttype, cur))
        return c.fetchone()[0]
    bal_uzs = s("income", "uzs") - s("expense", "uzs")
    bal_usd = s("income", "usd") - s("expense", "usd")
    con.close()
    return bal_uzs, bal_usd

def month_report(user_id: int, y: int, m: int):
    start = int(datetime(y, m, 1).timestamp())
    end = int(datetime(y + (m == 12), (m % 12) + 1, 1).timestamp())
    con = sqlite3.connect(DB_PATH)
    c = con.cursor()
    def sum_where(ttype, cur):
        c.execute("""SELECT COALESCE(SUM(amount),0)
                     FROM tx WHERE user_id=? AND ttype=? AND currency=? AND ts BETWEEN ? AND ?""",
                  (user_id, ttype, cur, start, end))
        return c.fetchone()[0]
    inc_uzs = sum_where("income", "uzs"); exp_uzs = sum_where("expense", "uzs")
    inc_usd = sum_where("income", "usd"); exp_usd = sum_where("expense", "usd")
    con.close()
    return inc_uzs, exp_uzs, inc_usd, exp_usd

def last_txs(user_id: int, limit: int = 10):
    con = sqlite3.connect(DB_PATH)
    c = con.cursor()
    c.execute("""SELECT ttype, amount, currency, category, note, ts
                 FROM tx WHERE user_id=? ORDER BY id DESC LIMIT ?""", (user_id, limit))
    rows = c.fetchall()
    con.close()
    return rows

# === –•–≠–ù–î–õ–ï–†–´ ===
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Razzakov‚Äôs Finance ü§ñ\n"
        "–ü–∏—à–∏: ¬´—Å–∞–º—Å–∞ 18 000 —Å—É–º¬ª, ¬´—Ç–∞–∫—Å–∏ 25 000¬ª, ¬´–∑–∞—Ä–ø–ª–∞—Ç–∞ 800$¬ª ‚Äî —Ä–∞–∑–±–µ—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—é.\n"
        "–ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É ‚Äî –±—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
        reply_markup=MAIN_KB
    )

async def ai_button(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É —Å–æ–≤–µ—Ç–æ–º/–ø–æ–¥—Å–∫–∞–∑–∫–æ–π.", reply_markup=MAIN_KB)

async def balance_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    bal_uzs, bal_usd = get_balance(uid)
    msg = (
        f"–ë–∞–ª–∞–Ω—Å:\n"
        f"‚Ä¢ UZS: {int(bal_uzs):,}".replace(",", " ") + "\n"
        f"‚Ä¢ USD: {bal_usd:.2f}"
    )
    await update.message.reply_text(msg, reply_markup=MAIN_KB)

async def history_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    rows = last_txs(uid, 10)
    if not rows:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB); return
    lines = []
    for ttype, amount, cur, cat, note, ts in rows:
        dt = datetime.fromtimestamp(ts).strftime("%d.%m %H:%M")
        sign = "‚ûï" if ttype == "income" else "‚ûñ"
        lines.append(f"{dt} {sign} {amount:.2f} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or '-'}")
    await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(lines), reply_markup=MAIN_KB)

async def report_handler(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    now = datetime.now()
    inc_uzs, exp_uzs, inc_usd, exp_usd = month_report(uid, now.year, now.month)
    bal_uzs = inc_uzs - exp_—É–∑s
    bal_usd = inc_usd - exp_usd
    msg = (
        f"–û—Ç—á—ë—Ç –∑–∞ {now.strftime('%B %Y')}:\n"
        f"‚Ä¢ –î–æ—Ö–æ–¥ UZS: {int(inc_uzs):,}".replace(",", " ") + "\n"
        f"‚Ä¢ –†–∞—Å—Ö–æ–¥ UZS: {int(exp_uzs):,}".replace(",", " ") + "\n"
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å UZS: {int(bal_uzs):,}".replace(",", " ") + "\n"
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å USD: {bal_usd:.2f}"
    )
    await update.message.reply_text(msg, reply_markup=MAIN_KB)

async def text_router(update: Update, _: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = (update.message.text or "").strip()

    low = text.lower()
    if "–±–∞–ª–∞–Ω—Å" in low:
        await balance_handler(update, _); return
    if "–∏—Å—Ç–æ—Ä–∏—è" in low:
        await history_handler(update, _); return
    if "–æ—Ç—á—ë—Ç" in low or "–æ—Ç—á–µ—Ç" in low:
        await report_handler(update, _); return
    if "ai" in low or "ü§ñ" in low:
        await ai_button(update, _); return

    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    ttype, amount, currency, category = ai_classify_finance(text)
    if amount is not None:
        add_tx(uid, ttype, amount, currency, category, text)
        sign = "–î–æ—Ö–æ–¥" if ttype == "income" else "–†–∞—Å—Ö–æ–¥"
        await update.message.reply_text(
            f"{sign}: {amount:.2f} {currency.upper()} ‚Ä¢ {category}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
            reply_markup=MAIN_KB
        )
        return

    # –ò–Ω–∞—á–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π AI-—Å–æ–≤–µ—Ç
    reply = ai_chat_reply(text)
    await update.message.reply_text(reply, reply_markup=MAIN_KB)

async def unknown_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç—Ä–∞—Ç—ã/–¥–æ—Ö–æ–¥.", reply_markup=MAIN_KB)

# === –ó–ê–ü–£–°–ö –ß–ï–†–ï–ó WEBHOOK ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))

    log.info("Starting webhook on port %s ...", PORT)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}",
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()


