import os, re, sqlite3, time, logging
from datetime import datetime
from typing import Optional
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN   = "7611168200:AAHj7B6FelvvcoJMDBuKwKpveBHEo0NItnI"
WEBHOOK_URL = "https://beautiful-love.up.railway.app"
PORT = int(os.environ.get("PORT", "8080"))
DB_PATH = "finance.db"

logging.basicConfig(format="%(asctime)s %(levelname)s %(name)s | %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

def init_db():
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS tx(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        ttype TEXT NOT NULL CHECK(ttype IN('income','expense')),
        amount REAL NOT NULL, currency TEXT NOT NULL, category TEXT NOT NULL,
        note TEXT, ts INTEGER NOT NULL)""")
    c.execute("CREATE INDEX IF NOT EXISTS idx_user_ts ON tx(user_id, ts)")
    con.commit(); con.close()
init_db()

MAIN_KB = ReplyKeyboardMarkup(
    [[KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
     [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
     [KeyboardButton("üìä –û—Ç—á—ë—Ç (–º–µ—Å—è—Ü)")]],
    resize_keyboard=True
)

CURRENCY_SIGNS = {"usd": ["$", "usd", "–¥–æ–ª", "–¥–æ–ª–ª–∞—Ä"], "uzs": ["—Å—É–º", "sum", "uzs", "—Å—É–º—ã", "—Å—É–º–æ–≤"]}
CATEGORY_KEYWORDS = {
    "–ï–¥–∞":["–µ–¥–∞","–ø—Ä–æ–¥—É–∫—Ç","–æ–±–µ–¥","—É–∂–∏–Ω","–∑–∞–≤—Ç—Ä–∞–∫","–∫–∞—Ñ–µ","—Ä–µ—Å—Ç–æ—Ä–∞–Ω","—Å–∞–º—Å–∞","–ø–ª–æ–≤","—à–∞—É—Ä–º–∞","–ø–∏—Ü—Ü–∞"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç":["—Ç–∞–∫—Å–∏","—Ç–æ–ø–ª–∏–≤–æ","–±–µ–Ω–∑–∏–Ω","–≥–∞–∑","–º–µ—Ç—Ä–æ","–∞–≤—Ç–æ–±—É—Å","–∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ","–∞—Ä–µ–Ω–¥–∞ –º–∞—à–∏–Ω—ã"],
    "–ó–∞—Ä–ø–ª–∞—Ç–∞":["–∑–∞—Ä–ø–ª–∞—Ç–∞","–æ–∫–ª–∞–¥","–ø—Ä–µ–º–∏—è","–±–æ–Ω—É—Å","–∞–≤–∞–Ω—Å"],
    "–ó–¥–æ—Ä–æ–≤—å–µ":["–∞–ø—Ç–µ–∫–∞","–≤—Ä–∞—á","—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥","–ª–µ–∫–∞—Ä","–≤–∏—Ç–∞–º–∏–Ω"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è":["–∫–∏–Ω–æ","–∏–≥—Ä–∞","cs2","steam","–ø–æ–¥–ø–∏—Å–∫–∞","spotify","netflix"],
    "–î–æ–º":["–∞—Ä–µ–Ω–¥–∞","–∫–≤–∞—Ä—Ç–∏—Ä–∞","–∫–æ–º–º—É–Ω–∞–ª","—ç–ª–µ–∫—Ç—Ä","–∏–Ω—Ç–µ—Ä–Ω–µ—Ç","—Ä–µ–º–æ–Ω—Ç"],
    "–î–µ—Ç—Å–∫–æ–µ":["–ø–∞–º–ø–µ—Ä—Å","–ø–æ–¥–≥—É–∑","–∫–æ–ª—è—Å–∫–∞","–∏–≥—Ä—É—à","–¥–µ—Ç—Å–∫","–¥–æ—á–∫–∞","—Ö–∞–¥–∏–¥–∂–∞"],
    "–°–ø–æ—Ä—Ç":["–∑–∞–ª","—Å–ø–æ—Ä—Ç","–∫—Ä–µ–∞—Ç–∏–Ω","–ø—Ä–æ—Ç–µ–∏–Ω","–≥–µ–π–Ω–µ—Ä","–∞–±–æ–Ω–µ–º–µ–Ω—Ç"],
    "–ü—Ä–æ—á–µ–µ":[]
}
def detect_currency(t:str)->str:
    t=t.lower()
    for cur,s in CURRENCY_SIGNS.items():
        if any(x in t for x in s): return cur
    return "uzs"
def parse_amount(t:str)->Optional[float]:
    m=re.findall(r"(?:(?<=\s)|^)(\d{1,3}(?:[ \u00A0,\.]\d{3})+|\d+)(?:[.,](\d{1,2}))?",t)
    if not m: return None
    raw,frac=m[-1]; num=re.sub(r"[ \u00A0,\.]","",raw)
    return float(f"{num}.{frac}") if frac else float(num)
def guess_type(t:str)->str:
    t=t.lower()
    if any(w in t for w in ["–∑–∞—Ä–ø–ª–∞—Ç–∞","–ø—Ä–µ–º–∏—è","–±–æ–Ω—É—Å","–ø–æ–ª—É—á–∏–ª","–ø—Ä–∏—à–ª–æ","–¥–æ—Ö–æ–¥"]): return "income"
    if any(w in t for w in ["—Ä–∞—Å—Ö–æ–¥","–∫—É–ø–∏–ª","–æ–ø–ª–∞—Ç–∏–ª","–∑–∞–ø–ª–∞—Ç–∏–ª","–ø–æ—Ç—Ä–∞—Ç–∏–ª","—Å–Ω—è–ª"]): return "expense"
    return "expense"
def guess_category(t:str)->str:
    t=t.lower()
    for cat,kws in CATEGORY_KEYWORDS.items():
        if any(k in t for k in kws): return cat
    if any(x in t for x in ["–∑–∞—Ä–ø–ª–∞—Ç","–ø—Ä–µ–º","–±–æ–Ω—É—Å"]): return "–ó–∞—Ä–ø–ª–∞—Ç–∞"
    return "–ü—Ä–æ—á–µ–µ"
def ai_classify_finance(t:str):
    return guess_type(t), parse_amount(t), detect_currency(t), guess_category(t)

def add_tx(uid:int, ttype:str, amount:float, cur:str, cat:str, note:str):
    con=sqlite3.connect(DB_PATH); c=con.cursor()
    c.execute("INSERT INTO tx(user_id,ttype,amount,currency,category,note,ts) VALUES(?,?,?,?,?,?,?)",
              (uid,ttype,amount,cur,cat,note,int(time.time())))
    con.commit(); con.close()
def last_txs(uid:int, limit:int=10):
    con=sqlite3.connect(DB_PATH); c=con.cursor()
    c.execute("SELECT ttype,amount,currency,category,note,ts FROM tx WHERE user_id=? ORDER BY id DESC LIMIT ?",
              (uid,limit))
    rows=c.fetchall(); con.close(); return rows
def get_balance(uid:int):
    con=sqlite3.connect(DB_PATH); c=con.cursor()
    def s(t,cur):
        c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype=? AND currency=?",(uid,t,cur))
        return c.fetchone()[0]
    bal_uzs=s("income","uzs")-s("expense","uzs")
    bal_usd=s("income","usd")-s("expense","usd"); con.close()
    return bal_uzs, bal_usd

async def start(update:Update, _:ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Razzakov‚Äôs Finance ü§ñ\n–ü–∏—à–∏: ¬´—Å–∞–º—Å–∞ 18 000 —Å—É–º¬ª, ¬´—Ç–∞–∫—Å–∏ 25 000¬ª, ¬´–∑–∞—Ä–ø–ª–∞—Ç–∞ 800$¬ª.",
        reply_markup=MAIN_KB)

async def text_router(update:Update, _:ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    txt = (update.message.text or "").strip()
    low = txt.lower()
    if "–±–∞–ª–∞–Ω—Å" in low:
        uzs, usd = get_balance(uid)
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å:\n‚Ä¢ UZS: {int(uzs):,}".replace(","," ") + f"\n‚Ä¢ USD: {usd:.2f}", reply_markup=MAIN_KB); return
    if "–∏—Å—Ç–æ—Ä–∏—è" in low:
        rows = last_txs(uid, 10)
        if not rows:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB); return
        lines=[]
        for ttype,amount,cur,cat,note,ts in rows:
            dt=datetime.fromtimestamp(ts).strftime("%d.%m %H:%M")
            sign="‚ûï" if ttype=="income" else "‚ûñ"
            lines.append(f"{dt} {sign} {amount:.2f} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or '-'}")
        await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"+"\n".join(lines), reply_markup=MAIN_KB); return
    if "–æ—Ç—á—ë—Ç" in low or "–æ—Ç—á–µ—Ç" in low:
        uzs, usd = get_balance(uid)
        await update.message.reply_text(f"–û—Ç—á—ë—Ç (–∫—Ä–∞—Ç–∫–æ):\n‚Ä¢ –ë–∞–ª–∞–Ω—Å UZS: {int(uzs):,}".replace(","," ") + f"\n‚Ä¢ –ë–∞–ª–∞–Ω—Å USD: {usd:.2f}", reply_markup=MAIN_KB); return
    ttype, amount, cur, cat = ai_classify_finance(txt)
    if amount is not None:
        add_tx(uid, ttype, amount, cur, cat, txt)
        await update.message.reply_text(f"{'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'}: {amount:.2f} {cur.upper()} ‚Ä¢ {cat}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=MAIN_KB); return
    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ –ù–∞–ø–∏—à–∏: ¬´—Ç–∞–∫—Å–∏ 25 000¬ª, ¬´–∑–∞—Ä–ø–ª–∞—Ç–∞ 800$¬ª.", reply_markup=MAIN_KB)

async def unknown_cmd(update:Update, _:ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç—Ä–∞—Ç—ã/–¥–æ—Ö–æ–¥.", reply_markup=MAIN_KB)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}",
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()

