–°–∏—Ç—É–∞—Ü–∏—è:
–í –º–æ—ë–º –±–æ—Ç–µ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–î–æ–ª–≥–∏¬ª. –¢–∞–º –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´–ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª, –≥–¥–µ —è –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—É–º–º—É –∏ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 usd Roni).

–ü—Ä–æ–±–ª–µ–º–∞:
–ö–æ–≥–¥–∞ —è –≤—ã–±–∏—Ä–∞—é ¬´–ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª –∏ –≤–≤–æ–∂—É –¥–∞–Ω–Ω—ã–µ, –±–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω–∏–∫–æ–≤. –û–Ω –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è (¬´–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ¬ª), –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.

–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:

–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª –∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞ ¬´5000 usd Roni¬ª –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—è–º–∏:

–°—É–º–º–∞ (5000)

–í–∞–ª—é—Ç–∞ (USD)

–ò–º—è/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (Roni)

–î–∞—Ç–∞/–≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

–≠—Ç–∞ –∑–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ ¬´–ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª.

–¢–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ –æ–±—â–µ–º –±–∞–ª–∞–Ω—Å–µ (—á–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å —Å —É—á—ë—Ç–æ–º –¥–æ–ª–≥–æ–≤).



–Ø –Ω–∞–∂–∏–º–∞—é:

+ –ú–Ω–µ –¥–æ–ª–∂–Ω—ã
5000 usd Roni


–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:

‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:
‚Ä¢ –°—É–º–º–∞: 5000 USD
‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: Roni
‚Ä¢ –î–∞—Ç–∞: 21.08.2025 14:27


–ò –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é:

‚ûï –Ø –¥–æ–ª–∂–µ–Ω    ‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã
üìú –Ø –¥–æ–ª–∂–µ–Ω    üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã
‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥  ‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥
‚óÄÔ∏è –ù–∞–∑–∞–¥


–ê –µ—Å–ª–∏ —è –∑–∞–π–¥—É –≤ üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã, –±–æ—Ç –ø–∏—à–µ—Ç —Å–ø–∏—Å–æ–∫:

–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:
#1 Roni ‚Äì 5000 USD (21.08.2025)


–ò –≤ –æ–±—â–µ–º –±–∞–ª–∞–Ω—Å–µ –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ:

–ë–∞–ª–∞–Ω—Å –±–µ–∑ –¥–æ–ª–≥–æ–≤: 20 000$
–Ø –¥–æ–ª–∂–µ–Ω: 6 000$
–ú–Ω–µ –¥–æ–ª–∂–Ω—ã: 5 000$
–ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: 19 000$
Thought for 33s
–°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ—Ç main.py ‚Äî ¬´‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã ‚Üí 5000 usd Roni¬ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, –≤—ã–¥–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ ¬´üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª. –ë–∞–ª–∞–Ω—Å —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥–∏.

import os, re, sqlite3, time, logging, csv, io
from datetime import datetime, timedelta, time as dtime
from typing import Optional, Tuple, List
from zoneinfo import ZoneInfo

import httpx
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

PORT = int(os.environ.get("PORT", "8080"))
DB_PATH = os.environ.get("DB_PATH", "finance.db")
TIMEZONE = ZoneInfo(os.environ.get("TZ", "Asia/Tashkent"))
ALLOWED_USER_IDS = {int(x) for x in os.environ.get("ALLOWED_USER_IDS", "").replace(";", ",").split(",") if x.strip().isdigit()}
ADMIN_USER_ID = int(os.environ.get("ADMIN_USER_ID")) if os.environ.get("ADMIN_USER_ID", "").isdigit() else None

DEFAULT_BOT_TOKEN = os.environ.get("BOT_TOKEN", "7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc")

logging.basicConfig(format="%(asctime)s %(levelname)s %(name)s | %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

def init_db():
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""CREATE TABLE IF NOT EXISTS tx(
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		ttype TEXT NOT NULL CHECK(ttype IN('income','expense')),
		amount REAL NOT NULL,
		currency TEXT NOT NULL,
		category TEXT NOT NULL,
		note TEXT,
		ts INTEGER NOT NULL
	)""")
	c.execute("CREATE INDEX IF NOT EXISTS idx_user_ts ON tx(user_id, ts)")
	c.execute("""CREATE TABLE IF NOT EXISTS debts(
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		direction TEXT NOT NULL CHECK(direction IN('i_owe','they_owe')),
		counterparty TEXT NOT NULL,
		amount REAL NOT NULL,
		currency TEXT NOT NULL,
		note TEXT,
		status TEXT NOT NULL DEFAULT 'open' CHECK(status IN('open','closed')),
		created_ts INTEGER NOT NULL,
		updated_ts INTEGER NOT NULL
	)""")
	c.execute("CREATE INDEX IF NOT EXISTS idx_debts_user ON debts(user_id, status, direction)")
	c.execute("""CREATE TABLE IF NOT EXISTS budgets(
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		category TEXT NOT NULL,
		currency TEXT NOT NULL,
		limit_amount REAL NOT NULL,
		period TEXT NOT NULL DEFAULT 'month',
		created_ts INTEGER NOT NULL
	)""")
	con.commit(); con.close()
init_db()

BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

MAIN_KB = ReplyKeyboardMarkup(
	[
		[KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
		[KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
		[KeyboardButton("–î–æ–ª–≥–∏")],
	],
	resize_keyboard=True
)

def debts_menu_kb() -> ReplyKeyboardMarkup:
	rows = [
		[KeyboardButton("‚ûï –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
		[KeyboardButton("üìú –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
		[KeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥"), KeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥")],
		[KeyboardButton(BACK_BTN)]
	]
	return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def is_authorized(user_id: int) -> bool:
	return True if not ALLOWED_USER_IDS else user_id in ALLOWED_USER_IDS

def detect_currency(t: str) -> str:
	tl = t.lower()
	if "$" in tl:
		return "usd"
	words = set(re.findall(r"[a-z–∞-—è—ë]+", tl))
	if {"usd","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"} & words:
		return "usd"
	if {"uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤"} & words:
		return "uzs"
	return "uzs"

def parse_amount(t: str) -> Optional[float]:
	s = t.replace("\u00A0", " ")
	m = re.findall(r"(?:(?<=\s)|^|(?<=[^\w]))(\d{1,3}(?:[ \u00A0\.,]\d{3})+|\d+)(?:[.,](\d{1,2}))?", s)
	if not m:
		return None
	raw, frac = m[-1]
	num = re.sub(r"[ \u00A0\.,]", "", raw)
	try:
		return float(f"{num}.{frac}") if frac else float(num)
	except ValueError:
		return None

CURRENCY_WORDS = {"usd","uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"}
def extract_counterparty_from_text(t: str) -> str:
	words = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]+", t)
	names = [w for w in words if w.lower() not in CURRENCY_WORDS]
	return " ".join(names[-2:]) if names else ""

def fmt_amount(amount: float, cur: str) -> str:
	if cur == "uzs":
		return f"{int(round(amount)):,}".replace(",", " ")
	return f"{amount:.2f}"

def add_tx(uid: int, ttype: str, amount: float, cur: str, cat: str, note: str) -> int:
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("INSERT INTO tx(user_id,ttype,amount,currency,category,note,ts) VALUES(?,?,?,?,?,?,?)",
	          (uid, ttype, amount, cur, cat, note, int(time.time())))
	tx_id = c.lastrowid
	con.commit(); con.close()
	return tx_id

def last_txs(uid: int, limit: int = 10):
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""SELECT id, ttype, amount, currency, category, note, ts
	             FROM tx WHERE user_id=? ORDER BY ts DESC LIMIT ?""", (uid, limit))
	rows = c.fetchall(); con.close(); return rows

def get_balance(uid: int) -> Tuple[float,float]:
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	def s(t, cur):
		c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype=? AND currency=?",
		          (uid, t, cur))
		return c.fetchone()[0]
	bal_uzs = s("income","uzs") - s("expense","uzs")
	bal_usd = s("income","usd") - s("expense","usd")
	con.close()
	return bal_uzs, bal_usd

# Debts
def add_debt(uid: int, direction: str, counterparty: str, amount: float, currency: str, note: str) -> int:
	now = int(time.time())
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""INSERT INTO debts(user_id, direction, counterparty, amount, currency, note, status, created_ts, updated_ts)
	             VALUES(?,?,?,?,?,?, 'open', ?, ?)""",
	          (uid, direction, counterparty, amount, currency, note, now, now))
	debt_id = c.lastrowid
	con.commit(); con.close()
	return debt_id

def list_debts(uid: int, direction: str):
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""SELECT id, counterparty, amount, currency, note, created_ts
	             FROM debts
	             WHERE user_id=? AND status='open' AND direction=?
	             ORDER BY id DESC""", (uid, direction))
	rows = c.fetchall(); con.close(); return rows

def close_debt(uid: int, debt_id: int) -> bool:
	now = int(time.time())
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("UPDATE debts SET status='closed', updated_ts=? WHERE id=? AND user_id=? AND status='open'",
	          (now, debt_id, uid))
	ok = c.rowcount > 0
	con.commit(); con.close()
	return ok

def reduce_debt(uid: int, debt_id: int, delta: float) -> Optional[Tuple[float,str,str]]:
	now = int(time.time())
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("SELECT amount, currency FROM debts WHERE id=? AND user_id=? AND status='open'", (debt_id, uid))
	row = c.fetchone()
	if not row:
		con.close(); return None
	amount, currency = row
	new_amount = max(0.0, amount - abs(delta))
	if new_amount <= 0.0:
		c.execute("UPDATE debts SET amount=0, status='closed', updated_ts=? WHERE id=?", (now, debt_id))
		status = "closed"
	else:
		c.execute("UPDATE debts SET amount=?, updated_ts=? WHERE id=?", (new_amount, now, debt_id))
		status = "open"
	con.commit(); con.close()
	return new_amount, currency, status

def debt_totals(uid: int) -> Tuple[float,float,float,float]:
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	def s(direction: str, cur: str):
		c.execute("""SELECT COALESCE(SUM(amount),0)
		             FROM debts WHERE user_id=? AND status='open' AND direction=? AND currency=?""",
		          (uid, direction, cur))
		return c.fetchone()[0] or 0.0
	iowe_uzs = s("i_owe","uzs"); iowe_usd = s("i_owe","usd")
	they_uzs = s("they_owe","uzs"); they_usd = s("they_owe","usd")
	con.close()
	return iowe_uzs, iowe_usd, they_—É–∑s, they_usd

def balance_with_debts_text(uid: int) -> str:
	uzs, usd = get_balance(uid)
	iowe_uzs, iowe_usd, they_—É–∑s, they_usd = debt_totals(uid)
	net_—É–∑s = uzs - iowe_—É–∑s + they_—É–∑s
	net_usd = usd - iowe_us–¥ + they_us–¥
	lines = [
		f"–ë–∞–ª–∞–Ω—Å –±–µ–∑ –¥–æ–ª–≥–æ–≤: {fmt_amount(uzs,'uzs')} UZS | {fmt_amount(usd,'usd')} USD",
		f"–Ø –¥–æ–ª–∂–µ–Ω: {fmt_amount(iowe_—É–∑s,'uzs')} UZS | {fmt_amount(iowe_usd,'usd')} USD",
		f"–ú–Ω–µ –¥–æ–ª–∂–Ω—ã: {fmt_amount(they_—É–∑s,'uzs')} UZS | {fmt_amount(they_usd,'usd')} USD",
		f"–ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: {fmt_amount(net_—É–∑s,'uzs')} UZS | {fmt_amount(net_usd,'usd')} USD",
	]
	return "\n".join(lines)

async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
	if not is_authorized(update.effective_user.id):
		await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
		return
	await update.message.reply_text("–§–∏–Ω–∞–Ω—Å—ã ü§ñ\n–ö–Ω–æ–ø–∫–∏: ¬´‚ûñ –†–∞—Å—Ö–æ–¥ / ‚ûï –î–æ—Ö–æ–¥ / –î–æ–ª–≥–∏¬ª.", reply_markup=MAIN_KB)

def tx_line(ttype: str, amount: float, cur: str, cat: str, note: Optional[str], ts: int) -> str:
	dt = datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%d.%m %H:%M")
	sign = "‚ûï" if ttype == "income" else "‚ûñ"
	return f"{dt} {sign} {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or '-'}"

async def send_history(update: Update, uid: int, limit: int = 10):
	rows = last_txs(uid, limit)
	if not rows:
		await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB); return
	lines = [f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ({len(rows)}):"]
	for id_, ttype, amount, cur, cat, note, ts in rows:
		lines.append(f"#{id_} " + tx_line(ttype, amount, cur, cat, note, ts))
	await update.message.reply_text("\n".join(lines), reply_markup=MAIN_KB)

def debts_list_pretty(uid: int, direction: str) -> str:
	rows = list_debts(uid, direction)
	title = "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:" if direction == "they_owe" else "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–æ–ª–≥–æ–≤:"
	if not rows:
		return f"{title}\n‚Äî –ø—É—Å—Ç–æ ‚Äî"
	lines = [title]
	for id_, who, amount, cur, note, created_ts in rows:
		d = datetime.fromtimestamp(created_ts, tz=TIMEZONE).strftime("%d.%m.%Y")
		lines.append(f"#{id_} {who} ‚Äì {fmt_amount(amount,cur)} {cur.upper()} ({d})")
	return "\n".join(lines)

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
	uid = update.effective_user.id
	txt = (update.message.text or "").strip()
	low = txt.lower()

	if not is_authorized(uid):
		await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
		return

	# Debts flow
	debts = context.user_data.get("debts")
	if debts:
		stage = debts.get("stage")
		if txt == BACK_BTN:
			context.user_data.pop("debts", None)
			await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KB)
			return
		if stage == "menu":
			await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=debts_menu_kb())
			return
		if stage == "add_counterparty":
			amt = parse_amount(txt)
			if amt is not None:
				cur = detect_currency(txt)
				who = extract_counterparty_from_text(txt) or debts.get("counterparty") or "‚Äî"
				debt_id = add_debt(uid, debts["direction"], who, amt, cur, txt)
				now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
				msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
				      f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
				      f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
				      f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
				await update.message.reply_text(msg, reply_markup=debts_menu_kb())
				debts["stage"] = "menu"
			else:
				debts["counterparty"] = txt
				debts["stage"] = "add_amount"
				await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 000 –¥–æ–ª–≥ –∑–∞ –æ–±–µ–¥).",
				                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
			return
		if stage == "add_amount":
			amt = parse_amount(txt)
			if amt is None:
				await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 25 000 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
				                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
				return
			cur = detect_currency(txt)
			who = debts.get("counterparty") or extract_counterparty_from_text(txt) or "‚Äî"
			debt_id = add_debt(uid, debts["direction"], who, amt, cur, txt)
			now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
			msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
			      f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
			      f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
			      f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
			await update.message.reply_text(msg, reply_markup=debts_menu_kb())
			debts["stage"] = "menu"
			return
		if stage == "close_ask_id":
			m = re.search(r"(\d+)", txt)
			if not m:
				await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb()); return
			ok = close_debt(uid, int(m.group(1)))
			await update.message.reply_text("–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
			debts["stage"] = "menu"; return
		if stage == "reduce_ask_id":
			m = re.search(r"(\d+)", txt)
			if not m:
				await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb()); return
			debts["reduce_id"] = int(m.group(1))
			debts["stage"] = "reduce_ask_amount"
			await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 000)",
			                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
			return
		if stage == "reduce_ask_amount":
			amt = parse_amount(txt)
			if amt is None or amt <= 0:
				await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 50 000",
				                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
			res = reduce_debt(uid, debts["reduce_id"], amt)
			if not res:
				await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
			else:
				new_amount, cur, status = res
				await update.message.reply_text(
					"–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é." if status=="closed" else f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(new_amount,cur)} {cur.upper()}",
					reply_markup=debts_menu_kb()
				)
			debts["stage"] = "menu"; debts.pop("reduce_id", None)
		 return

	# Enter debts menu
	if low == "–¥–æ–ª–≥–∏":
		context.user_data["debts"] = {"stage":"menu"}
		await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=debts_menu_kb()); return
	if low == "‚ûï —è –¥–æ–ª–∂–µ–Ω":
		context.user_data["debts"] = {"stage":"add_counterparty", "direction":"i_owe"}
		await update.message.reply_text("–ö–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd –ò–≤–∞–Ω¬ª.",
		                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
	if low == "‚ûï –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
		context.user_data["debts"] = {"stage":"add_counterparty", "direction":"they_owe"}
		await update.message.reply_text("–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd Roni¬ª.",
		                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
	if low == "üìú —è –¥–æ–ª–∂–µ–Ω":
		await update.message.reply_text(debts_list_pretty(uid, "i_owe"), reply_markup=debts_menu_kb()); return
	if low == "üìú –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
		await update.message.reply_text(debts_list_pretty(uid, "they_owe"), reply_markup=debts_menu_kb()); return
	if low == "‚úñÔ∏è –∑–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥":
		context.user_data["debts"] = {"stage":"close_ask_id"}
		await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb()); return
	if low == "‚ûñ —É–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥":
		context.user_data["debts"] = {"stage":"reduce_ask_id"}
		await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb()); return

	# Basics
	if "–±–∞–ª–∞–Ω—Å" in low:
		await update.message.reply_text(balance_with_debts_text(uid), reply_markup=MAIN_KB); return
	if "–∏—Å—Ç–æ—Ä–∏—è" in low:
		await send_history(update, uid, 10); return

	# Free text tx
	ttype, amount, cur, cat = ai_classify_finance(txt)
	if amount is not None:
		tx_id = add_tx(uid, ttype, amount, cur, cat, txt)
		await update.message.reply_text(f"{'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'}: {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#{tx_id})", reply_markup=MAIN_KB)
		return

	await update.message.reply_text("–û–∫ ‚úÖ –ù–∞–ø–∏—à–∏: ¬´—Ç–∞–∫—Å–∏ 25 000¬ª –∏–ª–∏ –∑–∞–π–¥–∏ –≤ ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=MAIN_KB)

async def unknown_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
	await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç—Ä–∞—Ç—ã/–¥–æ—Ö–æ–¥.", reply_markup=MAIN_KB)

def main():
	token = DEFAULT_BOT_TOKEN
	app = Application.builder().token(token).build()
	app.add_handler(CommandHandler("start", start))
	app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
	app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))
	log.info("Starting polling")
	app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
	main()
–ü—Ä–æ–≤–µ—Ä–∫–∞: –î–æ–ª–≥–∏ ‚Üí ¬´‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª ‚Üí –æ—Ç–ø—Ä–∞–≤—å ¬´5000 usd Roni¬ª. –ü—Ä–∏–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤ ¬´üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª. –ë–∞–ª–∞–Ω—Å —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥–∏.
—ç—Ç–æ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–¥–∞
Thought for 13s
–î–∞, —ç—Ç–æ –ø–æ–ª–Ω—ã–π main.py. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–æ–±–∞–≤—å requirements.txt –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏:

python-telegram-bot==20.7
httpx==0.25.2
–°—Ç–∞—Ä—Ç: BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π) –∏ –∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É: python main.py.

IndentationError: unindent does not match any outer indentation level

Aug 24 14:48:52
  File "/app/main.py", line 330

Aug 24 14:48:52
    return

Aug 24 14:48:52
          ^

Aug 24 14:48:52
IndentationError: unindent does not match any outer indentation level

Aug 24 14:48:54
  File "/app/main.py", line 330

Aug 24 14:48:54
    return

Aug 24 14:48:54
          ^

Aug 24 14:48:54
IndentationError: unindent does not match any outer indentation level

Aug 24 14:48:55
  File "/app/main.py", line 330

Aug 24 14:48:55
IndentationError: unindent does not match any outer indentation level
Thought for 29s
–ü—Ä–∏—á–∏–Ω–∞: –ª–∏—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø —É return –≤ –≤–µ—Ç–∫–µ reduce_ask_amount. –ó–∞–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏—é text_router —Ü–µ–ª–∏–∫–æ–º –Ω–∞ —ç—Ç—É (–≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ç—Ä–æ–≥–∞–π):

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
	uid = update.effective_user.id
	txt = (update.message.text or "").strip()
	low = txt.lower()

	if not is_authorized(uid):
		await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
		return

	debts = context.user_data.get("debts")
	if debts:
		stage = debts.get("stage")
		if txt == BACK_BTN:
			context.user_data.pop("debts", None)
			await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KB)
			return

		if stage == "menu":
			await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=debts_menu_kb())
			return

		if stage == "add_counterparty":
			amt = parse_amount(txt)
			if amt is not None:
				cur = detect_currency(txt)
				who = extract_counterparty_from_text(txt) or debts.get("counterparty") or "‚Äî"
				debt_id = add_debt(uid, debts["direction"], who, amt, cur, txt)
				now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%–ú")
				msg = (
					"‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
					f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n"
					f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n"
					f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
				)
				await update.message.reply_text(msg, reply_markup=debts_menu_kb())
				debts["stage"] = "menu"
			else:
				debts["counterparty"] = txt
				debts["stage"] = "add_amount"
				await update.message.reply_text(
					"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 000 –¥–æ–ª–≥ –∑–∞ –æ–±–µ–¥).",
					reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)
				)
			return

		if stage == "add_amount":
			amt = parse_amount(txt)
			if amt is None:
				await update.message.reply_text(
					"–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 25 000 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
					reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)
				)
				return
			cur = detect_currency(txt)
			who = debts.get("counterparty") or extract_counterparty_from_text(txt) or "‚Äî"
			debt_id = add_debt(uid, debts["direction"], who, amt, cur, txt)
			now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%–ú")
			msg = (
				"‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
				f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n"
				f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n"
				f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
			)
			await update.message.reply_text(msg, reply_markup=debts_menu_kb())
			debts["stage"] = "menu"
			return

		if stage == "close_ask_id":
			m = re.search(r"(\d+)", txt)
			if not m:
				await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb())
				return
			ok = close_debt(uid, int(m.group(1)))
			await update.message.reply_text(
				"–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.",
				reply_markup=debts_menu_kb()
			)
			debts["stage"] = "menu"
			return

		if stage == "reduce_ask_id":
			m = re.search(r"(\d+)", txt)
			if not m:
				await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb())
				return
			debts["reduce_id"] = int(m.group(1))
			debts["stage"] = "reduce_ask_amount"
			await update.message.reply_text(
				"–ù–∞ —Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 000)",
				reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)
			)
			return

		if stage == "reduce_ask_amount":
			amt = parse_amount(txt)
			if amt is None or amt <= 0:
				await update.message.reply_text(
					"–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 50 000",
					reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)
				)
				return
			res = reduce_debt(uid, debts["reduce_id"], amt)
			if not res:
				await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
			else:
				new_amount, cur, status = res
				if status == "closed":
					await update.message.reply_text("–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.", reply_markup=debts_menu_kb())
				else:
					await update.message.reply_text(f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(new_amount,cur)} {cur.upper()}", reply_markup=debts_menu_kb())
			debts["stage"] = "menu"
			debts.pop("reduce_id", None)
			return

	# –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ¬´–î–æ–ª–≥–∏¬ª
	if low == "–¥–æ–ª–≥–∏":
		context.user_data["debts"] = {"stage":"menu"}
		await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=debts_menu_kb())
		return
	if low == "‚ûï —è –¥–æ–ª–∂–µ–Ω":
		context.user_data["debts"] = {"stage":"add_counterparty", "direction":"i_owe"}
		await update.message.reply_text("–ö–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd –ò–≤–∞–Ω¬ª.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
		return
	if low == "‚ûï –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
		context.user_data["debts"] = {"stage":"add_counterparty", "direction":"they_owe"}
		await update.message.reply_text("–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd Roni¬ª.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
		return
	if low == "üìú —è –¥–æ–ª–∂–µ–Ω":
		await update.message.reply_text(debts_list_pretty(uid, "i_owe"), reply_markup=debts_menu_kb())
		return
	if low == "üìú –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
		await update.message.reply_text(debts_list_pretty(uid, "they_owe"), reply_markup=debts_menu_kb())
		return
	# –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–∞–∫ –±—ã–ª–æ: –±–∞–ª–∞–Ω—Å/–∏—Å—Ç–æ—Ä–∏—è/–æ–ø–µ—Ä–∞—Ü–∏–∏...
–æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω–æ—Å—Ç—é —á—Ç–æ–±—ã —è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª
Thought for 33s
–ì–æ—Ç–æ–≤–æ. –°–∫–æ–ø–∏—Ä—É–π —ç—Ç–∏ —Ñ–∞–π–ª—ã –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏.

# main.py
import os, re, sqlite3, time, logging
from datetime import datetime
from typing import Optional, Tuple, List
from zoneinfo import ZoneInfo

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ------- Config -------
PORT = int(os.environ.get("PORT", "8080"))
DB_PATH = os.environ.get("DB_PATH", "finance.db")
TIMEZONE = ZoneInfo(os.environ.get("TZ", "Asia/Tashkent"))
ALLOWED_USER_IDS = {int(x) for x in os.environ.get("ALLOWED_USER_IDS", "").replace(";", ",").split(",") if x.strip().isdigit()}
DEFAULT_BOT_TOKEN = os.environ.get("BOT_TOKEN", "7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc")

logging.basicConfig(format="%(asctime)s %(levelname)s %(name)s | %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

# ------- DB -------
def init_db():
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS tx(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        ttype TEXT NOT NULL CHECK(ttype IN('income','expense')),
        amount REAL NOT NULL,
        currency TEXT NOT NULL,
        category TEXT NOT NULL,
        note TEXT,
        ts INTEGER NOT NULL
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS debts(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        direction TEXT NOT NULL CHECK(direction IN('i_owe','they_owe')),
        counterparty TEXT NOT NULL,
        amount REAL NOT NULL,
        currency TEXT NOT NULL,
        note TEXT,
        status TEXT NOT NULL DEFAULT 'open' CHECK(status IN('open','closed')),
        created_ts INTEGER NOT NULL,
        updated_ts INTEGER NOT NULL
    )""")
    c.execute("CREATE INDEX IF NOT EXISTS idx_tx_user_ts ON tx(user_id, ts)")
    c.execute("CREATE INDEX IF NOT EXISTS idx_debts_user ON debts(user_id, status, direction)")
    con.commit(); con.close()
init_db()

# ------- Keyboards -------
BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("–î–æ–ª–≥–∏")],
    ],
    resize_keyboard=True
)
def debts_menu_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton("‚ûï –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
        [KeyboardButton("üìú –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
        [KeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥"), KeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥")],
        [KeyboardButton(BACK_BTN)]
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# ------- Helpers -------
def is_authorized(user_id: int) -> bool:
    return True if not ALLOWED_USER_IDS else user_id in ALLOWED_USER_IDS

def detect_currency(t: str) -> str:
    tl = t.lower()
    if "$" in tl:
        return "usd"
    words = set(re.findall(r"[a-z–∞-—è—ë]+", tl))
    if {"usd", "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª–∞—Ä–∞", "–¥–æ–ª–ª–∞—Ä—ã", "–¥–æ–ª–ª–∞—Ä–æ–≤", "–±–∞–∫—Å", "–±–∞–∫—Å—ã", "–¥–æ–ª"} & words:
        return "usd"
    if {"uzs", "sum", "—Å—É–º", "—Å—É–º—ã", "—Å—É–º–æ–≤"} & words:
        return "uzs"
    return "uzs"

def parse_amount(t: str) -> Optional[float]:
    s = t.replace("\u00A0", " ")
    m = re.findall(r"(?:(?<=\s)|^|(?<=[^\w]))(\d{1,3}(?:[ \u00A0\.,]\d{3})+|\d+)(?:[.,](\d{1,2}))?", s)
    if not m:
        return None
    raw, frac = m[-1]
    num = re.sub(r"[ \u00A0\.,]", "", raw)
    try:
        return float(f"{num}.{frac}") if frac else float(num)
    except ValueError:
        return None

CURRENCY_WORDS = {"usd","uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"}
def extract_counterparty_from_text(t: str) -> str:
    words = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]+", t)
    names = [w for w in words if w.lower() not in CURRENCY_WORDS]
    return " ".join(names[-2:]) if names else ""

def fmt_amount(amount: float, cur: str) -> str:
    if cur == "uzs":
        return f"{int(round(amount)):,}".replace(",", " ")
    return f"{amount:.2f}"

# ------- TX -------
def add_tx(uid: int, ttype: str, amount: float, cur: str, cat: str, note: str) -> int:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("INSERT INTO tx(user_id,ttype,amount,currency,category,note,ts) VALUES(?,?,?,?,?,?,?)",
              (uid, ttype, amount, cur, cat, note, int(time.time())))
    tx_id = c.lastrowid
    con.commit(); con.close()
    return tx_id

def last_txs(uid: int, limit: int = 10):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, ttype, amount, currency, category, note, ts
                 FROM tx WHERE user_id=? ORDER BY ts DESC LIMIT ?""", (uid, limit))
    rows = c.fetchall(); con.close(); return rows

def get_balance(uid: int) -> Tuple[float, float]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    def s(tt: str, cur: str) -> float:
        c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype=? AND currency=?", (uid, tt, cur))
        return float(c.fetchone()[0] or 0.0)
    bal_uzs = s("income", "uzs") - s("expense", "uzs")
    bal_usd = s("income", "usd") - s("expense", "usd")
    con.close()
    return bal_uzs, bal_usd

# ------- Debts -------
def add_debt(uid: int, direction: str, counterparty: str, amount: float, currency: str, note: str) -> int:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""INSERT INTO debts(user_id, direction, counterparty, amount, currency, note, status, created_ts, updated_ts)
                 VALUES(?,?,?,?,?,?, 'open', ?, ?)""", (uid, direction, counterparty, amount, currency, note, now, now))
    debt_id = c.lastrowid
    con.commit(); con.close()
    return debt_id

def list_debts(uid: int, direction: str):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, counterparty, amount, currency, note, created_ts
                 FROM debts WHERE user_id=? AND status='open' AND direction=? ORDER BY id DESC""", (uid, direction))
    rows = c.fetchall(); con.close(); return rows

def close_debt(uid: int, debt_id: int) -> bool:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("UPDATE debts SET status='closed', updated_ts=? WHERE id=? AND user_id=? AND status='open'", (now, debt_id, uid))
    ok = c.rowcount > 0
    con.commit(); con.close()
    return ok

def reduce_debt(uid: int, debt_id: int, delta: float) -> Optional[Tuple[float, str, str]]:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT amount, currency FROM debts WHERE id=? AND user_id=? AND status='open'", (debt_id, uid))
    row = c.fetchone()
    if not row:
        con.close(); return None
    amount, currency = float(row[0]), str(row[1])
    new_amount = max(0.0, amount - abs(delta))
    if new_amount <= 0.0:
        c.execute("UPDATE debts SET amount=0, status='closed', updated_ts=? WHERE id=?", (now, debt_id))
        status = "closed"
    else:
        c.execute("UPDATE debts SET amount=?, updated_ts=? WHERE id=?", (new_amount, now, debt_id))
        status = "open"
    con.commit(); con.close()
    return new_amount, currency, status

def debt_totals(uid: int) -> Tuple[float, float, float, float]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    def s(direction: str, cur: str) -> float:
        c.execute("""SELECT COALESCE(SUM(amount),0) FROM debts
                     WHERE user_id=? AND status='open' AND direction=? AND currency=?""", (uid, direction, cur))
        return float(c.fetchone()[0] or 0.0)
    iowe_uzs = s("i_owe", "uzs"); iowe_usd = s("i_owe", "usd")
    they_uzs = s("they_owe", "uzs"); they_usd = s("they_owe", "usd")
    con.close()
    return iowe_uzs, iowe_usd, they_uzs, they_usd

def balance_with_debts_text(uid: int) -> str:
    uzs, usd = get_balance(uid)
    iowe_uzs, iowe_usd, they_uzs, they_usd = debt_totals(uid)
    net_uzs = uzs - iowe_uzs + they_uzs
    net_usd = usd - iowe_usd + they_usd
    return "\n".join([
        f"–ë–∞–ª–∞–Ω—Å –±–µ–∑ –¥–æ–ª–≥–æ–≤: {fmt_amount(uzs,'uzs')} UZS | {fmt_amount(usd,'usd')} USD",
        f"–Ø –¥–æ–ª–∂–µ–Ω: {fmt_amount(iowe_uzs,'uzs')} UZS | {fmt_amount(iowe_usd,'usd')} USD",
        f"–ú–Ω–µ –¥–æ–ª–∂–Ω—ã: {fmt_amount(they_uzs,'uzs')} UZS | {fmt_amount(they_usd,'usd')} USD",
        f"–ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: {fmt_amount(net_uzs,'uzs')} UZS | {fmt_amount(net_usd,'usd')} USD",
    ])

def debts_list_pretty(uid: int, direction: str) -> str:
    rows = list_debts(uid, direction)
    title = "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:" if direction == "they_owe" else "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–æ–ª–≥–æ–≤:"
    if not rows:
        return f"{title}\n‚Äî –ø—É—Å—Ç–æ ‚Äî"
    lines = [title]
    for id_, who, amount, cur, note, created_ts in rows:
        d = datetime.fromtimestamp(int(created_ts), tz=TIMEZONE).strftime("%d.%m.%Y")
        lines.append(f"#{id_} {who} ‚Äì {fmt_amount(float(amount),cur)} {cur.upper()} ({d})")
    return "\n".join(lines)

# ------- Bot Handlers -------
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text("–§–∏–Ω–∞–Ω—Å—ã ü§ñ\n–ö–Ω–æ–ø–∫–∏: ¬´‚ûñ –†–∞—Å—Ö–æ–¥ / ‚ûï –î–æ—Ö–æ–¥ / –î–æ–ª–≥–∏¬ª.", reply_markup=MAIN_KB)

def tx_line(ttype: str, amount: float, cur: str, cat: str, note: Optional[str], ts: int) -> str:
    dt = datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%d.%m %H:%M")
    sign = "‚ûï" if ttype == "income" else "‚ûñ"
    return f"{dt} {sign} {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or '-'}"

async def send_history(update: Update, uid: int, limit: int = 10):
    rows = last_txs(uid, limit)
    if not rows:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB); return
    lines = [f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ({len(rows)}):"]
    for id_, ttype, amount, cur, cat, note, ts in rows:
        lines.append(f"#{id_} " + tx_line(ttype, float(amount), cur, cat, note, int(ts)))
    await update.message.reply_text("\n".join(lines), reply_markup=MAIN_KB)

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    txt = (update.message.text or "").strip()
    low = txt.lower()

    if not is_authorized(uid):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    # Debts flow FSM
    debts = context.user_data.get("debts")
    if debts:
        stage = debts.get("stage")
        if txt == BACK_BTN:
            context.user_data.pop("debts", None)
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KB)
            return

        if stage == "menu":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=debts_menu_kb())
            return

        if stage == "add_counterparty":
            amt = parse_amount(txt)
            if amt is not None:
                cur = detect_currency(txt)
                who = extract_counterparty_from_text(txt) or debts.get("counterparty") or "‚Äî"
                add_debt(uid, debts["direction"], who, amt, cur, txt)
                now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
                msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
                      f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
                      f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
                      f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
                await update.message.reply_text(msg, reply_markup=debts_menu_kb())
                debts["stage"] = "menu"
            else:
                debts["counterparty"] = txt
                debts["stage"] = "add_amount"
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 000 –¥–æ–ª–≥ –∑–∞ –æ–±–µ–¥).",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)
                )
            return

        if stage == "add_amount":
            amt = parse_amount(txt)
            if amt is None:
                await update.message.reply_text(
                    "–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 25 000 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)
                )
                return
            cur = detect_currency(txt)
            who = debts.get("counterparty") or extract_counterparty_from_text(txt) or "‚Äî"
            add_debt(uid, debts["direction"], who, amt, cur, txt)
            now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
            msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
                  f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
                  f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
                  f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
            await update.message.reply_text(msg, reply_markup=debts_menu_kb())
            debts["stage"] = "menu"
            return

        if stage == "close_ask_id":
            m = re.search(r"(\d+)", txt)
            if not m:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb())
                return
            ok = close_debt(uid, int(m.group(1)))
            await update.message.reply_text("–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
            debts["stage"] = "menu"
            return

        if stage == "reduce_ask_id":
            m = re.search(r"(\d+)", txt)
            if not m:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb())
                return
            debts["reduce_id"] = int(m.group(1))
            debts["stage"] = "reduce_ask_amount"
            await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 000)",
                                            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
            return

        if stage == "reduce_ask_amount":
            amt = parse_amount(txt)
            if amt is None or amt <= 0:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 50 000",
                                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
                return
            res = reduce_debt(uid, int(debts.get("reduce_id", 0)), amt)
            if not res:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
            else:
                new_amount, cur, status = res
                await update.message.reply_text(
                    "–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é." if status == "closed" else f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(new_amount,cur)} {cur.upper()}",
                    reply_markup=debts_menu_kb()
                )
            debts["stage"] = "menu"
            debts.pop("reduce_id", None)
            return

    # Enter debts menu
    if low == "–¥–æ–ª–≥–∏":
        context.user_data["debts"] = {"stage": "menu"}
        await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=debts_menu_kb())
        return
    if low == "‚ûï —è –¥–æ–ª–∂–µ–Ω":
        context.user_data["debts"] = {"stage": "add_counterparty", "direction": "i_owe"}
        await update.message.reply_text("–ö–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd –ò–≤–∞–Ω¬ª.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
        return
    if low == "‚ûï –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
        context.user_data["debts"] = {"stage": "add_counterparty", "direction": "they_owe"}
        await update.message.reply_text("–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd Roni¬ª.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
        return
    if low == "üìú —è –¥–æ–ª–∂–µ–Ω":
        await update.message.reply_text(debts_list_pretty(uid, "i_owe"), reply_markup=debts_menu_kb())
        return
    if low == "üìú –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
        await update.message.reply_text(debts_list_pretty(uid, "they_owe"), reply_markup=debts_menu_kb())
        return

    # Balance / History
    if "–±–∞–ª–∞–Ω—Å" in low:
        await update.message.reply_text(balance_with_debts_text(uid), reply_markup=MAIN_KB)
        return
    if "–∏—Å—Ç–æ—Ä–∏—è" in low:
        await send_history(update, uid, 10); return

    # Free text transactions (optional simple)
    amt = parse_amount(txt)
    if amt is not None:
        cur = detect_currency(txt)
        tx_id = add_tx(uid, "expense", amt, cur, "–ü—Ä–æ—á–µ–µ", txt)
        await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥: {fmt_amount(amt,cur)} {cur.upper()} ‚Ä¢ –ü—Ä–æ—á–µ–µ\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#{tx_id})", reply_markup=MAIN_KB)
        return

    await update.message.reply_text("–û–∫ ‚úÖ –ù–∞–ø–∏—à–∏: ¬´—Ç–∞–∫—Å–∏ 25 000¬ª –∏–ª–∏ –∑–∞–π–¥–∏ –≤ ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=MAIN_KB)

async def unknown_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç—Ä–∞—Ç—ã/–¥–æ—Ö–æ–¥.", reply_markup=MAIN_KB)

# ------- Main -------
def main():
    token = DEFAULT_BOT_TOKEN
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))
    log.info("Starting polling")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
# requirements.txt
python-telegram-bot==20.7
–Ω–æ —Ç—É—Ç –ø–æ—Ç–µ—Ä—è–Ω–æ —Ä–∞–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞ —è –Ω–µ —Ö–æ—á—É –ø–æ—Ç–µ—Ä—è—Ç—å 
Thought for 52s
–ü–æ–Ω—è–ª. –ù–∏—á–µ–≥–æ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–¥–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –¥–ª—è ¬´‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª (–∏ ¬´‚ûï –Ø –¥–æ–ª–∂–µ–Ω¬ª). –í—Å—Ç–∞–≤—å/–∑–∞–º–µ–Ω–∏ —Ä–æ–≤–Ω–æ —ç—Ç–∏ 3 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞.

–î–æ–±–∞–≤—å —Ö–µ–ª–ø–µ—Ä –ø–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ parse_amount(...)
# –¥–æ–±–∞–≤—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ parse_amount
CURRENCY_WORDS = {"usd","uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"}

def extract_counterparty_from_text(t: str) -> str:
	words = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]+", t)
	names = [w for w in words if w.lower() not in CURRENCY_WORDS]
	return " ".join(names[-2:]) if names else ""
–ó–∞–º–µ–Ω–∏ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤, —á—Ç–æ–±—ã –≤ –≤—ã–±–æ—Ä–∫–µ –±—ã–ª–∞ –¥–∞—Ç–∞ (created_ts)
def list_debts(uid: int, direction: str):
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""SELECT id, counterparty, amount, currency, note, created_ts
	             FROM debts
	             WHERE user_id=? AND status='open' AND direction=?
	             ORDER BY id DESC""", (uid, direction))
	rows = c.fetchall(); con.close(); return rows
–ò –æ–±–Ω–æ–≤–∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ —É —Ç–µ–±—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ ‚Äî –æ–±–Ω–æ–≤–∏ —Ç—É, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ ¬´üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª/¬´üìú –Ø –¥–æ–ª–∂–µ–Ω¬ª):

def debts_list_text(uid: int, direction: str) -> str:
	rows = list_debts(uid, direction)
	title = "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:" if direction == "they_owe" else "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–æ–ª–≥–æ–≤:"
	if not rows:
		return f"{title}\n‚Äî –ø—É—Å—Ç–æ ‚Äî"
	lines = [title]
	for id_, who, amount, cur, note, created_ts in rows:
		d = datetime.fromtimestamp(int(created_ts)).strftime("%d.%m.%Y")
		lines.append(f"#{id_} {who} ‚Äì {amount:.0f} {cur.upper()} ({d})")
	return "\n".join(lines)
–í–Ω—É—Ç—Ä–∏ text_router —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ:
uid = ...
txt = ...
low = ...
debts = context.user_data.get("debts") (–∏–ª–∏ —Ç—É–¥–∞, –≥–¥–µ —É —Ç–µ–±—è —á–∏—Ç–∞–µ—Ç—Å—è debts)
–≤—Å—Ç–∞–≤—å —ç—Ç–æ—Ç –±–ª–æ–∫. –û–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ¬´5000 usd Roni¬ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–ª–≥, –Ω–µ –ª–æ–º–∞—è –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É:

# –í–°–¢–ê–í–¨ –ó–î–ï–°–¨: –±—ã—Å—Ç—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ–¥–∏–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–ª–≥–æ–≤
if debts and debts.get("stage") in ("add_counterparty", "add_amount"):
	amt = parse_amount(txt)
	if amt is not None:
		cur = detect_currency(txt)
		who = debts.get("counterparty") or extract_counterparty_from_text(txt) or "‚Äî"
		debt_id = add_debt(uid, debts["direction"], who, amt, cur, txt)
		now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M") if "TIMEZONE" in globals() else datetime.now().strftime("%d.%m.%Y %H:%M")
		await update.message.reply_text(
			"‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
			f"‚Ä¢ –°—É–º–º–∞: {amt:.0f} {cur.upper()}\n"
			f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n"
			f"‚Ä¢ –î–∞—Ç–∞: {now_s}",
			reply_markup=debts_menu_kb()
		)
		debts["stage"] = "menu"
		return
	# –∏–Ω–∞—á–µ –ø—É—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ (–∏–º—è -> –ø–æ—Ç–æ–º —Å—É–º–º–∞)
–≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ:

¬´‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª ‚Üí ¬´5000 usd Roni¬ª —Ç–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
¬´üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º–∏.
–ë–∞–ª–∞–Ω—Å —É —Ç–µ–±—è —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥–∏ ‚Äî –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
–≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã —è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª –∏ —Å—Ç–∞–≤–∏–ª
Thought for 27s
–°–∫–æ–ø–∏—Ä—É–π —ç—Ç–∏ –¥–≤–∞ —Ñ–∞–π–ª–∞ —Ü–µ–ª–∏–∫–æ–º.

# main.py
import os, re, sqlite3, time, logging, csv, io
from datetime import datetime, timedelta, time as dtime
from typing import Optional, Tuple, List
from zoneinfo import ZoneInfo

import httpx
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ---------------- Config ----------------
PORT = int(os.environ.get("PORT", "8080"))
DB_PATH = os.environ.get("DB_PATH", "finance.db")
TIMEZONE = ZoneInfo(os.environ.get("TZ", "Asia/Tashkent"))
ALLOWED_USER_IDS = {int(x) for x in os.environ.get("ALLOWED_USER_IDS", "").replace(";", ",").split(",") if x.strip().isdigit()}
ADMIN_USER_ID = int(os.environ.get("ADMIN_USER_ID")) if os.environ.get("ADMIN_USER_ID", "").isdigit() else None
DEFAULT_BOT_TOKEN = os.environ.get("BOT_TOKEN", "7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc")

logging.basicConfig(format="%(asctime)s %(levelname)s %(name)s | %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

# ---------------- DB ----------------
def init_db():
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS tx(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        ttype TEXT NOT NULL CHECK(ttype IN('income','expense')),
        amount REAL NOT NULL,
        currency TEXT NOT NULL,
        category TEXT NOT NULL,
        note TEXT,
        ts INTEGER NOT NULL
    )""")
    c.execute("CREATE INDEX IF NOT EXISTS idx_tx_user_ts ON tx(user_id, ts)")
    c.execute("""CREATE TABLE IF NOT EXISTS budgets(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        category TEXT NOT NULL,
        currency TEXT NOT NULL,
        limit_amount REAL NOT NULL,
        period TEXT NOT NULL DEFAULT 'month',
        created_ts INTEGER NOT NULL
    )""")
    c.execute("CREATE UNIQUE INDEX IF NOT EXISTS uq_budget ON budgets(user_id, category, currency, period)")
    c.execute("""CREATE TABLE IF NOT EXISTS reminders(
        user_id INTEGER PRIMARY KEY,
        hour INTEGER NOT NULL,
        minute INTEGER NOT NULL,
        enabled INTEGER NOT NULL DEFAULT 1
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS recurring(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        ttype TEXT NOT NULL CHECK(ttype IN('income','expense')),
        amount REAL NOT NULL,
        currency TEXT NOT NULL,
        category TEXT NOT NULL,
        note TEXT,
        frequency TEXT NOT NULL CHECK(frequency IN('daily','weekly','monthly')),
        day_of_week INTEGER,
        day_of_month INTEGER,
        last_applied_date TEXT,
        created_ts INTEGER NOT NULL
    )""")
    c.execute("CREATE INDEX IF NOT EXISTS idx_recurring_user ON recurring(user_id)")
    c.execute("""CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        username TEXT,
        last_seen_ts INTEGER NOT NULL
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS debts(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        direction TEXT NOT NULL CHECK(direction IN('i_owe','they_owe')),
        counterparty TEXT NOT NULL,
        amount REAL NOT NULL,
        currency TEXT NOT NULL,
        note TEXT,
        status TEXT NOT NULL DEFAULT 'open' CHECK(status IN('open','closed')),
        created_ts INTEGER NOT NULL,
        updated_ts INTEGER NOT NULL
    )""")
    c.execute("CREATE INDEX IF NOT EXISTS idx_debts_user ON debts(user_id, status, direction)")
    con.commit(); con.close()
init_db()

# ---------------- Keyboards ----------------
BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìä –û—Ç—á—ë—Ç (–º–µ—Å—è—Ü)"), KeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç üìÇ")],
        [KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton("–ë—é–¥–∂–µ—Ç üí°"), KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç üí±")],
        [KeyboardButton("–î–æ–ª–≥–∏")],
        [KeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä—ã"), KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")],
        [KeyboardButton("üìÖ –ê–≤—Ç–æ–¥–∞—Ç—ã"), KeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [KeyboardButton("PDF –æ—Ç—á—ë—Ç"), KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
    ],
    resize_keyboard=True
)

def debts_menu_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton("‚ûï –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
        [KeyboardButton("üìú –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
        [KeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥"), KeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥")],
        [KeyboardButton(BACK_BTN)]
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def _rows_keyboard(labels: List[str], per_row: int = 3) -> List[List[KeyboardButton]]:
    rows, row = [], []
    for i, lbl in enumerate(labels, 1):
        row.append(KeyboardButton(lbl))
        if i % per_row == 0:
            rows.append(row); row = []
    if row:
        rows.append(row)
    return rows

def categories_kb(ttype: str) -> ReplyKeyboardMarkup:
    cats = EXPENSE_CATEGORIES if ttype == "expense" else INCOME_CATEGORIES
    rows = _rows_keyboard(cats, per_row=3)
    rows.append([KeyboardButton(BACK_BTN)])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def amount_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)

# ---------------- Categories ----------------
EXPENSE_CATEGORIES = ["–ï–¥–∞","–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç","–ó–¥–æ—Ä–æ–≤—å–µ","–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è","–î–æ–º","–î–µ—Ç—Å–∫–æ–µ","–°–ø–æ—Ä—Ç","–ü—Ä–æ—á–µ–µ"]
INCOME_CATEGORIES  = ["–ó–∞—Ä–ø–ª–∞—Ç–∞","–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞","–ü–æ–¥–∞—Ä–æ–∫","–ü—Ä–µ–º–∏—è","–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏","–ü—Ä–æ—á–µ–µ"]
CATEGORY_KEYWORDS = {
    "–ï–¥–∞": ["–µ–¥–∞","–ø—Ä–æ–¥—É–∫—Ç","–æ–±–µ–¥","—É–∂–∏–Ω","–∑–∞–≤—Ç—Ä–∞–∫","–∫–∞—Ñ–µ","—Ä–µ—Å—Ç–æ—Ä–∞–Ω","—Å–∞–º—Å–∞","–ø–ª–æ–≤","—à–∞—É—Ä–º–∞","–ø–∏—Ü—Ü–∞"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏","—Ç–æ–ø–ª–∏–≤–æ","–±–µ–Ω–∑–∏–Ω","–≥–∞–∑","–º–µ—Ç—Ä–æ","–∞–≤—Ç–æ–±—É—Å","–∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ","–∞—Ä–µ–Ω–¥–∞ –º–∞—à–∏–Ω—ã"],
    "–ó–∞—Ä–ø–ª–∞—Ç–∞": ["–∑–∞—Ä–ø–ª–∞—Ç–∞","–æ–∫–ª–∞–¥"],
    "–ü—Ä–µ–º–∏—è": ["–ø—Ä–µ–º–∏—è","–±–æ–Ω—É—Å","–∞–≤–∞–Ω—Å"],
    "–ó–¥–æ—Ä–æ–≤—å–µ": ["–∞–ø—Ç–µ–∫–∞","–≤—Ä–∞—á","—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥","–ª–µ–∫–∞—Ä","–≤–∏—Ç–∞–º–∏–Ω"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ","–∏–≥—Ä–∞","cs2","steam","–ø–æ–¥–ø–∏—Å–∫–∞","spotify","netflix"],
    "–î–æ–º": ["–∞—Ä–µ–Ω–¥–∞","–∫–≤–∞—Ä—Ç–∏—Ä–∞","–∫–æ–º–º—É–Ω–∞–ª","—ç–ª–µ–∫—Ç—Ä","–∏–Ω—Ç–µ—Ä–Ω–µ—Ç","—Ä–µ–º–æ–Ω—Ç"],
    "–î–µ—Ç—Å–∫–æ–µ": ["–ø–∞–º–ø–µ—Ä—Å","–ø–æ–¥–≥—É–∑","–∫–æ–ª—è—Å–∫–∞","–∏–≥—Ä—É—à","–¥–µ—Ç—Å–∫","–¥–æ—á–∫–∞","—Ö–∞–¥–∏–¥–∂–∞"],
    "–°–ø–æ—Ä—Ç": ["–∑–∞–ª","—Å–ø–æ—Ä—Ç","–∫—Ä–µ–∞—Ç–∏–Ω","–ø—Ä–æ—Ç–µ–∏–Ω","–≥–µ–π–Ω–µ—Ä","–∞–±–æ–Ω–µ–º–µ–Ω—Ç"],
    "–ü–æ–¥–∞—Ä–æ–∫": ["–ø–æ–¥–∞—Ä–æ–∫","–¥–∞—Ä–∏–ª","–¥–∞—Ä–µ–Ω–∏–µ"],
    "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞": ["–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞","—Ñ—Ä–∏–ª–∞–Ω—Å","—Ö–∞–ª—Ç—É—Ä–∞"],
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–∞–∫—Ü–∏–∏","–∏–Ω–≤–µ—Å—Ç","–≤–∫–ª–∞–¥"],
    "–ü—Ä–æ—á–µ–µ": []
}

# ---------------- Helpers ----------------
def is_authorized(user_id: int) -> bool:
    if not ALLOWED_USER_IDS:
        return True
    return user_id in ALLOWED_USER_IDS

def upsert_seen_user(uid: int, first_name: str, username: Optional[str]):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    now = int(time.time())
    c.execute("""INSERT INTO users(user_id, first_name, username, last_seen_ts)
                 VALUES(?,?,?,?)
                 ON CONFLICT(user_id) DO UPDATE SET
                   first_name=excluded.first_name,
                   username=excluded.username,
                   last_seen_ts=excluded.last_seen_ts
              """, (uid, first_name, username, now))
    con.commit(); con.close()

def detect_currency(t: str) -> str:
    tl = t.lower()
    if "$" in tl:
        return "usd"
    words = set(re.findall(r"[a-z–∞-—è—ë]+", tl))
    if {"usd","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"} & words:
        return "usd"
    if {"uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤"} & words:
        return "uzs"
    return "uzs"

def parse_amount(t: str) -> Optional[float]:
    s = t.replace("\u00A0", " ")
    m = re.findall(r"(?:(?<=\s)|^|(?<=[^\w]))(\d{1,3}(?:[ \u00A0\.,]\d{3})+|\d+)(?:[.,](\d{1,2}))?", s)
    if not m:
        return None
    raw, frac = m[-1]
    num = re.sub(r"[ \u00A0\.,]", "", raw)
    try:
        return float(f"{num}.{frac}") if frac else float(num)
    except ValueError:
        return None

CURRENCY_WORDS = {"usd","uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"}
def extract_counterparty_from_text(t: str) -> str:
    words = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]+", t)
    names = [w for w in words if w.lower() not in CURRENCY_WORDS]
    return " ".join(names[-2:]) if names else ""

def fmt_amount(amount: float, cur: str) -> str:
    if cur == "uzs":
        return f"{int(round(amount)):,}".replace(",", " ")
    return f"{amount:.2f}"

# ---------------- TX ----------------
def ai_classify_finance(t: str):
    ttype = "expense"
    lt = t.lower()
    if any(w in lt for w in ["–∑–∞—Ä–ø–ª–∞—Ç–∞","–ø—Ä–µ–º–∏—è","–±–æ–Ω—É—Å","–ø–æ–ª—É—á–∏–ª","–ø—Ä–∏—à–ª–æ","–¥–æ—Ö–æ–¥"]):
        ttype = "income"
    amount = parse_amount(t)
    cur = detect_currency(t)
    cat = "–ü—Ä–æ—á–µ–µ"
    for c, kws in CATEGORY_KEYWORDS.items():
        if any(k in lt for k in kws):
            cat = c; break
    if ttype == "income" and cat == "–ü—Ä–æ—á–µ–µ":
        if any(x in lt for x in ["–∑–∞—Ä–ø–ª–∞—Ç"]): cat = "–ó–∞—Ä–ø–ª–∞—Ç–∞"
        elif any(x in lt for x in ["–ø—Ä–µ–º","–±–æ–Ω—É—Å"]): cat = "–ü—Ä–µ–º–∏—è"
        elif any(x in lt for x in ["–ø–æ–¥–∞—Ä"]): cat = "–ü–æ–¥–∞—Ä–æ–∫"
        elif any(x in lt for x in ["–ø–æ–¥—Ä–∞–±–æ—Ç","—Ñ—Ä–∏–ª–∞–Ω—Å","—Ö–∞–ª—Ç—É—Ä"]): cat = "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞"
    return ttype, amount, cur, cat

def add_tx(uid: int, ttype: str, amount: float, cur: str, cat: str, note: str) -> int:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("INSERT INTO tx(user_id,ttype,amount,currency,category,note,ts) VALUES(?,?,?,?,?,?,?)",
              (uid, ttype, amount, cur, cat, note, int(time.time())))
    tx_id = c.lastrowid
    con.commit(); con.close()
    return tx_id

def last_txs(uid: int, limit: int = 10):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, ttype, amount, currency, category, note, ts
                 FROM tx WHERE user_id=? ORDER BY ts DESC LIMIT ?""", (uid, limit))
    rows = c.fetchall(); con.close(); return rows

def get_balance(uid: int) -> Tuple[float,float]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    def s(t, cur):
        c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype=? AND currency=?",
                  (uid, t, cur))
        return c.fetchone()[0] or 0.0
    bal_uzs = s("income", "uzs") - s("expense", "uzs")
    bal_usd = s("income", "usd") - s("expense", "usd")
    con.close()
    return bal_uzs, bal_usd

def month_bounds_now():
    now = datetime.now(TIMEZONE)
    start = datetime(now.year, now.month, 1, 0, 0, 0, tzinfo=TIMEZONE)
    return int(start.timestamp()), int(now.timestamp())

def period_bounds(keyword: str) -> Tuple[int,int,str]:
    now = datetime.now(TIMEZONE)
    key = keyword.lower()
    if "—Å–µ–≥–æ–¥–Ω—è" in key:
        start = datetime(now.year, now.month, now.day, 0, 0, 0, tzinfo=TIMEZONE)
        return int(start.timestamp()), int(now.timestamp()), "—Å–µ–≥–æ–¥–Ω—è"
    if "–≤—á–µ—Ä–∞" in key:
        y = now - timedelta(days=1)
        start = datetime(y.year, y.month, y.day, 0, 0, 0, tzinfo=TIMEZONE)
        end = datetime(y.year, y.month, y.day, 23, 59, 59, tzinfo=TIMEZONE)
        return int(start.timestamp()), int(end.timestamp()), "–≤—á–µ—Ä–∞"
    week_start = now - timedelta(days=(now.weekday()))
    start = datetime(week_start.year, week_start.month, week_start.day, 0, 0, 0, tzinfo=TIMEZONE)
    return int(start.timestamp()), int(now.timestamp()), "–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"

async def month_report_text(uid: int) -> str:
    start_ts, end_ts = month_bounds_now()
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT ttype, currency, COALESCE(SUM(amount),0)
                 FROM tx WHERE user_id=? AND ts BETWEEN ? AND ?
                 GROUP BY ttype, currency""", (uid, start_ts, end_ts))
    sums = {(tt, cur): total for tt, cur, total in c.fetchall()}
    c.execute("""SELECT category, currency, COALESCE(SUM(amount),0) AS s
                 FROM tx WHERE user_id=? AND ts BETWEEN ? AND ? AND ttype='expense'
                 GROUP BY category, currency ORDER BY s DESC LIMIT 5""", (uid, start_ts, end_ts))
    top = c.fetchall()
    con.close()
    inc_uzs = sums.get(("income","uzs"), 0.0)
    inc_usd = sums.get(("income","usd"), 0.0)
    exp_uzs = sums.get(("expense","uzs"), 0.0)
    exp_usd = sums.get(("expense","usd"), 0.0)
    bal_uzs = inc_uzs - exp_uzs
    bal_usd = inc_usd - exp_usd
    lines = [
        "–û—Ç—á—ë—Ç (–º–µ—Å—è—Ü):",
        f"‚Ä¢ –î–æ—Ö–æ–¥ UZS: {fmt_amount(inc_uzs,'uzs')} | USD: {fmt_amount(inc_usd,'usd')}",
        f"‚Ä¢ –†–∞—Å—Ö–æ–¥ UZS: {fmt_amount(exp_uzs,'uzs')} | USD: {fmt_amount(exp_usd,'usd')}",
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å UZS: {fmt_amount(bal_—É–∑s,'uzs')} | USD: {fmt_amount(bal_usd,'usd')}",
    ]
    if top:
        lines.append("–¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:")
        for cat, cur, s in top:
            lines.append(f"  - {cat}: {fmt_amount(s, cur)} {cur.upper()}")
    return "\n".join(lines)

def undo_last(uid: int) -> Optional[Tuple]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT id, ttype, amount, currency, category, note FROM tx WHERE user_id=? ORDER BY id DESC LIMIT 1", (uid,))
    row = c.fetchone()
    if not row:
        con.close(); return None
    tx_id, ttype, amount, currency, category, note = row
    c.execute("DELETE FROM tx WHERE id=?", (tx_id,))
    con.commit(); con.close()
    return row

# ---------------- Budgets ----------------
def set_budget(uid: int, category: str, currency: str, limit_amount: float):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    now = int(time.time())
    c.execute("""INSERT INTO budgets(user_id, category, currency, limit_amount, period, created_ts)
                 VALUES(?,?,?,?, 'month', ?)
                 ON CONFLICT(user_id, category, currency, period) DO UPDATE SET
                   limit_amount=excluded.limit_amount
              """, (uid, category, currency, limit_amount, now))
    con.commit(); con.close()

def get_budgets(uid: int) -> List[Tuple[str, str, float]]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT category, currency, limit_amount FROM budgets WHERE user_id=? AND period='month' ORDER BY category", (uid,))
    rows = c.fetchall(); con.close(); return rows

def month_expense_sum(uid: int, category: str, currency: str) -> float:
    start_ts, end_ts = month_bounds_now()
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT COALESCE(SUM(amount),0) FROM tx
                 WHERE user_id=? AND ttype='expense' AND category=? AND currency=? AND ts BETWEEN ? AND ?""",
              (uid, category, currency, start_ts, end_ts))
    s = c.fetchone()[0] or 0.0
    con.close(); return s

async def maybe_warn_budget(update: Update, uid: int, category: str, currency: str):
    limit = None
    for cat, cur, lim in get_budgets(uid):
        if cat == category and cur == currency:
            limit = lim; break
    if limit is None:
        return
    spent = month_expense_sum(uid, category, currency)
    if spent >= limit:
        over = spent - limit
        await update.message.reply_text(
            f"–í–Ω–∏–º–∞–Ω–∏–µ: –±—é–¥–∂–µ—Ç –ø–æ ¬´{category}¬ª –ø—Ä–µ–≤—ã—à–µ–Ω.\n"
            f"–õ–∏–º–∏—Ç: {fmt_amount(limit,currency)} {currency.upper()}, –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {fmt_amount(spent,currency)} ({fmt_amount(over,currency)} —Å–≤–µ—Ä—Ö).",
            reply_markup=MAIN_KB
        )

# ---------------- Recurring / Reminders ----------------
DOW_MAP = {"–ø–Ω":0,"–ø–æ–Ω":0,"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–≤—Ç":1,"–≤—Ç–æ—Ä–Ω–∏–∫":1,"—Å—Ä":2,"—Å—Ä–µ–¥–∞":2,"—á—Ç":3,"—á–µ—Ç":3,"—á–µ—Ç–≤–µ—Ä–≥":3,"–ø—Ç":4,"–ø—è—Ç–Ω–∏—Ü–∞":4,"–ø—Ç–Ω":4,"—Å–±":5,"—Å—É–±–±–æ—Ç–∞":5,"–≤—Å":6,"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6}

def add_recurring(uid: int, ttype: str, amount: float, currency: str, category: str, note: str, frequency: str, day_of_week: Optional[int], day_of_month: Optional[int]):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""INSERT INTO recurring(user_id, ttype, amount, currency, category, note, frequency, day_of_week, day_of_month, last_applied_date, created_ts)
                 VALUES(?,?,?,?,?,?,?,?,?,?,?)""",
              (uid, ttype, amount, currency, category, note, frequency, day_of_week, day_of_month, None, int(time.time())))
    con.commit(); con.close()

def list_recurring(uid: int) -> List[Tuple]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, ttype, amount, currency, category, note, frequency, day_of_week, day_of_month
                 FROM recurring WHERE user_id=? ORDER BY id DESC""", (uid,))
    rows = c.fetchall(); con.close(); return rows

def mark_recurring_applied(rec_id: int, date_str: str):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("UPDATE recurring SET last_applied_date=? WHERE id=?", (date_str, rec_id))
    con.commit(); con.close()

async def process_recurring_all(app: Application):
    today = datetime.now(TIMEZONE).date()
    date_str = today.isoformat()
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, user_id, ttype, amount, currency, category, note, frequency, day_of_week, day_of_month, last_applied_date FROM recurring""")
    rows = c.fetchall(); con.close()
    for rec in rows:
        rec_id, uid, ttype, amount, currency, category, note, freq, dow, dom, last_date = rec
        if last_date == date_str:
            continue
        do = (freq == "daily") or (freq == "weekly" and dow is not None and today.weekday() == int(dow)) or (freq == "monthly" and dom is not None and today.day == int(dom))
        if do:
            add_tx(uid, ttype, amount, currency, category, note or f"Recurring {freq}")
            mark_recurring_applied(rec_id, date_str)
            try:
                await app.bot.send_message(chat_id=uid, text=f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {category} {fmt_amount(amount, currency)} {currency.upper()} ({'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'})")
            except Exception as e:
                log.warning(f"notify recurring failed for {uid}: {e}")

def schedule_daily_jobs(app: Application):
    if not getattr(app, "job_queue", None):
        log.warning("JobQueue is not available; skipping scheduled jobs")
        return
    app.job_queue.run_daily(lambda ctx: ctx.application.create_task(process_recurring_all(ctx.application)),
                            dtime(hour=9, minute=0, tzinfo=TIMEZONE), name="recurring-processor")

def schedule_reminder_for_user(app: Application, uid: int, hour: int, minute: int):
    if not getattr(app, "job_queue", None):
        return
    job_name = f"reminder-{uid}"
    for job in app.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()
    def _cb(context: ContextTypes.DEFAULT_TYPE):
        context.application.create_task(context.bot.send_message(chat_id=uid, text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è?"))
    app.job_queue.run_daily(_cb, dtime(hour=hour, minute=minute, tzinfo=TIMEZONE), name=job_name)

def load_and_schedule_all_reminders(app: Application):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT user_id, hour, minute, enabled FROM reminders WHERE enabled=1")
    for uid, h, m, en in c.fetchall():
        schedule_reminder_for_user(app, uid, h, m)
    con.close()

# ---------------- Debts ----------------
def add_debt(uid: int, direction: str, counterparty: str, amount: float, currency: str, note: str) -> int:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""INSERT INTO debts(user_id, direction, counterparty, amount, currency, note, status, created_ts, updated_ts)
                 VALUES(?,?,?,?,?,?, 'open', ?, ?)""", (uid, direction, counterparty, amount, currency, note, now, now))
    debt_id = c.lastrowid
    con.commit(); con.close()
    return debt_id

def list_debts(uid: int, direction: str):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, counterparty, amount, currency, note, created_ts
                 FROM debts
                 WHERE user_id=? AND status='open' AND direction=?
                 ORDER BY id DESC""", (uid, direction))
    rows = c.fetchall(); con.close(); return rows

def close_debt(uid: int, debt_id: int) -> bool:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("UPDATE debts SET status='closed', updated_ts=? WHERE id=? AND user_id=? AND status='open'", (now, debt_id, uid))
    ok = c.rowcount > 0
    con.commit(); con.close()
    return ok

def reduce_debt(uid: int, debt_id: int, delta: float) -> Optional[Tuple[float,str,str]]:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT amount, currency FROM debts WHERE id=? AND user_id=? AND status='open'", (debt_id, uid))
    row = c.fetchone()
    if not row:
        con.close(); return None
    amount, currency = row
    new_amount = max(0.0, amount - abs(delta))
    if new_amount <= 0.0:
        c.execute("UPDATE debts SET amount=0, status='closed', updated_ts=? WHERE id=?", (now, debt_id))
        status = "closed"
    else:
        c.execute("UPDATE debts SET amount=?, updated_ts=? WHERE id=?", (new_amount, now, debt_id))
        status = "open"
    con.commit(); con.close()
    return new_amount, currency, status

def debt_totals(uid: int) -> Tuple[float,float,float,float]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    def s(direction: str, cur: str):
        c.execute("""SELECT COALESCE(SUM(amount),0)
                     FROM debts WHERE user_id=? AND status='open' AND direction=? AND currency=?""",
                  (uid, direction, cur))
        return c.fetchone()[0] or 0.0
    iowe_uzs = s("i_owe","uzs"); iowe_usd = s("i_owe","usd")
    they_uzs = s("they_owe","uzs"); they_usd = s("they_owe","usd")
    con.close()
    return iowe_uzs, iowe_usd, they_uzs, they_usd

def debts_list_text(uid: int, direction: str) -> str:
    rows = list_debts(uid, direction)
    title = "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:" if direction == "they_owe" else "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–æ–ª–≥–æ–≤:"
    if not rows:
        return f"{title}\n‚Äî –ø—É—Å—Ç–æ ‚Äî"
    lines = [title]
    for id_, who, amount, cur, note, created_ts in rows:
        d = datetime.fromtimestamp(created_ts, tz=TIMEZONE).strftime("%d.%m.%Y")
        lines.append(f"#{id_} {who} ‚Äì {fmt_amount(amount,cur)} {cur.upper()} ({d})")
    return "\n".join(lines)

def balance_with_debts_text(uid: int) -> str:
    uzs, usd = get_balance(uid)
    iowe_uzs, iowe_usd, they_uzs, they_usd = debt_totals(uid)
    net_uzs = uzs - iowe_uzs + they_uzs
    net_usd = usd - iowe_usd + they_usd
    lines = [
        f"–ë–∞–ª–∞–Ω—Å –±–µ–∑ –¥–æ–ª–≥–æ–≤: {fmt_amount(uzs,'uzs')} UZS | {fmt_amount(usd,'usd')} USD",
        f"–Ø –¥–æ–ª–∂–µ–Ω: {fmt_amount(iowe_uzs,'uzs')} UZS | {fmt_amount(iowe_usd,'usd')} USD",
        f"–ú–Ω–µ –¥–æ–ª–∂–Ω—ã: {fmt_amount(they_uzs,'uzs')} UZS | {fmt_amount(they_usd,'usd')} USD",
        f"–ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: {fmt_amount(net_uzs,'uzs')} UZS | {fmt_amount(net_usd,'usd')} USD",
    ]
    return "\n".join(lines)

# ---------------- AI Tip + Pin Summary ----------------
def week_bounds_now() -> Tuple[int,int]:
    now = datetime.now(TIMEZONE)
    week_start = now - timedelta(days=now.weekday())
    start = datetime(week_start.year, week_start.month, week_start.day, 0, 0, 0, tzinfo=TIMEZONE)
    return int(start.timestamp()), int(now.timestamp())

def sum_expenses_in_range(uid: int, category: str, currency: str, start_ts: int, end_ts: int) -> float:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT COALESCE(SUM(amount),0) FROM tx
                 WHERE user_id=? AND ttype='expense' AND category=? AND currency=? AND ts BETWEEN ? AND ?""",
              (uid, category, currency, start_ts, end_ts))
    s = c.fetchone()[0] or 0.0
    con.close(); return s

def ai_hint_after_tx(uid: int, ttype: str, cur: str, cat: str) -> str:
    if ttype == "expense":
        try:
            limit = None
            for bcat, bcur, blim in get_budgets(uid):
                if bcat == cat and bcur == cur:
                    limit = blim; break
            if limit and limit > 0:
                spent = month_expense_sum(uid, cat, cur)
                ratio = spent / limit if limit else 0
                if ratio >= 0.9:
                    perc = int(round(ratio * 100))
                    return f"–ù–∞ ¬´{cat}¬ª —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {perc}% –±—é–¥–∂–µ—Ç–∞."
        except Exception:
            pass
    try:
        now_start, now_end = week_bounds_now()
        prev_end = now_start - 1
        prev_start = prev_end - 7*24*3600 + 1
        now_sum = sum_expenses_in_range(uid, cat, cur, now_start, now_end)
        prev_sum = sum_expenses_in_range(uid, cat, cur, prev_start, prev_end)
        if prev_sum > 0 and now_sum >= prev_sum * 1.4:
            inc = int(round((now_sum/prev_sum - 1) * 100))
            return f"–¢—Ä–∞—Ç—ã –Ω–∞ ¬´{cat}¬ª –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {inc}% –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ."
    except Exception:
        pass
    return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ —É—á—ë—Ç ‚Äî –≤—ã –º–æ–ª–æ–¥–µ—Ü!"

def balance_summary_text(uid: int, ai_tip: str) -> str:
    uzs, usd = get_balance(uid)
    iowe_uzs, iowe_usd, they_uzs, they_usd = debt_totals(uid)
    net_uzs = uzs - iowe_—É–∑s + they_—É–∑s
    net_usd = usd - iowe_us–¥ + they_us–¥
    now = datetime.now(TIMEZONE).strftime("%d.%m, %H:%M")
    lines = [
        f"üìå –ò—Ç–æ–≥ –Ω–∞ {now}",
        f"–ë–∞–ª–∞–Ω—Å: {fmt_amount(uzs,'uzs')} UZS | {fmt_amount(usd,'usd')} USD",
        f"–Ø –¥–æ–ª–∂–µ–Ω: {fmt_amount(iowe_uzs,'uzs')} UZS | {fmt_amount(iowe_usd,'usd')} USD",
        f"–ú–Ω–µ –¥–æ–ª–∂–Ω—ã: {fmt_amount(they_—É–∑s,'uzs')} UZS | {fmt_amount(they_usd,'usd')} USD",
        f"–ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: {fmt_amount(net_—É–∑s,'uzs')} UZS | {fmt_amount(net_usd,'usd')} USD",
        f"\nAI: {ai_tip}",
    ]
    return "\n".join(lines)

async def send_and_pin_summary(update: Update, context: ContextTypes.DEFAULT_TYPE, uid: int, ai_tip: str):
    text = balance_summary_text(uid, ai_tip)
    chat_id = update.effective_chat.id
    sent = await context.bot.send_message(chat_id=chat_id, text=text)
    if update.effective_chat.type in ("group", "supergroup"):
        try:
            await context.bot.unpin_all_chat_messages(chat_id=chat_id)
        except Exception as e:
            log.warning(f"Unpin failed: {e}")
        try:
            await context.bot.pin_chat_message(chat_id=chat_id, message_id=sent.message_id, disable_notification=True)
        except Exception as e:
            log.warning(f"Pin failed: {e}")

# ---------------- Export / Analytics / PDF ----------------
def export_month(uid: int) -> Tuple[io.BytesIO, str, io.BytesIO, str]:
    start_ts, end_ts = month_bounds_now()
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, ts, ttype, amount, currency, category, note
                 FROM tx WHERE user_id=? AND ts BETWEEN ? AND ? ORDER BY ts ASC""",
              (uid, start_ts, end_ts))
    rows = c.fetchall(); con.close()
    year_month = datetime.now(TIMEZONE).strftime("%Y_%m")
    csv_buf = io.StringIO()
    writer = csv.writer(csv_buf)
    writer.writerow(["id","datetime","type","amount","currency","category","note"])
    for id_, ts, ttype, amount, cur, cat, note in rows:
        writer.writerow([id_, datetime.fromtimestamp(ts, tz=TIMEZONE).isoformat(sep=" "), ttype, f"{amount:.2f}", cur, cat, note or ""])
    csv_bytes = io.BytesIO(csv_buf.getvalue().encode("utf-8"))
    csv_name = f"transactions_{year_month}.csv"
    try:
        from openpyxl import Workbook
        wb = Workbook(); ws = wb.active; ws.title = "Transactions"
        ws.append(["id","datetime","type","amount","currency","category","note"])
        for id_, ts, ttype, amount, cur, cat, note in rows:
            ws.append([id_, datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%Y-%m-%d %H:%M:%S"), amount, cur, ttype, cat, note or ""])
        xl_bytes = io.BytesIO(); wb.save(xl_bytes); xl_bytes.seek(0)
        xl_name = f"transactions_{year_month}.xlsx"
    except Exception:
        xl_bytes = io.BytesIO(b""); xl_name = ""
    return csv_bytes, csv_name, xl_bytes, xl_name

async def fetch_usd_uzs_rate() -> Optional[float]:
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.get("https://api.exchangerate.host/latest?base=USD&symbols=UZS")
            data = r.json()
            return float(data["rates"]["UZS"])
    except Exception as e:
        log.warning(f"rate fetch failed: {e}")
        return None

def sparkline(values: List[float]) -> str:
    if not values:
        return ""
    min_v, max_v = min(values), max(values)
    blocks = "‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà"
    if max_v == min_v:
        return blocks[0] * len(values)
    res = []
    for v in values:
        idx = int((v - min_v) / (max_v - min_v) * (len(blocks) - 1))
        res.append(blocks[idx])
    return "".join(res)

def day_bucket(ts: int) -> str:
    return datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%Y-%m-%d")

def week_bucket(ts: int) -> str:
    dt = datetime.fromtimestamp(ts, tz=TIMEZONE)
    year, week, _ = dt.isocalendar()
    return f"{year}-W{week:02d}"

async def analytics_text(uid: int) -> str:
    now = datetime.now(TIMEZONE)
    start_14 = now - timedelta(days=13)
    start_14_ts = int(datetime(start_14.year, start_14.month, start_14.day, 0, 0, 0, tzinfo=TIMEZONE).timestamp())
    start_8w = now - timedelta(weeks=7)
    start_8w_ts = int(datetime(start_8w.year, start_8w.month, start_8w.day, 0, 0, 0, tzinfo=TIMEZONE).timestamp())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT ts, ttype, amount, currency FROM tx WHERE user_id=? AND ts>=?""", (uid, start_14_ts))
    rows14 = c.fetchall()
    c.execute("""SELECT ts, ttype, amount, currency FROM tx WHERE user_id=? AND ts>=?""", (uid, start_8w_ts))
    rows8w = c.fetchall()
    con.close()

    def series(rows, kind, cur, bucket_fn):
        buckets = {}
        for ts, ttype, amount, currency in rows:
            if ttype != kind or currency != cur:
                continue
            b = bucket_fn(ts)
            buckets[b] = buckets.get(b, 0) + amount
        return buckets

    days = [(now - timedelta(days=i)).strftime("%Y-%m-%d") for i in reversed(range(14))]
    exp_uzs_d = [series(rows14, "expense", "uzs", day_bucket).get(d, 0.0) for d in days]
    inc_uzs_d = [series(rows14, "income", "uzs", day_bucket).get(d, 0.0) for d in days]
    exp_usd_d = [series(rows14, "expense", "usd", day_bucket).get(d, 0.0) for d in days]
    inc_usd_d = [series(rows14, "income", "usd", day_bucket).get(d, 0.0) for d in days]

    weeks = []
    tmp = now
    seen = set()
    while len(weeks) < 8:
        b = week_bucket(int(tmp.timestamp()))
        if b not in seen:
            weeks.insert(0, b)
            seen.add(b)
        tmp -= timedelta(days=1)

    exp_uzs_w = [series(rows8w, "expense", "uzs", week_bucket).get(w, 0.0) for w in weeks]
    inc_uzs_w = [series(rows8w, "income", "uzs", week_bucket).get(w, 0.0) for w in weeks]
    exp_usd_w = [series(rows8w, "expense", "usd", week_bucket).get(w, 0.0) for w in weeks]
    inc_usd_w = [series(rows8w, "income", "usd", week_bucket).get(w, 0.0) for w in weeks]

    lines = [
        "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "14 –¥–Ω–µ–π (UZS):",
        f"–†–∞—Å—Ö–æ–¥: {sparkline(exp_—É–∑s_d:=exp_uzs_d)}",
        f"–î–æ—Ö–æ–¥:  {sparkline(inc_—É–∑s_d:=inc_uzs_d)}",
        "14 –¥–Ω–µ–π (USD):",
        f"–†–∞—Å—Ö–æ–¥: {sparkline(exp_usd_d)}",
        f"–î–æ—Ö–æ–¥:  {sparkline(inc_usd_d)}",
        "8 –Ω–µ–¥–µ–ª—å (UZS):",
        f"–†–∞—Å—Ö–æ–¥: {sparkline(exp_uzs_w)}",
        f"–î–æ—Ö–æ–¥:  {sparkline(inc_uzs_w)}",
        "8 –Ω–µ–¥–µ–ª—å (USD):",
        f"–†–∞—Å—Ö–æ–¥: {sparkline(exp_usd_w)}",
        f"–î–æ—Ö–æ–¥:  {sparkline(inc_usd_w)}",
    ]
    return "\n".join(lines)

async def pdf_report_month(uid: int) -> Optional[Tuple[io.BytesIO, str]]:
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        font_path = "/tmp/DejaVuSans.ttf"
        if not os.path.exists(font_path):
            async with httpx.AsyncClient(timeout=15) as client:
                r = await client.get("https://github.com/dejavu-fonts/dejavu-fonts/raw/version_2_37/ttf/DejaVuSans.ttf")
                r.raise_for_status()
                with open(font_path, "wb") as f:
                    f.write(r.content)
        pdfmetrics.registerFont(TTFont("DejaVuSans", font_path))
        start_ts, end_ts = month_bounds_now()
        con = sqlite3.connect(DB_PATH); c = con.cursor()
        c.execute("""SELECT ttype, currency, COALESCE(SUM(amount),0)
                     FROM tx WHERE user_id=? AND ts BETWEEN ? AND ? GROUP BY ttype, currency""",
                  (uid, start_ts, end_ts))
        sums = {(t,c2): s for t,c2,s in c.fetchall()}
        c.execute("""SELECT id, ts, ttype, amount, currency, category, note
                     FROM tx WHERE user_id=? AND ts BETWEEN ? AND ? ORDER BY ts ASC""",
                  (uid, start_ts, end_ts))
        rows = c.fetchall(); con.close()
        inc_uzs = sums.get(("income","uzs"),0.0); inc_usd = sums.get(("income","usd"),0.0)
        exp_uzs = sums.get(("expense","uzs"),0.0); exp_usd = sums.get(("expense","usd"),0.0)
        buf = io.BytesIO()
        cnv = canvas.Canvas(buf, pagesize=A4)
        cnv.setFont("DejaVuSans", 12)
        w, h = A4
        y = h - 40
        cnv.drawString(40, y, "–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü"); y -= 20
        cnv.drawString(40, y, f"–î–æ—Ö–æ–¥: UZS {fmt_amount(inc_uzs,'uzs')} | USD {fmt_amount(inc_usd,'usd')}"); y -= 18
        cnv.drawString(40, y, f"–†–∞—Å—Ö–æ–¥: UZS {fmt_amount(exp_uzs,'uzs')} | USD {fmt_amount(exp_usd,'usd')}"); y -= 18
        cnv.drawString(40, y, f"–ë–∞–ª–∞–Ω—Å: UZS {fmt_amount(inc_uzs-exp_uzs,'uzs')} | USD {fmt_amount(inc_usd-exp_usd,'usd')}"); y -= 28
        cnv.drawString(40, y, "–û–ø–µ—Ä–∞—Ü–∏–∏:"); y -= 18
        cnv.setFont("DejaVuSans", 10)
        for id_, ts, ttype, amount, cur, cat, note in rows:
            line = f"#{id_} {datetime.fromtimestamp(ts, tz=TIMEZONE).strftime('%d.%m %H:%M')} ‚Ä¢ {'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'} ‚Ä¢ {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or ''}"
            cnv.drawString(40, y, line[:110])
            y -= 14
            if y < 60:
                cnv.showPage()
                cnv.setFont("DejaVuSans", 10)
                y = h - 40
        cnv.save()
        buf.seek(0)
        name = f"report_{datetime.now(TIMEZONE).strftime('%Y_%m')}.pdf"
        return buf, name
    except Exception as e:
        log.warning(f"pdf failed: {e}")
        return None

def parse_edit_command(txt: str) -> Optional[Tuple[int, Optional[float], Optional[str]]]:
    m_id = re.search(r"\b(id|#)\s*=?\s*(\d+)", txt, re.IGNORECASE)
    if not m_id:
        return None
    tx_id = int(m_id.group(2))
    new_amount = None
    new_category = None
    m_amt = re.search(r"(amount|—Å—É–º–º–∞)\s*=?\s*([\d \u00A0\.,]+)", txt, re.IGNORECASE)
    if m_amt:
        new_amount = parse_amount(m_amt.group(0))
    m_cat = re.search(r"(category|–∫–∞—Ç–µ–≥–æ—Ä(–∏—è|–∏—é|–∏–∏))\s*=?\s*([A-Za-z–ê-–Ø–∞-—è–Å—ë]+)", txt, re.IGNORECASE)
    if m_cat:
        new_category = m_cat.group(4).capitalize()
    return (tx_id, new_amount, new_category)

def update_tx(uid: int, tx_id: int, new_amount: Optional[float], new_category: Optional[str]) -> bool:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT id FROM tx WHERE id=? AND user_id=?", (tx_id, uid))
    if not c.fetchone():
        con.close(); return False
    if new_amount is not None and new_category is not None:
        c.execute("UPDATE tx SET amount=?, category=? WHERE id=?", (new_amount, new_category, tx_id))
    elif new_amount is not None:
        c.execute("UPDATE tx SET amount=? WHERE id=?", (new_amount, tx_id))
    elif new_category is not None:
        c.execute("UPDATE tx SET category=? WHERE id=?", (new_category, tx_id))
    else:
        con.close(); return False
    con.commit(); con.close(); return True

# ---------------- UI helpers ----------------
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    upsert_seen_user(update.effective_user.id, update.effective_user.first_name or "", update.effective_user.username)
    await update.message.reply_text("Razzakov‚Äôs Finance ü§ñ\n–ü–∏—à–∏: ¬´—Å–∞–º—Å–∞ 18 000 —Å—É–º¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.", reply_markup=MAIN_KB)

def tx_line(ttype: str, amount: float, cur: str, cat: str, note: Optional[str], ts: int) -> str:
    dt = datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%d.%m %H:%M")
    sign = "‚ûï" if ttype == "income" else "‚ûñ"
    return f"{dt} {sign} {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or '-'}"

def users_summary_text() -> str:
    if not ALLOWED_USER_IDS:
        return "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –†–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."
    lines = ["–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID):"]
    for uid in sorted(ALLOWED_USER_IDS):
        lines.append(f"‚Ä¢ {uid}")
    return "\n".join(lines)

async def send_history(update: Update, uid: int, limit: int = 10):
    rows = last_txs(uid, limit)
    if not rows:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB); return
    lines = [f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ({len(rows)}):"]
    for id_, ttype, amount, cur, cat, note, ts in rows:
        lines.append(f"#{id_} " + tx_line(ttype, amount, cur, cat, note, ts))
    await update.message.reply_text("\n".join(lines), reply_markup=MAIN_KB)

# ---------------- Handlers ----------------
async def handle_budgets(update: Update, uid: int, txt: str):
    m = re.search(r"–±—é–¥–∂–µ—Ç\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë]+)\s+([\d \u00A0\.,]+)\s*(\w+)?", txt, re.IGNORECASE)
    if m:
        category = m.group(1).capitalize()
        amount = parse_amount(m.group(0)) or 0.0
        cur = detect_currency(txt)
        set_budget(uid, category, cur, amount)
        await update.message.reply_text(f"–ë—é–¥–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {category} = {fmt_amount(amount, cur)} {cur.upper()} / –º–µ—Å—è—Ü")
    else:
        buds = get_budgets(uid)
        if not buds:
            await update.message.reply_text("–ë—é–¥–∂–µ—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü—Ä–∏–º–µ—Ä: ¬´–ë—é–¥–∂–µ—Ç –ï–¥–∞ 1 500 000 —Å—É–º¬ª")
        else:
            lines = ["–¢–µ–∫—É—â–∏–µ –±—é–¥–∂–µ—Ç—ã (–º–µ—Å—è—Ü):"]
            for cat, cur, lim in buds:
                spent = month_expense_sum(uid, cat, cur)
                lines.append(f"‚Ä¢ {cat}: {fmt_amount(spent,cur)} / {fmt_amount(lim,cur)} {cur.upper()}")
            await update.message.reply_text("\n".join(lines))

async def handle_recurring(update: Update, uid: int, txt: str):
    low = txt.lower()
    if "–¥–æ–±–∞–≤" in low or "—Å–æ–∑–¥–∞" in low or "–ø–æ–≤—Ç–æ—Ä:" in low:
        ttype, amount, cur, cat = ai_classify_finance(txt)
        freq = None; dow = None; dom = None
        if "–µ–∂–µ–¥–Ω–µ–≤" in low:
            freq = "daily"
        elif "–µ–∂–µ–Ω–µ–¥" in low:
            freq = "weekly"
            for k, v in DOW_MAP.items():
                if re.search(rf"\b{k}\b", low):
                    dow = v; break
            if dow is None:
                dow = 0
        elif "–µ–∂–µ–º–µ—Å" in low:
            freq = "monthly"
            m = re.search(r"\b(\d{1,2})\b", low)
            dom = max(1, min(28, int(m.group(1)))) if m else 1
        if not (amount and freq):
            await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: ¬´–ü–æ–≤—Ç–æ—Ä: –∞—Ä–µ–Ω–¥–∞ 2 000 000 —Å—É–º –µ–∂–µ–º–µ—Å—è—á–Ω–æ 5¬ª.")
            return
        add_recurring(uid, ttype, amount, cur, cat, txt, freq, dow, dom)
        await update.message.reply_text("–ü–æ–≤—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        rows = list_recurring(uid)
        if not rows:
            await update.message.reply_text("–ü–æ–≤—Ç–æ—Ä–æ–≤ –Ω–µ—Ç.")
            return
        lines = ["–¢–µ–∫—É—â–∏–µ –ø–æ–≤—Ç–æ—Ä—ã:"]
        for id_, ttype, amount, cur, cat, note, freq, dow, dom in rows:
            extra = ""
            if freq == "weekly": extra = f" (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {dow})"
            if freq == "monthly": extra = f" (–¥–µ–Ω—å –º–µ—Å—è—Ü–∞: {dom})"
            lines.append(f"#{id_} {'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'} ‚Ä¢ {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {freq}{extra}")
        await update.message.reply_text("\n".join(lines))

async def handle_autodates(update: Update):
    kb = ReplyKeyboardMarkup([[KeyboardButton("–°–µ–≥–æ–¥–Ω—è")],[KeyboardButton("–í—á–µ—Ä–∞")],[KeyboardButton("–ù–µ–¥–µ–ª—è")]], resize_keyboard=True, one_time_keyboard=True, selective=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)

async def period_summary_text(uid: int, label: str) -> str:
    start_ts, end_ts, title = period_bounds(label)
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT ttype, currency, COALESCE(SUM(amount),0) FROM tx
                 WHERE user_id=? AND ts BETWEEN ? AND ? GROUP BY ttype, currency""",
              (uid, start_ts, end_ts))
    sums = {(t,c2): s for t,c2,s in c.fetchall()}
    c.execute("""SELECT category, currency, COALESCE(SUM(amount),0) AS s FROM tx
                 WHERE user_id=? AND ts BETWEEN ? AND ? AND ttype='expense'
                 GROUP BY category, currency ORDER BY s DESC LIMIT 5""",
              (uid, start_ts, end_ts))
    top = c.fetchall(); con.close()
    inc_uzs = sums.get(("income","uzs"),0.0); inc_usd = sums.get(("income","usd"),0.0)
    exp_uzs = sums.get(("expense","uzs"),0.0); exp_usd = sums.get(("expense","usd"),0.0)
    lines = [
        f"–ò—Ç–æ–≥–∏ {title}:",
        f"‚Ä¢ –î–æ—Ö–æ–¥ UZS: {fmt_amount(inc_uzs,'uzs')} | USD: {fmt_amount(inc_usd,'usd')}",
        f"‚Ä¢ –†–∞—Å—Ö–æ–¥ UZS: {fmt_amount(exp_—É–∑s,'uzs')} | USD: {fmt_amount(exp_usd,'usd')}",
    ]
    if top:
        lines.append("–¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:")
        for cat, cur, s in top:
            lines.append(f"  - {cat}: {fmt_amount(s,cur)} {cur.upper()}")
    return "\n".join(lines)

async def handle_reminders(update: Update, app: Application, uid: int, txt: str):
    low = txt.lower()
    if re.search(r"\b(\d{1,2}):(\d{2})\b", low):
        h, m = re.search(r"\b(\d{1,2}):(\d{2})\b", low).groups()
        h, m = max(0, min(23, int(h))), max(0, min(59, int(m)))
        con = sqlite3.connect(DB_PATH); c = con.cursor()
        c.execute("""INSERT INTO reminders(user_id, hour, minute, enabled)
                     VALUES(?,?,?,1)
                     ON CONFLICT(user_id) DO UPDATE SET hour=excluded.hour, minute=excluded.minute, enabled=1""",
                  (uid, h, m))
        con.commit(); con.close()
        schedule_reminder_for_user(app, uid, h, m)
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ: {h:02d}:{m:02d}")
    elif "–≤—ã–∫–ª" in low or "off" in low:
        con = sqlite3.connect(DB_PATH); c = con.cursor()
        c.execute("""INSERT INTO reminders(user_id, hour, minute, enabled)
                     VALUES(?,21,0,0)
                     ON CONFLICT(user_id) DO UPDATE SET enabled=0""", (uid,))
        con.commit(); con.close()
        if getattr(app, "job_queue", None):
            for job in app.job_queue.get_jobs_by_name(f"reminder-{uid}"):
                job.schedule_removal()
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.")
    else:
        con = sqlite3.connect(DB_PATH); c = con.cursor()
        c.execute("SELECT hour, minute, enabled FROM reminders WHERE user_id=?", (uid,))
        row = c.fetchone(); con.close()
        if not row or row[2] == 0:
            await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è: ¬´–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 21:30¬ª.")
        else:
            await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {row[0]:02d}:{row[1]:02d}.")

# ---------------- Router ----------------
async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    txt = (update.message.text or "").strip()
    low = txt.lower()

    if not is_authorized(uid):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    upsert_seen_user(uid, update.effective_user.first_name or "", update.effective_user.username)

    # Debts flow (supports one-line "5000 usd Roni")
    debts = context.user_data.get("debts")
    if debts:
        stage = debts.get("stage")
        if txt == BACK_BTN:
            context.user_data.pop("debts", None)
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KB)
            return

        if stage == "menu":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=debts_menu_kb())
            return

        if stage == "add_counterparty":
            amt = parse_amount(txt)
            if amt is not None:
                cur = detect_currency(txt)
                who = extract_counterparty_from_text(txt) or debts.get("counterparty") or "‚Äî"
                add_debt(uid, debts["direction"], who, amt, cur, txt)
                now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
                msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
                      f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
                      f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
                      f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
                await update.message.reply_text(msg, reply_markup=debts_menu_kb())
                debts["stage"] = "menu"
            else:
                debts["counterparty"] = txt
                debts["stage"] = "add_amount"
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 000 –¥–æ–ª–≥ –∑–∞ –æ–±–µ–¥).",
                                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
            return

        if stage == "add_amount":
            amt = parse_amount(txt)
            if amt is None:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 25 000 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
                                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
                return
            cur = detect_currency(txt)
            who = debts.get("counterparty") or extract_counterparty_from_text(txt) or "‚Äî"
            add_debt(uid, debts["direction"], who, amt, cur, txt)
            now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
            msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
                  f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
                  f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
                  f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
            await update.message.reply_text(msg, reply_markup=debts_menu_kb())
            debts["stage"] = "menu"
            return

        if stage == "close_ask_id":
            m = re.search(r"(\d+)", txt)
            if not m:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb())
                return
            ok = close_debt(uid, int(m.group(1)))
            await update.message.reply_text("–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
            debts["stage"] = "menu"
            return

        if stage == "reduce_ask_id":
            m = re.search(r"(\d+)", txt)
            if not m:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb())
                return
            debts["reduce_id"] = int(m.group(1))
            debts["stage"] = "reduce_ask_amount"
            await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 000)",
                                            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
            return

        if stage == "reduce_ask_amount":
            amt = parse_amount(txt)
            if amt is None or amt <= 0:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 50 000",
                                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
                return
            res = reduce_debt(uid, debts.get("reduce_id", 0), amt)
            if not res:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
            else:
                new_amount, cur, status = res
                if status == "closed":
                    await update.message.reply_text("–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.", reply_markup=debts_menu_kb())
                else:
                    await update.message.reply_text(f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(new_amount,cur)} {cur.upper()}",
                                                    reply_markup=debts_menu_kb())
            debts["stage"] = "menu"
            debts.pop("reduce_id", None)
            return

    # Enter debts menu
    if low == "–¥–æ–ª–≥–∏":
        context.user_data["debts"] = {"stage":"menu"}
        await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=debts_menu_kb()); return
    if low == "‚ûï —è –¥–æ–ª–∂–µ–Ω":
        context.user_data["debts"] = {"stage":"add_counterparty", "direction":"i_owe"}
        await update.message.reply_text("–ö–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd –ò–≤–∞–Ω¬ª.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
    if low == "‚ûï –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
        context.user_data["debts"] = {"stage":"add_counterparty", "direction":"they_owe"}
        await update.message.reply_text("–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd Roni¬ª.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
    if low == "üìú —è –¥–æ–ª–∂–µ–Ω":
        await update.message.reply_text(debts_list_text(uid, "i_owe"), reply_markup=debts_menu_kb()); return
    if low == "üìú –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
        await update.message.reply_text(debts_list_text(uid, "they_owe"), reply_markup=debts_menu_kb()); return

    # Step-by-step income/expense flow
    flow = context.user_data.get("flow")
    if flow:
        stage = flow.get("stage"); ttype = flow.get("ttype")
        if txt == BACK_BTN:
            context.user_data.pop("flow", None)
            await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KB); return
        if stage == "choose_category":
            options = EXPENSE_CATEGORIES if ttype == "expense" else INCOME_CATEGORIES
            if txt in options:
                flow["category"] = txt
                flow["stage"] = "await_amount"
                await update.message.reply_text(f"–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è ¬´{txt}¬ª. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ.", reply_markup=amount_kb())
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=categories_kb(ttype))
            return
        if stage == "await_amount":
            amount = parse_amount(txt)
            if amount is None:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 25 000 –∏–ª–∏ 25 000 –æ–±–µ–¥.", reply_markup=amount_kb()); return
            cur = detect_currency(txt)
            cat = flow.get("category") or "–ü—Ä–æ—á–µ–µ"
            tx_id = add_tx(uid, ttype, amount, cur, cat, txt)
            context.user_data.pop("flow", None)
            await update.message.reply_text(f"{'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'}: {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#{tx_id})", reply_markup=MAIN_KB)
            if ttype == "expense":
                await maybe_warn_budget(update, uid, cat, cur)
            ai_tip = ai_hint_after_tx(uid, ttype, cur, cat)
            await send_and_pin_summary(update, context, uid, ai_tip)
            return

    if low == "‚ûñ —Ä–∞—Å—Ö–æ–¥" or low == "—Ä–∞—Å—Ö–æ–¥":
        context.user_data["flow"] = {"stage":"choose_category","ttype":"expense"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=categories_kb("expense")); return
    if low == "‚ûï –¥–æ—Ö–æ–¥" or low == "–¥–æ—Ö–æ–¥":
        context.user_data["flow"] = {"stage":"choose_category","ttype":"income"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=categories_kb("income")); return

    # Other features
    if "–±–∞–ª–∞–Ω—Å" in low:
        await update.message.reply_text(balance_with_debts_text(uid), reply_markup=MAIN_KB); return
    if "–∏—Å—Ç–æ—Ä–∏—è" in low:
        await send_history(update, uid, 10); return
    if "–æ—Ç—á—ë—Ç" in low or "–æ—Ç—á–µ—Ç" in low:
        msg = await month_report_text(uid)
        await update.message.reply_text(msg, reply_markup=MAIN_KB); return
    if "—ç–∫—Å–ø–æ—Ä—Ç" in low:
        csv_b, csv_name, xl_b, xl_name = export_month(uid)
        await update.message.reply_document(document=csv_b, filename=csv_name)
        if xl_name:
            await update.message.reply_document(document=xl_b, filename=xl_name)
        return
    if "pdf" in low:
        pdf = await pdf_report_month(uid)
        if pdf:
            buf, name = pdf; await update.message.reply_document(document=buf, filename=name)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF —Å–µ–π—á–∞—Å.")
        return
    if "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª" in low:
        await update.message.reply_text(users_summary_text(), reply_markup=MAIN_KB); return
    if "–∫—É—Ä—Å" in low:
        rate = await fetch_usd_uzs_rate()
        uzs, usd = get_balance(uid)
        lines = []
        if rate:
            total_uzs = uzs + usd * rate
            total_usd = usd + (uzs / rate)
            lines.append(f"–ö—É—Ä—Å: 1 USD = {rate:,.0f} UZS".replace(",", " "))
            lines.append(f"–°–≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å: ‚âà {fmt_amount(total_uzs,'uzs')} UZS | ‚âà {total_usd:.2f} USD")
        else:
            lines.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–∫–∞–∑—ã–≤–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.")
        lines.append(balance_with_debts_text(uid))
        await update.message.reply_text("\n".join(lines)); return

    # Free text transaction
    ttype, amount, cur, cat = ai_classify_finance(txt)
    if amount is not None:
        tx_id = add_tx(uid, ttype, amount, cur, cat, txt)
        await update.message.reply_text(f"{'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'}: {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#{tx_id})", reply_markup=MAIN_KB)
        if ttype == "expense":
            await maybe_warn_budget(update, uid, cat, cur)
        ai_tip = ai_hint_after_tx(uid, ttype, cur, cat)
        await send_and_pin_summary(update, context, uid, ai_tip)
        return

    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ –ù–∞–ø–∏—à–∏: ¬´—Ç–∞–∫—Å–∏ 25 000¬ª, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.", reply_markup=MAIN_KB)

async def unknown_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç—Ä–∞—Ç—ã/–¥–æ—Ö–æ–¥.", reply_markup=MAIN_KB)

# ---------------- Main ----------------
def main():
    token = DEFAULT_BOT_TOKEN
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))
    schedule_daily_jobs(app)
    load_and_schedule_all_reminders(app)
    log.info("Starting polling")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
# requirements.txt
python-telegram-bot[job-queue]==20.7
httpx==0.25.2
openpyxl==3.1.5
reportlab==4.2.2
Aug 24 15:10:22
2025-08-24 10:10:22,659 INFO httpx | HTTP Request: POST https://api.telegram.org/bot7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc/getUpdates "HTTP/1.1 200 OK"

Aug 24 15:10:42
2025-08-24 10:10:32,663 INFO httpx | HTTP Request: POST https://api.telegram.org/bot7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc/getUpdates "HTTP/1.1 200 OK"

Aug 24 15:10:42
2025-08-24 10:10:42,667 INFO httpx | HTTP Request: POST https://api.telegram.org/bot7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc/getUpdates "HTTP/1.1 200 OK"

Aug 24 15:11:01
Stopping Container

Aug 24 15:11:02
2025-08-24 10:10:52,671 INFO httpx | HTTP Request: POST https://api.telegram.org/bot7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc/getUpdates "HTTP/1.1 200 OK"

Aug 24 15:11:02
2025-08-24 10:11:00,089 INFO httpx | HTTP Request: POST https://api.telegram.org/bot7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc/getUpdates "HTTP/1.1 200 OK"

Aug 24 15:11:02
2025-08-24 10:11:00,090 INFO telegram.ext.Application | Application is stopping. This might take a moment.

Aug 24 15:11:02
2025-08-24 10:11:00,090 INFO apscheduler.scheduler | Scheduler has been shut down

Aug 24 15:11:02
2025-08-24 10:11:00,100 INFO telegram.ext.Application | Application.stop() complete
Thought for 33s
–≠—Ç–æ Railway –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: —Å–µ—Ä–≤–∏—Å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Web, –∞ –±–æ—Ç –Ω–∞ polling –Ω–µ —Å–ª—É—à–∞–µ—Ç PORT, –ø–æ—ç—Ç–æ–º—É healthcheck ‚Äú–ø–∞–¥–∞–µ—Ç‚Äù –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —à–ª—ë—Ç SIGTERM (–≤–∏–¥–Ω–æ –ø–æ ‚ÄúApplication is stopping‚Ä¶‚Äù).

–°–¥–µ–ª–∞–π –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ (–±–µ–∑ –∫–æ–¥–∞):

–í Railway –ø–æ–º–µ–Ω—è–π —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Worker (–∏–ª–∏ –æ—Ç–∫–ª—é—á–∏ HTTP/healthcheck).
Start Command –æ—Å—Ç–∞–≤—å: python main.py
Redeploy.
–û—Å—Ç–∞–≤–∏—Ç—å Web –∏ –ø—Ä–æ–π—Ç–∏ healthcheck (–º–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–∞–≤–∫–∞ –≤ main.py):

–î–æ–±–∞–≤—å –Ω–∞–≤–µ—Ä—Ö –∏–º–ø–æ—Ä—Ç—ã:
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler
–î–æ–±–∞–≤—å —Ä—è–¥–æ–º —Å —Ö–µ–ª–ø–µ—Ä–∞–º–∏:
class HealthHandler(BaseHTTPRequestHandler):
	def do_GET(self):
		self.send_response(200); self.send_header("Content-Type","text/plain"); self.end_headers()
		self.wfile.write(b"OK")
	def log_message(self, format, *args): return

def start_healthcheck_server():
	httpd = HTTPServer(("0.0.0.0", PORT), HealthHandler)
	httpd.serve_forever()
–í —Ñ—É–Ω–∫—Ü–∏–∏ main(), –ø–µ—Ä–µ–¥ app.run_polling(...):
Thread(target=start_healthcheck_server, daemon=True).start()
–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è, –∞ –±–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ polling.

–æ—Ç–ø—Ä–∞–≤—å –≤—Å–µ–≥–¥–∞ —Ç–∞–∫ —á—Ç–æ–±—ã —è –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª
Thought for 49s
# main.py
import os, re, sqlite3, time, logging, csv, io
from datetime import datetime, timedelta, time as dtime
from typing import Optional, Tuple, List
from zoneinfo import ZoneInfo
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler

import httpx
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ---------------- Config ----------------
PORT = int(os.environ.get("PORT", "8080"))
DB_PATH = os.environ.get("DB_PATH", "finance.db")
TIMEZONE = ZoneInfo(os.environ.get("TZ", "Asia/Tashkent"))
ALLOWED_USER_IDS = {int(x) for x in os.environ.get("ALLOWED_USER_IDS", "").replace(";", ",").split(",") if x.strip().isdigit()}
ADMIN_USER_ID = int(os.environ.get("ADMIN_USER_ID")) if os.environ.get("ADMIN_USER_ID", "").isdigit() else None
DEFAULT_BOT_TOKEN = os.environ.get("BOT_TOKEN", "7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc")

logging.basicConfig(format="%(asctime)s %(levelname)s %(name)s | %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

# ---------------- Healthcheck (for Railway Web) ----------------
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-Type", "text/plain")
        self.end_headers()
        self.wfile.write(b"OK")

    def log_message(self, format, *args):
        return

def start_healthcheck_server():
    httpd = HTTPServer(("0.0.0.0", PORT), HealthHandler)
    httpd.serve_forever()

# ---------------- DB ----------------
def init_db():
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS tx(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        ttype TEXT NOT NULL CHECK(ttype IN('income','expense')),
        amount REAL NOT NULL,
        currency TEXT NOT NULL,
        category TEXT NOT NULL,
        note TEXT,
        ts INTEGER NOT NULL
    )""")
    c.execute("CREATE INDEX IF NOT EXISTS idx_tx_user_ts ON tx(user_id, ts)")
    c.execute("""CREATE TABLE IF NOT EXISTS budgets(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        category TEXT NOT NULL,
        currency TEXT NOT NULL,
        limit_amount REAL NOT NULL,
        period TEXT NOT NULL DEFAULT 'month',
        created_ts INTEGER NOT NULL
    )""")
    c.execute("CREATE UNIQUE INDEX IF NOT EXISTS uq_budget ON budgets(user_id, category, currency, period)")
    c.execute("""CREATE TABLE IF NOT EXISTS reminders(
        user_id INTEGER PRIMARY KEY,
        hour INTEGER NOT NULL,
        minute INTEGER NOT NULL,
        enabled INTEGER NOT NULL DEFAULT 1
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS recurring(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        ttype TEXT NOT NULL CHECK(ttype IN('income','expense')),
        amount REAL NOT NULL,
        currency TEXT NOT NULL,
        category TEXT NOT NULL,
        note TEXT,
        frequency TEXT NOT NULL CHECK(frequency IN('daily','weekly','monthly')),
        day_of_week INTEGER,
        day_of_month INTEGER,
        last_applied_date TEXT,
        created_ts INTEGER NOT NULL
    )""")
    c.execute("CREATE INDEX IF NOT EXISTS idx_recurring_user ON recurring(user_id)")
    c.execute("""CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        username TEXT,
        last_seen_ts INTEGER NOT NULL
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS debts(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        direction TEXT NOT NULL CHECK(direction IN('i_owe','they_owe')),
        counterparty TEXT NOT NULL,
        amount REAL NOT NULL,
        currency TEXT NOT NULL,
        note TEXT,
        status TEXT NOT NULL DEFAULT 'open' CHECK(status IN('open','closed')),
        created_ts INTEGER NOT NULL,
        updated_ts INTEGER NOT NULL
    )""")
    c.execute("CREATE INDEX IF NOT EXISTS idx_debts_user ON debts(user_id, status, direction)")
    con.commit(); con.close()
init_db()

# ---------------- Keyboards ----------------
BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìä –û—Ç—á—ë—Ç (–º–µ—Å—è—Ü)"), KeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç üìÇ")],
        [KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å"), KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton("–ë—é–¥–∂–µ—Ç üí°"), KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç üí±")],
        [KeyboardButton("–î–æ–ª–≥–∏")],
        [KeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä—ã"), KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")],
        [KeyboardButton("üìÖ –ê–≤—Ç–æ–¥–∞—Ç—ã"), KeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [KeyboardButton("PDF –æ—Ç—á—ë—Ç"), KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
    ],
    resize_keyboard=True
)

def debts_menu_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton("‚ûï –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
        [KeyboardButton("üìú –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
        [KeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥"), KeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥")],
        [KeyboardButton(BACK_BTN)]
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def _rows_keyboard(labels: List[str], per_row: int = 3) -> List[List[KeyboardButton]]:
    rows, row = [], []
    for i, lbl in enumerate(labels, 1):
        row.append(KeyboardButton(lbl))
        if i % per_row == 0:
            rows.append(row); row = []
    if row:
        rows.append(row)
    return rows

def categories_kb(ttype: str) -> ReplyKeyboardMarkup:
    cats = EXPENSE_CATEGORIES if ttype == "expense" else INCOME_CATEGORIES
    rows = _rows_keyboard(cats, per_row=3)
    rows.append([KeyboardButton(BACK_BTN)])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def amount_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)

# ---------------- Categories ----------------
EXPENSE_CATEGORIES = ["–ï–¥–∞","–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç","–ó–¥–æ—Ä–æ–≤—å–µ","–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è","–î–æ–º","–î–µ—Ç—Å–∫–æ–µ","–°–ø–æ—Ä—Ç","–ü—Ä–æ—á–µ–µ"]
INCOME_CATEGORIES  = ["–ó–∞—Ä–ø–ª–∞—Ç–∞","–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞","–ü–æ–¥–∞—Ä–æ–∫","–ü—Ä–µ–º–∏—è","–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏","–ü—Ä–æ—á–µ–µ"]
CATEGORY_KEYWORDS = {
    "–ï–¥–∞": ["–µ–¥–∞","–ø—Ä–æ–¥—É–∫—Ç","–æ–±–µ–¥","—É–∂–∏–Ω","–∑–∞–≤—Ç—Ä–∞–∫","–∫–∞—Ñ–µ","—Ä–µ—Å—Ç–æ—Ä–∞–Ω","—Å–∞–º—Å–∞","–ø–ª–æ–≤","—à–∞—É—Ä–º–∞","–ø–∏—Ü—Ü–∞"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏","—Ç–æ–ø–ª–∏–≤–æ","–±–µ–Ω–∑–∏–Ω","–≥–∞–∑","–º–µ—Ç—Ä–æ","–∞–≤—Ç–æ–±—É—Å","–∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ","–∞—Ä–µ–Ω–¥–∞ –º–∞—à–∏–Ω—ã"],
    "–ó–∞—Ä–ø–ª–∞—Ç–∞": ["–∑–∞—Ä–ø–ª–∞—Ç–∞","–æ–∫–ª–∞–¥"],
    "–ü—Ä–µ–º–∏—è": ["–ø—Ä–µ–º–∏—è","–±–æ–Ω—É—Å","–∞–≤–∞–Ω—Å"],
    "–ó–¥–æ—Ä–æ–≤—å–µ": ["–∞–ø—Ç–µ–∫–∞","–≤—Ä–∞—á","—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥","–ª–µ–∫–∞—Ä","–≤–∏—Ç–∞–º–∏–Ω"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ","–∏–≥—Ä–∞","cs2","steam","–ø–æ–¥–ø–∏—Å–∫–∞","spotify","netflix"],
    "–î–æ–º": ["–∞—Ä–µ–Ω–¥–∞","–∫–≤–∞—Ä—Ç–∏—Ä–∞","–∫–æ–º–º—É–Ω–∞–ª","—ç–ª–µ–∫—Ç—Ä","–∏–Ω—Ç–µ—Ä–Ω–µ—Ç","—Ä–µ–º–æ–Ω—Ç"],
    "–î–µ—Ç—Å–∫–æ–µ": ["–ø–∞–º–ø–µ—Ä—Å","–ø–æ–¥–≥—É–∑","–∫–æ–ª—è—Å–∫–∞","–∏–≥—Ä—É—à","–¥–µ—Ç—Å–∫","–¥–æ—á–∫–∞","—Ö–∞–¥–∏–¥–∂–∞"],
    "–°–ø–æ—Ä—Ç": ["–∑–∞–ª","—Å–ø–æ—Ä—Ç","–∫—Ä–µ–∞—Ç–∏–Ω","–ø—Ä–æ—Ç–µ–∏–Ω","–≥–µ–π–Ω–µ—Ä","–∞–±–æ–Ω–µ–º–µ–Ω—Ç"],
    "–ü–æ–¥–∞—Ä–æ–∫": ["–ø–æ–¥–∞—Ä–æ–∫","–¥–∞—Ä–∏–ª","–¥–∞—Ä–µ–Ω–∏–µ"],
    "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞": ["–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞","—Ñ—Ä–∏–ª–∞–Ω—Å","—Ö–∞–ª—Ç—É—Ä–∞"],
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–∞–∫—Ü–∏–∏","–∏–Ω–≤–µ—Å—Ç","–≤–∫–ª–∞–¥"],
    "–ü—Ä–æ—á–µ–µ": []
}

# ---------------- Helpers ----------------
def is_authorized(user_id: int) -> bool:
    if not ALLOWED_USER_IDS:
        return True
    return user_id in ALLOWED_USER_IDS

def upsert_seen_user(uid: int, first_name: str, username: Optional[str]):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    now = int(time.time())
    c.execute("""INSERT INTO users(user_id, first_name, username, last_seen_ts)
                 VALUES(?,?,?,?)
                 ON CONFLICT(user_id) DO UPDATE SET
                   first_name=excluded.first_name,
                   username=excluded.username,
                   last_seen_ts=excluded.last_seen_ts
              """, (uid, first_name, username, now))
    con.commit(); con.close()

def detect_currency(t: str) -> str:
    tl = t.lower()
    if "$" in tl:
        return "usd"
    words = set(re.findall(r"[a-z–∞-—è—ë]+", tl))
    if {"usd","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"} & words:
        return "usd"
    if {"uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤"} & words:
        return "uzs"
    return "uzs"

def parse_amount(t: str) -> Optional[float]:
    s = t.replace("\u00A0", " ")
    m = re.findall(r"(?:(?<=\s)|^|(?<=[^\w]))(\d{1,3}(?:[ \u00A0\.,]\d{3})+|\d+)(?:[.,](\d{1,2}))?", s)
    if not m:
        return None
    raw, frac = m[-1]
    num = re.sub(r"[ \u00A0\.,]", "", raw)
    try:
        return float(f"{num}.{frac}") if frac else float(num)
    except ValueError:
        return None

CURRENCY_WORDS = {"usd","uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"}
def extract_counterparty_from_text(t: str) -> str:
    words = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]+", t)
    names = [w for w in words if w.lower() not in CURRENCY_WORDS]
    return " ".join(names[-2:]) if names else ""

def fmt_amount(amount: float, cur: str) -> str:
    if cur == "uzs":
        return f"{int(round(amount)):,}".replace(",", " ")
    return f"{amount:.2f}"

# ---------------- TX ----------------
def ai_classify_finance(t: str):
    ttype = "expense"
    lt = t.lower()
    if any(w in lt for w in ["–∑–∞—Ä–ø–ª–∞—Ç–∞","–ø—Ä–µ–º–∏—è","–±–æ–Ω—É—Å","–ø–æ–ª—É—á–∏–ª","–ø—Ä–∏—à–ª–æ","–¥–æ—Ö–æ–¥"]):
        ttype = "income"
    amount = parse_amount(t)
    cur = detect_currency(t)
    cat = "–ü—Ä–æ—á–µ–µ"
    for c, kws in CATEGORY_KEYWORDS.items():
        if any(k in lt for k in kws):
            cat = c; break
    if ttype == "income" and cat == "–ü—Ä–æ—á–µ–µ":
        if any(x in lt for x in ["–∑–∞—Ä–ø–ª–∞—Ç"]): cat = "–ó–∞—Ä–ø–ª–∞—Ç–∞"
        elif any(x in lt for x in ["–ø—Ä–µ–º","–±–æ–Ω—É—Å"]): cat = "–ü—Ä–µ–º–∏—è"
        elif any(x in lt for x in ["–ø–æ–¥–∞—Ä"]): cat = "–ü–æ–¥–∞—Ä–æ–∫"
        elif any(x in lt for x in ["–ø–æ–¥—Ä–∞–±–æ—Ç","—Ñ—Ä–∏–ª–∞–Ω—Å","—Ö–∞–ª—Ç—É—Ä"]): cat = "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞"
    return ttype, amount, cur, cat

def add_tx(uid: int, ttype: str, amount: float, cur: str, cat: str, note: str) -> int:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("INSERT INTO tx(user_id,ttype,amount,currency,category,note,ts) VALUES(?,?,?,?,?,?,?)",
              (uid, ttype, amount, cur, cat, note, int(time.time())))
    tx_id = c.lastrowid
    con.commit(); con.close()
    return tx_id

def last_txs(uid: int, limit: int = 10):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, ttype, amount, currency, category, note, ts
                 FROM tx WHERE user_id=? ORDER BY ts DESC LIMIT ?""", (uid, limit))
    rows = c.fetchall(); con.close(); return rows

def get_balance(uid: int) -> Tuple[float,float]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    def s(t, cur):
        c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype=? AND currency=?",
                  (uid, t, cur))
        return c.fetchone()[0] or 0.0
    bal_uzs = s("income", "uzs") - s("expense", "uzs")
    bal_usd = s("income", "usd") - s("expense", "usd")
    con.close()
    return bal_uzs, bal_usd

def month_bounds_now():
    now = datetime.now(TIMEZONE)
    start = datetime(now.year, now.month, 1, 0, 0, 0, tzinfo=TIMEZONE)
    return int(start.timestamp()), int(now.timestamp())

def period_bounds(keyword: str) -> Tuple[int,int,str]:
    now = datetime.now(TIMEZONE)
    key = keyword.lower()
    if "—Å–µ–≥–æ–¥–Ω—è" in key:
        start = datetime(now.year, now.month, now.day, 0, 0, 0, tzinfo=TIMEZONE)
        return int(start.timestamp()), int(now.timestamp()), "—Å–µ–≥–æ–¥–Ω—è"
    if "–≤—á–µ—Ä–∞" in key:
        y = now - timedelta(days=1)
        start = datetime(y.year, y.month, y.day, 0, 0, 0, tzinfo=TIMEZONE)
        end = datetime(y.year, y.month, y.day, 23, 59, 59, tzinfo=TIMEZONE)
        return int(start.timestamp()), int(end.timestamp()), "–≤—á–µ—Ä–∞"
    week_start = now - timedelta(days=(now.weekday()))
    start = datetime(week_start.year, week_start.month, week_start.day, 0, 0, 0, tzinfo=TIMEZONE)
    return int(start.timestamp()), int(now.timestamp()), "–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"

async def month_report_text(uid: int) -> str:
    start_ts, end_ts = month_bounds_now()
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT ttype, currency, COALESCE(SUM(amount),0)
                 FROM tx WHERE user_id=? AND ts BETWEEN ? AND ?
                 GROUP BY ttype, currency""", (uid, start_ts, end_ts))
    sums = {(tt, cur): total for tt, cur, total in c.fetchall()}
    c.execute("""SELECT category, currency, COALESCE(SUM(amount),0) AS s
                 FROM tx WHERE user_id=? AND ts BETWEEN ? AND ? AND ttype='expense'
                 GROUP BY category, currency ORDER BY s DESC LIMIT 5""", (uid, start_ts, end_ts))
    top = c.fetchall()
    con.close()
    inc_uzs = sums.get(("income","uzs"), 0.0)
    inc_usd = sums.get(("income","usd"), 0.0)
    exp_uzs = sums.get(("expense","uzs"), 0.0)
    exp_usd = sums.get(("expense","usd"), 0.0)
    bal_uzs = inc_uzs - exp_uzs
    bal_usd = inc_usd - exp_usd
    lines = [
        "–û—Ç—á—ë—Ç (–º–µ—Å—è—Ü):",
        f"‚Ä¢ –î–æ—Ö–æ–¥ UZS: {fmt_amount(inc_uzs,'uzs')} | USD: {fmt_amount(inc_usd,'usd')}",
        f"‚Ä¢ –†–∞—Å—Ö–æ–¥ UZS: {fmt_amount(exp_uzs,'uzs')} | USD: {fmt_amount(exp_usd,'usd')}",
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å UZS: {fmt_amount(bal_uzs,'uzs')} | USD: {fmt_amount(bal_usd,'usd')}",
    ]
    if top:
        lines.append("–¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:")
        for cat, cur, s in top:
            lines.append(f"  - {cat}: {fmt_amount(s, cur)} {cur.upper()}")
    return "\n".join(lines)

def undo_last(uid: int) -> Optional[Tuple]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT id, ttype, amount, currency, category, note FROM tx WHERE user_id=? ORDER BY id DESC LIMIT 1", (uid,))
    row = c.fetchone()
    if not row:
        con.close(); return None
    tx_id, ttype, amount, currency, category, note = row
    c.execute("DELETE FROM tx WHERE id=?", (tx_id,))
    con.commit(); con.close()
    return row

# ---------------- Budgets ----------------
def set_budget(uid: int, category: str, currency: str, limit_amount: float):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    now = int(time.time())
    c.execute("""INSERT INTO budgets(user_id, category, currency, limit_amount, period, created_ts)
                 VALUES(?,?,?,?, 'month', ?)
                 ON CONFLICT(user_id, category, currency, period) DO UPDATE SET
                   limit_amount=excluded.limit_amount
              """, (uid, category, currency, limit_amount, now))
    con.commit(); con.close()

def get_budgets(uid: int) -> List[Tuple[str, str, float]]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT category, currency, limit_amount FROM budgets WHERE user_id=? AND period='month' ORDER BY category", (uid,))
    rows = c.fetchall(); con.close(); return rows

def month_expense_sum(uid: int, category: str, currency: str) -> float:
    start_ts, end_ts = month_bounds_now()
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT COALESCE(SUM(amount),0) FROM tx
                 WHERE user_id=? AND ttype='expense' AND category=? AND currency=? AND ts BETWEEN ? AND ?""",
              (uid, category, currency, start_ts, end_ts))
    s = c.fetchone()[0] or 0.0
    con.close(); return s

async def maybe_warn_budget(update: Update, uid: int, category: str, currency: str):
    limit = None
    for cat, cur, lim in get_budgets(uid):
        if cat == category and cur == currency:
            limit = lim; break
    if limit is None:
        return
    spent = month_expense_sum(uid, category, currency)
    if spent >= limit:
        over = spent - limit
        await update.message.reply_text(
            f"–í–Ω–∏–º–∞–Ω–∏–µ: –±—é–¥–∂–µ—Ç –ø–æ ¬´{category}¬ª –ø—Ä–µ–≤—ã—à–µ–Ω.\n"
            f"–õ–∏–º–∏—Ç: {fmt_amount(limit,currency)} {currency.upper()}, –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ: {fmt_amount(spent,currency)} ({fmt_amount(over,currency)} —Å–≤–µ—Ä—Ö).",
            reply_markup=MAIN_KB
        )

# ---------------- Recurring / Reminders (optional) ----------------
DOW_MAP = {"–ø–Ω":0,"–ø–æ–Ω":0,"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–≤—Ç":1,"–≤—Ç–æ—Ä–Ω–∏–∫":1,"—Å—Ä":2,"—Å—Ä–µ–¥–∞":2,"—á—Ç":3,"—á–µ—Ç":3,"—á–µ—Ç–≤–µ—Ä–≥":3,"–ø—Ç":4,"–ø—è—Ç–Ω–∏—Ü–∞":4,"–ø—Ç–Ω":4,"—Å–±":5,"—Å—É–±–±–æ—Ç–∞":5,"–≤—Å":6,"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6}

def add_recurring(uid: int, ttype: str, amount: float, currency: str, category: str, note: str, frequency: str, day_of_week: Optional[int], day_of_month: Optional[int]):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""INSERT INTO recurring(user_id, ttype, amount, currency, category, note, frequency, day_of_week, day_of_month, last_applied_date, created_ts)
                 VALUES(?,?,?,?,?,?,?,?,?,?,?)""",
              (uid, ttype, amount, currency, category, note, frequency, day_of_week, day_of_month, None, int(time.time())))
    con.commit(); con.close()

def list_recurring(uid: int) -> List[Tuple]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, ttype, amount, currency, category, note, frequency, day_of_week, day_of_month
                 FROM recurring WHERE user_id=? ORDER BY id DESC""", (uid,))
    rows = c.fetchall(); con.close(); return rows

def mark_recurring_applied(rec_id: int, date_str: str):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("UPDATE recurring SET last_applied_date=? WHERE id=?", (date_str, rec_id))
    con.commit(); con.close()

async def process_recurring_all(app: Application):
    today = datetime.now(TIMEZONE).date()
    date_str = today.isoformat()
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, user_id, ttype, amount, currency, category, note, frequency, day_of_week, day_of_month, last_applied_date FROM recurring""")
    rows = c.fetchall(); con.close()
    for rec in rows:
        rec_id, uid, ttype, amount, currency, category, note, freq, dow, dom, last_date = rec
        if last_date == date_str:
            continue
        do = (freq == "daily") or (freq == "weekly" and dow is not None and today.weekday() == int(dow)) or (freq == "monthly" and dom is not None and today.day == int(dom))
        if do:
            add_tx(uid, ttype, amount, currency, category, note or f"Recurring {freq}")
            mark_recurring_applied(rec_id, date_str)
            try:
                await app.bot.send_message(chat_id=uid, text=f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {category} {fmt_amount(amount, currency)} {currency.upper()} ({'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'})")
            except Exception as e:
                log.warning(f"notify recurring failed for {uid}: {e}")

def schedule_daily_jobs(app: Application):
    if not getattr(app, "job_queue", None):
        log.warning("JobQueue is not available; skipping scheduled jobs")
        return
    app.job_queue.run_daily(lambda ctx: ctx.application.create_task(process_recurring_all(ctx.application)),
                            dtime(hour=9, minute=0, tzinfo=TIMEZONE), name="recurring-processor")

def schedule_reminder_for_user(app: Application, uid: int, hour: int, minute: int):
    if not getattr(app, "job_queue", None):
        return
    job_name = f"reminder-{uid}"
    for job in app.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()
    def _cb(context: ContextTypes.DEFAULT_TYPE):
        context.application.create_task(context.bot.send_message(chat_id=uid, text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è?"))
    app.job_queue.run_daily(_cb, dtime(hour=hour, minute=minute, tzinfo=TIMEZONE), name=job_name)

def load_and_schedule_all_reminders(app: Application):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT user_id, hour, minute, enabled FROM reminders WHERE enabled=1")
    for uid, h, m, en in c.fetchall():
        schedule_reminder_for_user(app, uid, h, m)
    con.close()

# ---------------- Debts ----------------
def add_debt(uid: int, direction: str, counterparty: str, amount: float, currency: str, note: str) -> int:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""INSERT INTO debts(user_id, direction, counterparty, amount, currency, note, status, created_ts, updated_ts)
                 VALUES(?,?,?,?,?,?, 'open', ?, ?)""", (uid, direction, counterparty, amount, currency, note, now, now))
    debt_id = c.lastrowid
    con.commit(); con.close()
    return debt_id

def list_debts(uid: int, direction: str):
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, counterparty, amount, currency, note, created_ts
                 FROM debts
                 WHERE user_id=? AND status='open' AND direction=?
                 ORDER BY id DESC""", (uid, direction))
    rows = c.fetchall(); con.close(); return rows

def close_debt(uid: int, debt_id: int) -> bool:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("UPDATE debts SET status='closed', updated_ts=? WHERE id=? AND user_id=? AND status='open'", (now, debt_id, uid))
    ok = c.rowcount > 0
    con.commit(); con.close()
    return ok

def reduce_debt(uid: int, debt_id: int, delta: float) -> Optional[Tuple[float,str,str]]:
    now = int(time.time())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT amount, currency FROM debts WHERE id=? AND user_id=? AND status='open'", (debt_id, uid))
    row = c.fetchone()
    if not row:
        con.close(); return None
    amount, currency = float(row[0]), str(row[1])
    new_amount = max(0.0, amount - abs(delta))
    if new_amount <= 0.0:
        c.execute("UPDATE debts SET amount=0, status='closed', updated_ts=? WHERE id=?", (now, debt_id))
        status = "closed"
    else:
        c.execute("UPDATE debts SET amount=?, updated_ts=? WHERE id=?", (new_amount, now, debt_id))
        status = "open"
    con.commit(); con.close()
    return new_amount, currency, status

def debts_list_text(uid: int, direction: str) -> str:
    rows = list_debts(uid, direction)
    title = "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:" if direction == "they_owe" else "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–æ–ª–≥–æ–≤:"
    if not rows:
        return f"{title}\n‚Äî –ø—É—Å—Ç–æ ‚Äî"
    lines = [title]
    for id_, who, amount, cur, note, created_ts in rows:
        d = datetime.fromtimestamp(int(created_ts), tz=TIMEZONE).strftime("%d.%m.%Y")
        lines.append(f"#{id_} {who} ‚Äì {fmt_amount(float(amount),cur)} {cur.upper()} ({d})")
    return "\n".join(lines)

def debt_totals(uid: int) -> Tuple[float,float,float,float]:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    def s(direction: str, cur: str) -> float:
        c.execute("""SELECT COALESCE(SUM(amount),0)
                     FROM debts WHERE user_id=? AND status='open' AND direction=? AND currency=?""",
                  (uid, direction, cur))
        return float(c.fetchone()[0] or 0.0)
    iowe_uzs = s("i_owe","uzs"); iowe_usd = s("i_owe","usd")
    they_uzs = s("they_owe","uzs"); they_usd = s("they_owe","usd")
    con.close()
    return iowe_uzs, iowe_usd, they_uzs, they_usd

def balance_with_debts_text(uid: int) -> str:
    uzs, usd = get_balance(uid)
    iowe_uzs, iowe_usd, they_uzs, they_usd = debt_totals(uid)
    net_uzs = uzs - iowe_uzs + they_uzs
    net_usd = usd - iowe_usd + they_uzs
    lines = [
        f"–ë–∞–ª–∞–Ω—Å –±–µ–∑ –¥–æ–ª–≥–æ–≤: {fmt_amount(uzs,'uzs')} UZS | {fmt_amount(usd,'usd')} USD",
        f"–Ø –¥–æ–ª–∂–µ–Ω: {fmt_amount(iowe_uzs,'uzs')} UZS | {fmt_amount(iowe_usd,'usd')} USD",
        f"–ú–Ω–µ –¥–æ–ª–∂–Ω—ã: {fmt_amount(they_uzs,'uzs')} UZS | {fmt_amount(they_usd,'usd')} USD",
        f"–ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: {fmt_amount(net_uzs,'uzs')} UZS | {fmt_amount(net_usd,'usd')} USD",
    ]
    return "\n".join(lines)

# ---------------- Export / Rates / Analytics / PDF ----------------
def export_month(uid: int) -> Tuple[io.BytesIO, str, io.BytesIO, str]:
    start_ts, end_ts = month_bounds_now()
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT id, ts, ttype, amount, currency, category, note
                 FROM tx WHERE user_id=? AND ts BETWEEN ? AND ? ORDER BY ts ASC""",
              (uid, start_ts, end_ts))
    rows = c.fetchall(); con.close()
    year_month = datetime.now(TIMEZONE).strftime("%Y_%m")
    csv_buf = io.StringIO()
    writer = csv.writer(csv_buf)
    writer.writerow(["id","datetime","type","amount","currency","category","note"])
    for id_, ts, ttype, amount, cur, cat, note in rows:
        writer.writerow([id_, datetime.fromtimestamp(ts, tz=TIMEZONE).isoformat(sep=" "), ttype, f"{amount:.2f}", cur, cat, note or ""])
    csv_bytes = io.BytesIO(csv_buf.getvalue().encode("utf-8"))
    csv_name = f"transactions_{year_month}.csv"
    try:
        from openpyxl import Workbook
        wb = Workbook(); ws = wb.active; ws.title = "Transactions"
        ws.append(["id","datetime","type","amount","currency","category","note"])
        for id_, ts, ttype, amount, cur, cat, note in rows:
            ws.append([id_, datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%Y-%m-%d %H:%M:%S"), ttype, amount, cur, cat, note or ""])
        xl_bytes = io.BytesIO(); wb.save(xl_bytes); xl_bytes.seek(0)
        xl_name = f"transactions_{year_month}.xlsx"
    except Exception:
        xl_bytes = io.BytesIO(b""); xl_name = ""
    return csv_bytes, csv_name, xl_bytes, xl_name

async def fetch_usd_uzs_rate() -> Optional[float]:
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.get("https://api.exchangerate.host/latest?base=USD&symbols=UZS")
            data = r.json()
            return float(data["rates"]["UZS"])
    except Exception as e:
        log.warning(f"rate fetch failed: {e}")
        return None

def sparkline(values: List[float]) -> str:
    if not values:
        return ""
    min_v, max_v = min(values), max(values)
    blocks = "‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà"
    if max_v == min_v:
        return blocks[0] * len(values)
    res = []
    for v in values:
        idx = int((v - min_v) / (max_v - min_v) * (len(blocks) - 1))
        res.append(blocks[idx])
    return "".join(res)

def day_bucket(ts: int) -> str:
    return datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%Y-%m-%d")

def week_bucket(ts: int) -> str:
    dt = datetime.fromtimestamp(ts, tz=TIMEZONE)
    year, week, _ = dt.isocalendar()
    return f"{year}-W{week:02d}"

async def analytics_text(uid: int) -> str:
    now = datetime.now(TIMEZONE)
    start_14 = now - timedelta(days=13)
    start_14_ts = int(datetime(start_14.year, start_14.month, start_14.day, 0, 0, 0, tzinfo=TIMEZONE).timestamp())
    start_8w = now - timedelta(weeks=7)
    start_8w_ts = int(datetime(start_8w.year, start_8w.month, start_8w.day, 0, 0, 0, tzinfo=TIMEZONE).timestamp())
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("""SELECT ts, ttype, amount, currency FROM tx WHERE user_id=? AND ts>=?""", (uid, start_14_ts))
    rows14 = c.fetchall()
    c.execute("""SELECT ts, ttype, amount, currency FROM tx WHERE user_id=? AND ts>=?""", (uid, start_8w_ts))
    rows8w = c.fetchall()
    con.close()

    def series(rows, kind, cur, bucket_fn):
        buckets = {}
        for ts, ttype, amount, currency in rows:
            if ttype != kind or currency != cur:
                continue
            b = bucket_fn(ts)
            buckets[b] = buckets.get(b, 0) + amount
        return buckets

    days = [(now - timedelta(days=i)).strftime("%Y-%m-%d") for i in reversed(range(14))]
    exp_uzs_d = [series(rows14, "expense", "uzs", day_bucket).get(d, 0.0) for d in days]
    inc_uzs_d = [series(rows14, "income", "uzs", day_bucket).get(d, 0.0) for d in days]
    exp_usd_d = [series(rows14, "expense", "usd", day_bucket).get(d, 0.0) for d in days]
    inc_usd_d = [series(rows14, "income", "usd", day_bucket).get(d, 0.0) for d in days]

    weeks = []
    tmp = now
    seen = set()
    while len(weeks) < 8:
        b = week_bucket(int(tmp.timestamp()))
        if b not in seen:
            weeks.insert(0, b); seen.add(b)
        tmp -= timedelta(days=1)

    exp_uzs_w = [series(rows8w, "expense", "uzs", week_bucket).get(w, 0.0) for w in weeks]
    inc_uzs_w = [series(rows8w, "income", "uzs", week_bucket).get(w, 0.0) for w in weeks]
    exp_usd_w = [series(rows8w, "expense", "usd", week_bucket).get(w, 0.0) for w in weeks]
    inc_usd_w = [series(rows8w, "income", "usd", week_bucket).get(w, 0.0) for w in weeks]

    lines = [
        "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "14 –¥–Ω–µ–π (UZS):",
        f"–†–∞—Å—Ö–æ–¥: {sparkline(exp_uzs_d)}",
        f"–î–æ—Ö–æ–¥:  {sparkline(inc_uzs_d)}",
        "14 –¥–Ω–µ–π (USD):",
        f"–†–∞—Å—Ö–æ–¥: {sparkline(exp_usd_d)}",
        f"–î–æ—Ö–æ–¥:  {sparkline(inc_usd_d)}",
        "8 –Ω–µ–¥–µ–ª—å (UZS):",
        f"–†–∞—Å—Ö–æ–¥: {sparkline(exp_uzs_w)}",
        f"–î–æ—Ö–æ–¥:  {sparkline(inc_uzs_w)}",
        "8 –Ω–µ–¥–µ–ª—å (USD):",
        f"–†–∞—Å—Ö–æ–¥: {sparkline(exp_usd_w)}",
        f"–î–æ—Ö–æ–¥:  {sparkline(inc_usd_w)}",
    ]
    return "\n".join(lines)

async def pdf_report_month(uid: int) -> Optional[Tuple[io.BytesIO, str]]:
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        font_path = "/tmp/DejaVuSans.ttf"
        if not os.path.exists(font_path):
            async with httpx.AsyncClient(timeout=15) as client:
                r = await client.get("https://github.com/dejavu-fonts/dejavu-fonts/raw/version_2_37/ttf/DejaVuSans.ttf")
                r.raise_for_status()
                with open(font_path, "wb") as f:
                    f.write(r.content)
        pdfmetrics.registerFont(TTFont("DejaVuSans", font_path))
        start_ts, end_ts = month_bounds_now()
        con = sqlite3.connect(DB_PATH); c = con.cursor()
        c.execute("""SELECT ttype, currency, COALESCE(SUM(amount),0)
                     FROM tx WHERE user_id=? AND ts BETWEEN ? AND ? GROUP BY ttype, currency""",
                  (uid, start_ts, end_ts))
        sums = {(t,c2): s for t,c2,s in c.fetchall()}
        c.execute("""SELECT id, ts, ttype, amount, currency, category, note
                     FROM tx WHERE user_id=? AND ts BETWEEN ? AND ? ORDER BY ts ASC""",
                  (uid, start_ts, end_ts))
        rows = c.fetchall(); con.close()
        inc_uzs = sums.get(("income","uzs"),0.0); inc_usd = sums.get(("income","usd"),0.0)
        exp_uzs = sums.get(("expense","uzs"),0.0); exp_usd = sums.get(("expense","usd"),0.0)
        buf = io.BytesIO()
        cnv = canvas.Canvas(buf, pagesize=A4)
        cnv.setFont("DejaVuSans", 12)
        w, h = A4
        y = h - 40
        cnv.drawString(40, y, "–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü"); y -= 20
        cnv.drawString(40, y, f"–î–æ—Ö–æ–¥: UZS {fmt_amount(inc_uzs,'uzs')} | USD {fmt_amount(inc_usd,'usd')}"); y -= 18
        cnv.drawString(40, y, f"–†–∞—Å—Ö–æ–¥: UZS {fmt_amount(exp_uzs,'uzs')} | USD {fmt_amount(exp_usd,'usd')}"); y -= 18
        cnv.drawString(40, y, f"–ë–∞–ª–∞–Ω—Å: UZS {fmt_amount(inc_uzs-exp_uzs,'uzs')} | USD {fmt_amount(inc_usd-exp_usd,'usd')}"); y -= 28
        cnv.drawString(40, y, "–û–ø–µ—Ä–∞—Ü–∏–∏:"); y -= 18
        cnv.setFont("DejaVuSans", 10)
        for id_, ts, ttype, amount, cur, cat, note in rows:
            line = f"#{id_} {datetime.fromtimestamp(ts, tz=TIMEZONE).strftime('%d.%m %H:%M')} ‚Ä¢ {'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'} ‚Ä¢ {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or ''}"
            cnv.drawString(40, y, line[:110])
            y -= 14
            if y < 60:
                cnv.showPage()
                cnv.setFont("DejaVuSans", 10)
                y = h - 40
        cnv.save()
        buf.seek(0)
        name = f"report_{datetime.now(TIMEZONE).strftime('%Y_%m')}.pdf"
        return buf, name
    except Exception as e:
        log.warning(f"pdf failed: {e}")
        return None

def parse_edit_command(txt: str) -> Optional[Tuple[int, Optional[float], Optional[str]]]:
    m_id = re.search(r"\b(id|#)\s*=?\s*(\d+)", txt, re.IGNORECASE)
    if not m_id:
        return None
    tx_id = int(m_id.group(2))
    new_amount = None
    new_category = None
    m_amt = re.search(r"(amount|—Å—É–º–º–∞)\s*=?\s*([\d \u00A0\.,]+)", txt, re.IGNORECASE)
    if m_amt:
        new_amount = parse_amount(m_amt.group(0))
    m_cat = re.search(r"(category|–∫–∞—Ç–µ–≥–æ—Ä(–∏—è|–∏—é|–∏–∏))\s*=?\s*([A-Za-z–ê-–Ø–∞-—è–Å—ë]+)", txt, re.IGNORECASE)
    if m_cat:
        new_category = m_cat.group(4).capitalize()
    return (tx_id, new_amount, new_category)

def update_tx(uid: int, tx_id: int, new_amount: Optional[float], new_category: Optional[str]) -> bool:
    con = sqlite3.connect(DB_PATH); c = con.cursor()
    c.execute("SELECT id FROM tx WHERE id=? AND user_id=?", (tx_id, uid))
    if not c.fetchone():
        con.close(); return False
    if new_amount is not None and new_category is not None:
        c.execute("UPDATE tx SET amount=?, category=? WHERE id=?", (new_amount, new_category, tx_id))
    elif new_amount is not None:
        c.execute("UPDATE tx SET amount=? WHERE id=?", (new_amount, tx_id))
    elif new_category is not None:
        c.execute("UPDATE tx SET category=? WHERE id=?", (new_category, tx_id))
    else:
        con.close(); return False
    con.commit(); con.close(); return True

# ---------------- UI helpers ----------------
async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    upsert_seen_user(update.effective_user.id, update.effective_user.first_name or "", update.effective_user.username)
    await update.message.reply_text("Razzakov‚Äôs Finance ü§ñ\n–ö–Ω–æ–ø–∫–∏: ¬´‚ûñ –†–∞—Å—Ö–æ–¥ / ‚ûï –î–æ—Ö–æ–¥ / –î–æ–ª–≥–∏¬ª.", reply_markup=MAIN_KB)

def tx_line(ttype: str, amount: float, cur: str, cat: str, note: Optional[str], ts: int) -> str:
    dt = datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%d.%m %H:%M")
    sign = "‚ûï" if ttype == "income" else "‚ûñ"
    return f"{dt} {sign} {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or '-'}"

def users_summary_text() -> str:
    if not ALLOWED_USER_IDS:
        return "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –†–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."
    lines = ["–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID):"]
    for uid in sorted(ALLOWED_USER_IDS):
        marker = " ‚Üê –∞–¥–º–∏–Ω" if ADMIN_USER_ID and uid == ADMIN_USER_ID else ""
        lines.append(f"‚Ä¢ {uid}{marker}")
    return "\n".join(lines)

async def send_history(update: Update, uid: int, limit: int = 10):
    rows = last_txs(uid, limit)
    if not rows:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB); return
    lines = [f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ({len(rows)}):"]
    for id_, ttype, amount, cur, cat, note, ts in rows:
        lines.append(f"#{id_} " + tx_line(ttype, amount, cur, cat, note, ts))
    await update.message.reply_text("\n".join(lines), reply_markup=MAIN_KB)

# ---------------- Router ----------------
async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    txt = (update.message.text or "").strip()
    low = txt.lower()

    if not is_authorized(uid):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    upsert_seen_user(uid, update.effective_user.first_name or "", update.effective_user.username)

    # Debts flow (supports one-line "5000 usd Roni")
    debts = context.user_data.get("debts")
    if debts:
        stage = debts.get("stage")
        if txt == BACK_BTN:
            context.user_data.pop("debts", None)
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KB)
            return

        if stage == "menu":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=debts_menu_kb())
            return

        if stage == "add_counterparty":
            amt = parse_amount(txt)
            if amt is not None:
                cur = detect_currency(txt)
                who = debts.get("counterparty") or extract_counterparty_from_text(txt) or "‚Äî"
                add_debt(uid, debts["direction"], who, amt, cur, txt)
                now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
                msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
                      f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
                      f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
                      f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
                await update.message.reply_text(msg, reply_markup=debts_menu_kb())
                debts["stage"] = "menu"
            else:
                debts["counterparty"] = txt
                debts["stage"] = "add_amount"
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 000 –¥–æ–ª–≥ –∑–∞ –æ–±–µ–¥).",
                                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
            return

        if stage == "add_amount":
            amt = parse_amount(txt)
            if amt is None:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 25 000 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
                                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
                return
            cur = detect_currency(txt)
            who = debts.get("counterparty") or extract_counterparty_from_text(txt) or "‚Äî"
            add_debt(uid, debts["direction"], who, amt, cur, txt)
            now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
            msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
                  f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
                  f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
                  f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
            await update.message.reply_text(msg, reply_markup=debts_menu_kb())
            debts["stage"] = "menu"
            return

        if stage == "close_ask_id":
            m = re.search(r"(\d+)", txt)
            if not m:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb())
                return
            ok = close_debt(uid, int(m.group(1)))
            await update.message.reply_text("–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
            debts["stage"] = "menu"
            return

        if stage == "reduce_ask_id":
            m = re.search(r"(\d+)", txt)
            if not m:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb())
                return
            debts["reduce_id"] = int(m.group(1))
            debts["stage"] = "reduce_ask_amount"
            await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 000)",
                                            reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
            return

        if stage == "reduce_ask_amount":
            amt = parse_amount(txt)
            if amt is None or amt <= 0:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 50 000",
                                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
                return
            res = reduce_debt(uid, debts.get("reduce_id", 0), amt)
            if not res:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
            else:
                new_amount, cur, status = res
                if status == "closed":
                    await update.message.reply_text("–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.", reply_markup=debts_menu_kb())
                else:
                    await update.message.reply_text(f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(new_amount,cur)} {cur.upper()}",
                                                    reply_markup=debts_menu_kb())
            debts["stage"] = "menu"
            debts.pop("reduce_id", None)
            return

    # Enter debts menu
    if low == "–¥–æ–ª–≥–∏":
        context.user_data["debts"] = {"stage":"menu"}
        await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=debts_menu_kb()); return
    if low == "‚ûï —è –¥–æ–ª–∂–µ–Ω":
        context.user_data["debts"] = {"stage":"add_counterparty", "direction":"i_owe"}
        await update.message.reply_text("–ö–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd –ò–≤–∞–Ω¬ª.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
    if low == "‚ûï –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
        context.user_data["debts"] = {"stage":"add_counterparty", "direction":"they_owe"}
        await update.message.reply_text("–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd Roni¬ª.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
    if low == "üìú —è –¥–æ–ª–∂–µ–Ω":
        await update.message.reply_text(debts_list_text(uid, "i_owe"), reply_markup=debts_menu_kb()); return
    if low == "üìú –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
        await update.message.reply_text(debts_list_text(uid, "they_owe"), reply_markup=debts_menu_kb()); return

    # Step-by-step income/expense flow (optional)
    flow = context.user_data.get("flow")
    if flow:
        stage = flow.get("stage"); ttype = flow.get("ttype")
        if txt == BACK_BTN:
            context.user_data.pop("flow", None)
            await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KB); return
        if stage == "choose_category":
            options = EXPENSE_CATEGORIES if ttype == "expense" else INCOME_CATEGORIES
            if txt in options:
                flow["category"] = txt
                flow["stage"] = "await_amount"
                await update.message.reply_text(f"–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è ¬´{txt}¬ª. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ.", reply_markup=amount_kb())
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=categories_kb(ttype))
            return
        if stage == "await_amount":
            amount = parse_amount(txt)
            if amount is None:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 25 000 –∏–ª–∏ 25 000 –æ–±–µ–¥.", reply_markup=amount_kb()); return
            cur = detect_currency(txt)
            cat = flow.get("category") or "–ü—Ä–æ—á–µ–µ"
            tx_id = add_tx(uid, ttype, amount, cur, cat, txt)
            context.user_data.pop("flow", None)
            await update.message.reply_text(f"{'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'}: {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#{tx_id})", reply_markup=MAIN_KB)
            if ttype == "expense":
                await maybe_warn_budget(update, uid, cat, cur)
            ai_tip = ai_hint_after_tx(uid, ttype, cur, cat)
            await send_and_pin_summary(update, context, uid, ai_tip)
            return

    if low == "‚ûñ —Ä–∞—Å—Ö–æ–¥" or low == "—Ä–∞—Å—Ö–æ–¥":
        context.user_data["flow"] = {"stage":"choose_category","ttype":"expense"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=categories_kb("expense")); return
    if low == "‚ûï –¥–æ—Ö–æ–¥" or low == "–¥–æ—Ö–æ–¥":
        context.user_data["flow"] = {"stage":"choose_category","ttype":"income"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=categories_kb("income")); return

    # Other features
    if "–±–∞–ª–∞–Ω—Å" in low:
        await update.message.reply_text(balance_with_debts_text(uid), reply_markup=MAIN_KB); return
    if "–∏—Å—Ç–æ—Ä–∏—è" in low:
        await send_history(update, uid, 10); return
    if "–æ—Ç—á—ë—Ç" in low or "–æ—Ç—á–µ—Ç" in low:
        msg = await month_report_text(uid)
        await update.message.reply_text(msg, reply_markup=MAIN_KB); return
    if "—ç–∫—Å–ø–æ—Ä—Ç" in low:
        csv_b, csv_name, xl_b, xl_name = export_month(uid)
        await update.message.reply_document(document=csv_b, filename=csv_name)
        if xl_name:
            await update.message.reply_document(document=xl_b, filename=xl_name)
        return
    if "pdf" in low:
        pdf = await pdf_report_month(uid)
        if pdf:
            buf, name = pdf; await update.message.reply_document(document=buf, filename=name)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF —Å–µ–π—á–∞—Å.")
        return
    if "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª" in low:
        await update.message.reply_text(users_summary_text(), reply_markup=MAIN_KB); return

    if "–∫—É—Ä—Å" in low:
        rate = await fetch_usd_uzs_rate()
        uzs, usd = get_balance(uid)
        lines = []
        if rate:
            total_uzs = uzs + usd * rate
            total_usd = usd + (uzs / rate)
            lines.append(f"–ö—É—Ä—Å: 1 USD = {rate:,.0f} UZS".replace(",", " "))
            lines.append(f"–°–≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å: ‚âà {fmt_amount(total_uzs,'uzs')} UZS | ‚âà {total_usd:.2f} USD")
        else:
            lines.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–∫–∞–∑—ã–≤–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.")
        lines.append(balance_with_debts_text(uid))
        await update.message.reply_text("\n".join(lines)); return

    # Free text transaction
    ttype, amount, cur, cat = ai_classify_finance(txt)
    if amount is not None:
        tx_id = add_tx(uid, ttype, amount, cur, cat, txt)
        await update.message.reply_text(f"{'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'}: {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#{tx_id})", reply_markup=MAIN_KB)
        if ttype == "expense":
            await maybe_warn_budget(update, uid, cat, cur)
        ai_tip = ai_hint_after_tx(uid, ttype, cur, cat)
        await send_and_pin_summary(update, context, uid, ai_tip)
        return

    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ –ù–∞–ø–∏—à–∏: ¬´—Ç–∞–∫—Å–∏ 25 000¬ª, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.", reply_markup=MAIN_KB)

async def unknown_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç—Ä–∞—Ç—ã/–¥–æ—Ö–æ–¥.", reply_markup=MAIN_KB)

# ---------------- Main ----------------
def main():
    token = DEFAULT_BOT_TOKEN
    # Start healthcheck HTTP server (so Railway Web stays green)
    Thread(target=start_healthcheck_server, daemon=True).start()

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))

    # Optional scheduled jobs (requires python-telegram-bot[job-queue])
    try:
        from telegram.ext import JobQueue  # noqa: F401
        schedule_daily_jobs(app)
        load_and_schedule_all_reminders(app)
    except Exception:
        log.info("JobQueue extras not installed; skipping scheduled jobs")

    log.info("Starting polling")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
