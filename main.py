# -*- coding: utf-8 -*-
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, CallbackQueryHandler, filters, JobQueue
)
from ai_helper import parse_free_text, parse_due
from db import DB

# === –¢–û–ö–ï–ù (–Ω–æ–≤—ã–π) ===
TOKEN = "7611168200:AAHj7B6FelvvcoJMDBuKwKpveBHEo0NItnI"

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ username)
OWNER_USERNAMES = ["SukhrobAbdurazzakov", "revivemd"]

db = DB("data.sqlite")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ADD_AMOUNT, ADD_CATEGORY, ADD_NOTE, DEBT_CP, DEBT_AMOUNT, DEBT_DUE, DEBT_NOTE, DEBT_CLOSE_ID = range(8)

EXPENSE_CATS = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ñ–∏–ª—å—ë", "–°–≤—è–∑—å/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ó–¥–æ—Ä–æ–≤—å–µ", "–û–¥–µ–∂–¥–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ü–æ–¥–∞—Ä–∫–∏", "–î—Ä—É–≥–æ–µ"]
INCOME_CATS  = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ë–æ–Ω—É—Å", "–ü–æ–¥–∞—Ä–æ–∫", "–î—Ä—É–≥–æ–µ"]

def menu_kb():
    rows = [
        ["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"],
        ["üí∞ –ë–∞–ª–∞–Ω—Å", "üìí –ò—Å—Ç–æ—Ä–∏—è"],
        ["üìä –û—Ç—á—ë—Ç", "ü§ù –î–µ–±–∏—Ç–æ—Ä—ã"],
        ["üí≥ –ö—Ä–µ–¥–∏—Ç–æ—Ä—ã"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def cat_kb(mode: str):
    cats = INCOME_CATS if mode == "income" else EXPENSE_CATS
    rows = [cats[i:i+3] for i in range(0, len(cats), 3)]
    rows.append(["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def is_allowed(update: Update) -> bool:
    u = update.effective_user
    if not u:
        return False
    if u.username and u.username in OWNER_USERNAMES:
        return True
    return db.is_allowed(u.id)

# ---------------- –ë–ê–ó–ê ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        if db.allow_count() < 2:
            db.allow(update.effective_user.id)
        else:
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            return
    await update.message.reply_text("–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb())

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    inc, exp, net = db.get_balance(update.effective_user.id)
    rec, pay = db.get_debt_totals(update.effective_user.id)
    txt = (
        f"–î–æ—Ö–æ–¥—ã: {inc:.2f}\n–†–∞—Å—Ö–æ–¥—ã: {exp:.2f}\n–ò—Ç–æ–≥–æ: {net:.2f}\n"
        f"–î–µ–±–∏—Ç–æ—Ä—ã (–≤–∞–º –¥–æ–ª–∂–Ω—ã): {rec:.2f}\n–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã (–≤—ã –¥–æ–ª–∂–Ω—ã): {pay:.2f}"
    )
    await update.message.reply_text(txt, reply_markup=menu_kb())

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    rows = db.last_tx(update.effective_user.id, 20)
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.", reply_markup=menu_kb()); return
    lines = []
    for r in rows:
        sign = "+" if r["type"] == "income" else "-"
        when = datetime.fromtimestamp(r["created_at"]/1000).strftime("%Y-%m-%d %H:%M")
        cat = r["category"] or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        lines.append(f"{when} ‚Ä¢ {sign}{r['amount']} {r['currency']} ‚Ä¢ {cat}")
    await update.message.reply_text("\n".join(lines), reply_markup=menu_kb())

# -------- –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ --------
async def ask_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    context.user_data.clear(); context.user_data["mode"] = "income"
    await update.message.reply_text(
        "–î–æ—Ö–æ–¥: —Å—É–º–º–∞ (–Ω–∞–ø—Ä. 120000 –∏–ª–∏ 20 USD):",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return ADD_AMOUNT

async def ask_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    context.user_data.clear(); context.user_data["mode"] = "expense"
    await update.message.reply_text(
        "–†–∞—Å—Ö–æ–¥: —Å—É–º–º–∞ (–Ω–∞–ø—Ä. 120000 –∏–ª–∏ 20 USD):",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return ADD_AMOUNT

async def got_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    txt = update.message.text or ""
    if txt.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb()); return ConversationHandler.END
    p = parse_free_text(txt)
    if not p.get("amount"):
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å—É–º–º—É. –ï—â—ë —Ä–∞–∑ –∏–ª–∏ –û—Ç–º–µ–Ω–∞:"); return ADD_AMOUNT
    context.user_data["amount"] = float(p["amount"])
    context.user_data["currency"] = p.get("currency", "UZS")
    if p.get("category"):
        context.user_data["category"] = p["category"]
        await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ):"); return ADD_NOTE
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=cat_kb(context.user_data["mode"])
    )
    return ADD_CATEGORY

async def got_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    cat = update.message.text or ""
    if cat == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data["category"] = None
    else:
        context.user_data["category"] = cat
    await update.message.reply_text(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ):",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return ADD_NOTE

async def got_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    note = update.message.text or None
    db.add_tx(
        update.effective_user.id,
        context.user_data.get("mode"),
        float(context.user_data.get("amount", 0)),
        context.user_data.get("currency", "UZS"),
        context.user_data.get("category"),
        note,
    )
    await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=menu_kb())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb())
    return ConversationHandler.END

# ------------- –û—Ç—á—ë—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º -------------
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    now = datetime.now()
    start = datetime(now.year, now.month, 1)
    end = (start + timedelta(days=32)).replace(day=1)
    s_ms, e_ms = int(start.timestamp()*1000), int(end.timestamp()*1000)

    ei = db.totals_by_category(update.effective_user.id, "income", s_ms, e_ms)
    ee = db.totals_by_category(update.effective_user.id, "expense", s_ms, e_ms)

    lines = ["üìä –û—Ç—á—ë—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:"]
    if ei:
        lines.append("\n–î–æ—Ö–æ–¥—ã:")
        for r in ei:
            lines.append(f"‚Ä¢ {r['cat']}: {r['s']:.2f}")
    if ee:
        lines.append("\n–†–∞—Å—Ö–æ–¥—ã:")
        for r in ee:
            lines.append(f"‚Ä¢ {r['cat']}: {r['s']:.2f}")
    if not ei and not ee:
        lines.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    await update.message.reply_text("\n".join(lines), reply_markup=menu_kb())

# -------- –î–µ–±–∏—Ç–æ—Ä—ã/–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã --------
def debt_menu_markup(kind: str):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π", callback_data=f"debt_{kind}_new"),
         InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—ã–µ", callback_data=f"debt_{kind}_list")],
        [InlineKeyboardButton("‚úÖ –ü–æ–≥–∞—Å–∏—Ç—å", callback_data=f"debt_{kind}_close"),
         InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data=f"debt_{kind}_balance")],
    ])

async def debtors_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    await update.message.reply_text("–î–µ–±–∏—Ç–æ—Ä—ã ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb())
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=debt_menu_markup("receivable"))

async def creditors_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    await update.message.reply_text("–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_kb())
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=debt_menu_markup("payable"))

async def debt_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): await update.callback_query.answer(); return
    q = update.callback_query; await q.answer()
    data = q.data
    if data.endswith("_new"):
        kind = "receivable" if "receivable" in data else "payable"
        context.user_data.clear(); context.user_data["debt_kind"] = kind
        await q.message.reply_text("–ò–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return DEBT_CP
    elif data.endswith("_list"):
        kind = "receivable" if "receivable" in data else "payable"
        rows = db.open_debts(update.effective_user.id, kind)
        if not rows: await q.message.reply_text("–û—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç.")
        else:
            lines = [f"ID#{r['id']} ‚Ä¢ {r['cp_name']} ‚Ä¢ {r['amount']} {r['currency']} ‚Ä¢ "
                     f"–¥–æ {datetime.fromtimestamp(r['due_date']/1000).strftime('%d.%m.%Y') if r['due_date'] else '‚Äî'}"
                     for r in rows]
            await q.message.reply_text("\n".join(lines))
    elif data.endswith("_close"):
        context.user_data.clear()
        await q.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –¥–æ–ª–≥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return DEBT_CLOSE_ID
    elif data.endswith("_balance"):
        kind = "receivable" if "receivable" in data else "payable"
        total = db.debt_total(update.effective_user.id, kind)
        label = "–≤–∞–º –¥–æ–ª–∂–Ω—ã" if kind=="receivable" else "–≤—ã –¥–æ–ª–∂–Ω—ã"
        await q.message.reply_text(f"–í—Å–µ–≥–æ {label}: {total:.2f}")

async def debt_get_cp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    t = update.message.text or ""
    if t.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb()); return ConversationHandler.END
    context.user_data["cp_name"] = t.strip()
    await update.message.reply_text("–°—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 20 USD):"); return DEBT_AMOUNT

async def debt_get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    p = parse_free_text(update.message.text or "")
    if not p.get("amount"):
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Å—É–º–º—É. –ï—â—ë —Ä–∞–∑:"); return DEBT_AMOUNT
    context.user_data["amount"] = float(p["amount"])
    context.user_data["currency"] = p.get("currency","UZS")
    await update.message.reply_text("–°—Ä–æ–∫ (–¥–¥.–º–º.–≥–≥–≥–≥) –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'/'–∑–∞–≤—Ç—Ä–∞', '-' –±–µ–∑ —Å—Ä–æ–∫–∞:"); return DEBT_DUE

async def debt_get_due(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    t = (update.message.text or "").strip()
    due_ts = None if t == "-" else parse_due(t)
    if t != "-" and due_ts is None:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –î–¥.–º–º.–≥–≥–≥–≥ / —Å–µ–≥–æ–¥–Ω—è / –∑–∞–≤—Ç—Ä–∞ / '-':"); return DEBT_DUE
    context.user_data["due_ts"] = due_ts
    await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ):"); return DEBT_NOTE

async def debt_get_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    d = context.user_data
    db.add_debt(update.effective_user.id, d["debt_kind"], d["cp_name"], d["amount"], d["currency"], update.message.text or None, d.get("due_ts"))
    await update.message.reply_text("‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=menu_kb())
    return ConversationHandler.END

async def debt_close_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return ConversationHandler.END
    t = (update.message.text or "").strip()
    if t.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb()); return ConversationHandler.END
    try:
        debt_id = int(t.lstrip("#"))
    except:
        await update.message.reply_text("–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π ID. –ï—â—ë —Ä–∞–∑ –∏–ª–∏ –û—Ç–º–µ–Ω–∞:"); return DEBT_CLOSE_ID
    ok = db.close_debt(update.effective_user.id, debt_id)
    await update.message.reply_text("‚úÖ –ó–∞–∫—Ä—ã—Ç–æ." if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ–ª–≥ —Å —Ç–∞–∫–∏–º ID.", reply_markup=menu_kb())
    return ConversationHandler.END

# ---------- –ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å ----------
async def quick_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update): return
    p = parse_free_text(update.message.text or "")
    if p.get("amount"):
        db.add_tx(
            update.effective_user.id,
            p.get("mode","expense"),
            float(p["amount"]),
            p.get("currency","UZS"),
            p.get("category"),
            p.get("note"),
        )
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–ª. –ù–∞–ø–∏—à–∏—Ç–µ '–±–∞–ª–∞–Ω—Å', '–∏—Å—Ç–æ—Ä–∏—è' –∏–ª–∏ '–æ—Ç—á—ë—Ç'.", reply_markup=menu_kb())
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–º–µ–Ω—é'.", reply_markup=menu_kb())

# ---------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (JobQueue) ----------
async def notify_overdues(context: ContextTypes.DEFAULT_TYPE):
    for uid in db.list_allowed_ids():
        rows = db.overdue_debts(uid)
        if not rows: continue
        lines = [
            f"ID#{r['id']} ‚Ä¢ {r['cp_name']} ‚Ä¢ {r['amount']} {r['currency']} ‚Ä¢ "
            f"—Å—Ä–æ–∫ –±—ã–ª {datetime.fromtimestamp(r['due_date']/1000).strftime('%d.%m.%Y')}"
            for r in rows
        ]
        try:
            await context.bot.send_message(uid, "üîî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏:\n" + "\n".join(lines))
        except Exception as e:
            print("notify error:", e)

async def _post_init(app: Application):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        print("delete_webhook warning:", e)

    try:
        if app.job_queue is None:
            jq = JobQueue(loop=asyncio.get_running_loop())
            jq.set_application(app)
            app.job_queue = jq
        app.job_queue.run_repeating(notify_overdues, interval=60*60*12, first=60)
    except Exception as e:
        print("JobQueue disabled:", e)

def build_app() -> Application:
    app = ApplicationBuilder().token(TOKEN).post_init(_post_init).build()

    conv_tx = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^\+|^‚ûï|^–î–æ—Ö–æ–¥$"), ask_income),
            MessageHandler(filters.Regex(r"^\-|^‚ûñ|^–†–∞—Å—Ö–æ–¥$"), ask_expense),
        ],
        states={
            ADD_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, got_amount)],
            ADD_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, got_category)],
            ADD_NOTE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, got_note)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    conv_debt = ConversationHandler(
        entry_points=[CallbackQueryHandler(debt_cb, pattern=r"^debt_")],
        states={
            DEBT_CP:       [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_get_cp)],
            DEBT_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_get_amount)],
            DEBT_DUE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_get_due)],
            DEBT_NOTE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_get_note)],
            DEBT_CLOSE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, debt_close_id)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_chat=True,
        per_user=True,
        per_message=False,
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r"^(–ú–µ–Ω—é|–º–µ–Ω—é)$"), menu))
    app.add_handler(MessageHandler(filters.Regex(r"^üí∞|^–ë–∞–ª–∞–Ω—Å$"), balance))
    app.add_handler(MessageHandler(filters.Regex(r"^üìí|^–ò—Å—Ç–æ—Ä–∏—è$"), history))
    app.add_handler(MessageHandler(filters.Regex(r"^üìä –û—Ç—á—ë—Ç$|^–æ—Ç—á(–µ|—ë)—Ç$"), report))
    app.add_handler(MessageHandler(filters.Regex(r"^ü§ù –î–µ–±–∏—Ç–æ—Ä—ã$"), debtors_entry))
    app.add_handler(MessageHandler(filters.Regex(r"^üí≥ –ö—Ä–µ–¥–∏—Ç–æ—Ä—ã$"), creditors_entry))
    app.add_handler(conv_tx)
    app.add_handler(conv_debt)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, quick_add))
    return app

def main():
    app = build_app()
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()


