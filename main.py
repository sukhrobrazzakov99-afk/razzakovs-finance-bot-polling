# main.py
# Finance Razzakov's ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–æ—Ç —É—á—ë—Ç–∞
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: python-telegram-bot[webhooks,job-queue]==20.8, aiosqlite (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), sqlite3 –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ

import os
import re
import csv
import io
import sqlite3
from datetime import datetime, date

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InputFile,
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackContext,
    ContextTypes,
    filters,
)

# ==========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ==========================
BOT_TOKEN = os.getenv("BOT_TOKEN") or "7611168200:AAHj7B6FelvvcoJMDBuKwKpveBHEo0NItnI"

WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://secure-consideration-production.up.railway.app
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fr_webhook_secret")
PORT = int(os.getenv("PORT", "8080"))
HOST = "0.0.0.0"

DB_PATH = os.getenv("DB_PATH", "finance.db")

# ==========================
# –ë–ê–ó–ê
# ==========================
def db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn


def init_db() -> None:
    conn = db()
    cur = conn.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            ttype TEXT NOT NULL CHECK(ttype IN ('income','expense')),
            amount REAL NOT NULL,
            currency TEXT,
            note TEXT,
            created_at TEXT NOT NULL
        )
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS debts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            amount REAL NOT NULL,
            due_date TEXT,               -- YYYY-MM-DD
            role TEXT NOT NULL CHECK(role IN ('debtor','creditor')), -- debtor: –Ω–∞–º –¥–æ–ª–∂–Ω—ã, creditor: –º—ã –¥–æ–ª–∂–Ω—ã
            status TEXT NOT NULL DEFAULT 'open', -- open / closed
            created_at TEXT NOT NULL
        )
        """
    )
    conn.commit()
    conn.close()


# ==========================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ==========================
MAIN_KB = ReplyKeyboardMarkup(
    [
        ["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"],
        ["üí∞ –ë–∞–ª–∞–Ω—Å", "üìú –ò—Å—Ç–æ—Ä–∏—è"],
        ["üìÑ Excel", "ü§ñ AI"],
        ["üí≥ –î–æ–ª–∂–Ω–∏–∫–∏/–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã"],
    ],
    resize_keyboard=True,
)

DEBT_KB = ReplyKeyboardMarkup(
    [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥", "üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤"],
        ["‚úÖ –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
    ],
    resize_keyboard=True,
)

# ==========================
# –£–¢–ò–õ–ò–¢–´
# ==========================
def parse_amount_and_note(text: str):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    –ü—Ä–∏–º–µ—Ä: "–µ–¥–∞ 150000 uzs" -> amount=150000, currency="uzs", note="–µ–¥–∞"
    """
    tokens = text.strip().split()
    amount = None
    currency = None

    # –∏—â–µ–º —á–∏—Å–ª–æ
    for tok in tokens:
        # 150000, 150000.50
        if re.fullmatch(r"\d+(?:[.,]\d+)?", tok):
            try:
                amount = float(tok.replace(",", "."))
                break
            except Exception:
                pass

    # –∏—â–µ–º –≤–∞–ª—é—Ç—É (uzs, usd, rub, —Å—É–º, $ –∏ —Ç.–ø.)
    # –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —Å—É–º–º—ã
    # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º None
    if amount is not None:
        idx = tokens.index(tok)
        if idx + 1 < len(tokens):
            cur = tokens[idx + 1].lower()
            cur = cur.replace("—Å—É–º", "uzs").replace("$", "usd").replace("‚ÇΩ", "rub")
            currency = cur

    note_parts = []
    for t in tokens:
        if t != tok and (currency is None or t.lower() != currency):
            note_parts.append(t)
    note = " ".join(note_parts).strip()

    return amount, currency, note


def add_transaction(user_id: int, ttype: str, amount: float, currency: str, note: str):
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO transactions (user_id, ttype, amount, currency, note, created_at) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, ttype, amount, currency, note, datetime.utcnow().isoformat()),
    )
    conn.commit()
    conn.close()


def get_balance(user_id: int):
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "SELECT COALESCE(SUM(amount),0) FROM transactions WHERE user_id=? AND ttype='income'",
        (user_id,),
    )
    inc = cur.fetchone()[0] or 0
    cur.execute(
        "SELECT COALESCE(SUM(amount),0) FROM transactions WHERE user_id=? AND ttype='expense'",
        (user_id,),
    )
    exp = cur.fetchone()[0] or 0
    conn.close()
    return inc, exp, inc - exp


def get_history(user_id: int, limit=10):
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "SELECT ttype, amount, currency, note, created_at FROM transactions WHERE user_id=? ORDER BY id DESC LIMIT ?",
        (user_id, limit),
    )
    rows = cur.fetchall()
    conn.close()
    return rows


def export_csv(user_id: int) -> bytes:
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "SELECT id, ttype, amount, currency, note, created_at FROM transactions WHERE user_id=? ORDER BY id",
        (user_id,),
    )
    rows = cur.fetchall()
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["id", "type", "amount", "currency", "note", "created_at"])
    for r in rows:
        writer.writerow([r["id"], r["ttype"], r["amount"], r["currency"], r["note"], r["created_at"]])
    conn.close()
    return output.getvalue().encode("utf-8")


def add_debt(user_id: int, name: str, amount: float, due: str | None, role: str):
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO debts (user_id, name, amount, due_date, role, status, created_at) VALUES (?,?,?,?,?,'open',?)",
        (user_id, name, amount, due, role, datetime.utcnow().isoformat()),
    )
    conn.commit()
    conn.close()


def list_open_debts(user_id: int):
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "SELECT id, name, amount, due_date, role, status FROM debts WHERE user_id=? AND status='open' ORDER BY id DESC",
        (user_id,),
    )
    rows = cur.fetchall()
    conn.close()
    return rows


def close_debt(user_id: int, debt_id: int):
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "UPDATE debts SET status='closed' WHERE user_id=? AND id=?",
        (user_id, debt_id),
    )
    conn.commit()
    conn.close()


# ==========================
# –•–ï–ù–î–õ–ï–†–´
# ==========================
ASK_AMOUNT = range(1)
ASK_DEBT = range(1)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å/—Ñ—Ä–∞–∑—É ‚Äî –æ—Ç–≤–µ—á—É –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–ì–æ—Ç–æ–≤–æ. –ó–∞–ø–∏—Å–∏ —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: '–µ–¥–∞ 150000 uzs'.",
        reply_markup=MAIN_KB,
    )


async def ai_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ–π –±–æ–ª—Ç–∞–ª–∫–∞-–∑–∞–≥–ª—É—à–∫–∞ (–±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –ò–ò)
    text = update.message.text.strip()
    await update.message.reply_text(f"ü§ñ –ü–æ–Ω—è–ª: ¬´{text}¬ª. –ü–æ–∫–∞ –æ—Ç–≤–µ—á–∞—é –∫—Ä–∞—Ç–∫–æ ‚Äî –º–æ–¥—É–ª—å AI –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ.")


# ---- –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ (–¥–∏–∞–ª–æ–≥ 1 —à–∞–≥ ‚Äî –≤–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É) ----
async def income_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ttype"] = "income"
    await update.message.reply_text("–°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 150000 uzs –∏–ª–∏ 20 usd)", reply_markup=ReplyKeyboardRemove())
    return ASK_AMOUNT


async def expense_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ttype"] = "expense"
    await update.message.reply_text("–°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞ (–ø—Ä–∏–º–µ—Ä: 150000 uzs –∏–ª–∏ 20 usd)", reply_markup=ReplyKeyboardRemove())
    return ASK_AMOUNT


async def amount_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ttype = context.user_data.get("ttype")
    text = update.message.text
    amount, currency, note = parse_amount_and_note(text)

    if not amount:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª —Å—É–º–º—É. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: 150000 uzs\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel.")
        return ASK_AMOUNT

    add_transaction(update.message.from_user.id, ttype, amount, currency or "", note)
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª ‚úÖ", reply_markup=MAIN_KB)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
    return ConversationHandler.END


# ---- –ë–∞–ª–∞–Ω—Å ----
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    inc, exp, bal = get_balance(update.message.from_user.id)
    await update.message.reply_text(
        f"–î–æ—Ö–æ–¥: {inc:.2f}\n–†–∞—Å—Ö–æ–¥: {exp:.2f}\n------\n–ë–∞–ª–∞–Ω—Å: {bal:.2f}",
        reply_markup=MAIN_KB,
    )


# ---- –ò—Å—Ç–æ—Ä–∏—è ----
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = get_history(update.message.from_user.id, 10)
    if not rows:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB)
        return
    lines = []
    for r in rows:
        t = "–î–æ—Ö–æ–¥" if r["ttype"] == "income" else "–†–∞—Å—Ö–æ–¥"
        note = (r["note"] or "").strip()
        cur = (r["currency"] or "").upper()
        when = r["created_at"].split("T")[0]
        lines.append(f"{when} ¬∑ {t}: {r['amount']:.2f} {cur} ¬∑ {note}")
    await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(lines), reply_markup=MAIN_KB)


# ---- Excel (CSV) ----
async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = export_csv(update.message.from_user.id)
    bio = io.BytesIO(data)
    bio.name = "transactions.csv"
    await update.message.reply_document(document=InputFile(bio), caption="–≠–∫—Å–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ü–∏–π (CSV).", reply_markup=MAIN_KB)


# ---- –î–û–õ–ñ–ù–ò–ö–ò/–ö–†–ï–î–ò–¢–û–†–´ ----
async def debt_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–ª–∂–Ω–∏–∫–∏/–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã:\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥ ‚Äî —Ñ–æ—Ä–º–∞—Ç: –ò–º—è –°—É–º–º–∞ [YYYY-MM-DD], –¥–∞–ª–µ–µ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å.\n"
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤ ‚Äî –ø–æ–∫–∞–∂—É –æ—Ç–∫—Ä—ã—Ç—ã–µ.\n"
        "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥ ‚Äî —É–∫–∞–∂–∏ ID –∏–∑ —Å–ø–∏—Å–∫–∞.",
        reply_markup=DEBT_KB,
    )


async def debt_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –ò–º—è –°—É–º–º–∞ [YYYY-MM-DD]\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω 150000 2025-08-25",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASK_DEBT


async def debt_add_parse(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    parts = text.split()
    if len(parts) < 2:
        await update.message.reply_text("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –ò–º—è –∏ –°—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.")
        return ASK_DEBT

    name = parts[0]
    try:
        amount = float(parts[1].replace(",", "."))
    except Exception:
        await update.message.reply_text("–°—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.")
        return ASK_DEBT

    due = None
    if len(parts) >= 3:
        # –ø—Ä–æ–±—É–µ–º YYYY-MM-DD
        try:
            _ = datetime.strptime(parts[2], "%Y-%m-%d")
            due = parts[2]
        except Exception:
            due = None

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å
    context.user_data["new_debt"] = {"name": name, "amount": amount, "due": due}
    kb = ReplyKeyboardMarkup([["–ù–∞–º –¥–æ–ª–∂–Ω—ã (–¥–µ–±–∏—Ç–æ—Ä)", "–ú—ã –¥–æ–ª–∂–Ω—ã (–∫—Ä–µ–¥–∏—Ç–æ—Ä)"]], resize_keyboard=True)
    await update.message.reply_text("–ö—Ç–æ –∫–æ–º—É –¥–æ–ª–∂–µ–Ω?", reply_markup=kb)
    return ASK_DEBT


async def debt_add_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip().lower()
    data = context.user_data.get("new_debt")
    if not data:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. /cancel", reply_markup=MAIN_KB)
        return ConversationHandler.END

    if "–¥–µ–±–∏—Ç–æ—Ä" in choice or "–Ω–∞–º –¥–æ–ª–∂–Ω—ã" in choice:
        role = "debtor"
    elif "–∫—Ä–µ–¥–∏—Ç–æ—Ä" in choice or "–º—ã –¥–æ–ª–∂–Ω—ã" in choice:
        role = "creditor"
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ /cancel.")
        return ASK_DEBT

    add_debt(update.message.from_user.id, data["name"], data["amount"], data["due"], role)
    await update.message.reply_text("–î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=DEBT_KB)
    context.user_data.pop("new_debt", None)
    return ConversationHandler.END


async def debt_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = list_open_debts(update.message.from_user.id)
    if not rows:
        await update.message.reply_text("–û—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç.", reply_markup=DEBT_KB)
        return
    lines = []
    for r in rows:
        role = "–Ω–∞–º –¥–æ–ª–∂–Ω—ã" if r["role"] == "debtor" else "–º—ã –¥–æ–ª–∂–Ω—ã"
        due = r["due_date"] or "‚Äî"
        lines.append(f"ID {r['id']}: {r['name']} ¬∑ {r['amount']:.2f} ¬∑ {role} ¬∑ —Å—Ä–æ–∫: {due}")
    await update.message.reply_text("–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ–ª–≥–∏:\n" + "\n".join(lines), reply_markup=DEBT_KB)


async def debt_close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–£–∫–∞–∂–∏ ID –¥–æ–ª–≥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–∏–∑ —Å–ø–∏—Å–∫–∞).", reply_markup=ReplyKeyboardRemove())
    context.user_data["close_wait"] = True


async def debt_close_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("close_wait"):
        return
    text = update.message.text.strip()
    if not re.fullmatch(r"\d+", text):
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.")
        return
    close_debt(update.message.from_user.id, int(text))
    context.user_data.pop("close_wait", None)
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ", reply_markup=DEBT_KB)


# ---- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –¥–æ–ª–≥–∞–º ----
async def notify_overdues(context: CallbackContext):
    """
    –†–∞–∑ –≤ 12 —á–∞—Å–æ–≤: –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–∞—Ö (open + due_date < —Å–µ–≥–æ–¥–Ω—è).
    """
    conn = db()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT user_id, id, name, amount, due_date, role
        FROM debts
        WHERE status='open' AND due_date IS NOT NULL
        """
    )
    rows = cur.fetchall()
    conn.close()

    today = date.today()
    for r in rows:
        try:
            due = datetime.strptime(r["due_date"], "%Y-%m-%d").date()
        except Exception:
            continue
        if due < today:
            role = "–Ω–∞–º –¥–æ–ª–∂–Ω—ã" if r["role"] == "debtor" else "–º—ã –¥–æ–ª–∂–Ω—ã"
            msg = f"‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –¥–æ–ª–≥ (ID {r['id']}): {r['name']} ¬∑ {r['amount']:.2f} ¬∑ {role} ¬∑ —Å—Ä–æ–∫ –±—ã–ª {r['due_date']}"
            await context.bot.send_message(chat_id=r["user_id"], text=msg)


# ==========================
# POST INIT: —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º JobQueue
# ==========================
from telegram.ext import Application  # —á—Ç–æ–±—ã type-hint –Ω–µ —Ä—É–≥–∞–ª—Å—è

async def _post_init(app: Application):
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ ‚Äî PTB –ø—Ä–∏ run_webhook —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç –Ω–æ–≤—ã–π.
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        print("delete_webhook warning:", e)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚Äî –≤ PTB 20.x job_queue –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ app (extras [job-queue] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)
    try:
        app.job_queue.run_repeating(notify_overdues, interval=60 * 60 * 12, first=60)
    except Exception as e:
        print("JobQueue disabled:", e)


# ==========================
# –°–ë–û–†–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ==========================
def build_app() -> Application:
    init_db()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.post_init = _post_init

    # /start
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))

    # –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥
    conv_amount = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^(‚ûï –î–æ—Ö–æ–¥)$"), income_start),
            MessageHandler(filters.Regex(r"^(‚ûñ –†–∞—Å—Ö–æ–¥)$"), expense_start),
        ],
        states={
            ASK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_received)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_chat=True,
        per_user=True,
        per_message=False,
    )
    app.add_handler(conv_amount)

    # –ë–∞–ª–∞–Ω—Å / –ò—Å—Ç–æ—Ä–∏—è / –≠–∫—Å–ø–æ—Ä—Ç / AI
    app.add_handler(MessageHandler(filters.Regex(r"^(üí∞ –ë–∞–ª–∞–Ω—Å)$"), balance))
    app.add_handler(MessageHandler(filters.Regex(r"^(üìú –ò—Å—Ç–æ—Ä–∏—è)$"), history))
    app.add_handler(MessageHandler(filters.Regex(r"^(üìÑ Excel)$"), export_excel))
    # AI ‚Äî –ª—é–±–æ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–≤–ø–∞–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏
    # –Ω–æ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ ‚Äî AI —Å–Ω–∏–∑—É:
    app.add_handler(MessageHandler(filters.Regex(r"^(ü§ñ AI)$"), lambda u, c: u.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å/—Ñ—Ä–∞–∑—É ‚Äî –æ—Ç–≤–µ—á—É.")))

    # –î–æ–ª–≥–∏
    app.add_handler(MessageHandler(filters.Regex(r"^(üí≥ –î–æ–ª–∂–Ω–∏–∫–∏/–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã)$"), debt_menu))
    conv_debt = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"^(‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥)$"), debt_add_start),
        ],
        states={
            ASK_DEBT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, debt_add_parse),
                MessageHandler(filters.Regex(r"^(–ù–∞–º –¥–æ–ª–∂–Ω—ã \(–¥–µ–±–∏—Ç–æ—Ä\)|–ú—ã –¥–æ–ª–∂–Ω—ã \(–∫—Ä–µ–¥–∏—Ç–æ—Ä\))$"), debt_add_role),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_chat=True,
        per_user=True,
        per_message=False,
    )
    app.add_handler(conv_debt)
    app.add_handler(MessageHandler(filters.Regex(r"^(üìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤)$"), debt_list))
    app.add_handler(MessageHandler(filters.Regex(r"^(‚úÖ –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥)$"), debt_close))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, debt_close_id), group=1)

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –≤ "AI" –∑–∞–≥–ª—É—à–∫—É
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ai_answer), group=2)

    return app


# ==========================
# –ó–ê–ü–£–°–ö (webhook –∏–ª–∏ polling)
# ==========================
def main():
    app = build_app()

    if WEBHOOK_URL:
        # webhook —Ä–µ–∂–∏–º
        app.run_webhook(
            listen=HOST,
            port=PORT,
            secret_token=WEBHOOK_SECRET,
            webhook_url=f"{WEBHOOK_URL.rstrip('/')}/{WEBHOOK_SECRET}",
            drop_pending_updates=True,
        )
    else:
        # polling —Ä–µ–∂–∏–º
        app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
