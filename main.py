import os, re, sqlite3, time, logging, csv, io
from datetime import datetime, timedelta, time as dtime
from typing import Optional, Tuple, List
from zoneinfo import ZoneInfo

import httpx
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

PORT = int(os.environ.get("PORT", "8080"))
DB_PATH = os.environ.get("DB_PATH", "finance.db")
TIMEZONE = ZoneInfo(os.environ.get("TZ", "Asia/Tashkent"))
ALLOWED_USER_IDS = {int(x) for x in os.environ.get("ALLOWED_USER_IDS", "").replace(";", ",").split(",") if x.strip().isdigit()}
ADMIN_USER_ID = int(os.environ.get("ADMIN_USER_ID")) if os.environ.get("ADMIN_USER_ID", "").isdigit() else None

DEFAULT_BOT_TOKEN = os.environ.get("BOT_TOKEN", "7611168200:AAH_NPSecM5hrqPKindVLiQy4zkPIauqmTc")

logging.basicConfig(format="%(asctime)s %(levelname)s %(name)s | %(message)s", level=logging.INFO)
log = logging.getLogger("bot")

def init_db():
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""CREATE TABLE IF NOT EXISTS tx(
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		ttype TEXT NOT NULL CHECK(ttype IN('income','expense')),
		amount REAL NOT NULL,
		currency TEXT NOT NULL,
		category TEXT NOT NULL,
		note TEXT,
		ts INTEGER NOT NULL
	)""")
	c.execute("CREATE INDEX IF NOT EXISTS idx_user_ts ON tx(user_id, ts)")
	c.execute("""CREATE TABLE IF NOT EXISTS debts(
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		direction TEXT NOT NULL CHECK(direction IN('i_owe','they_owe')),
		counterparty TEXT NOT NULL,
		amount REAL NOT NULL,
		currency TEXT NOT NULL,
		note TEXT,
		status TEXT NOT NULL DEFAULT 'open' CHECK(status IN('open','closed')),
		created_ts INTEGER NOT NULL,
		updated_ts INTEGER NOT NULL
	)""")
	c.execute("CREATE INDEX IF NOT EXISTS idx_debts_user ON debts(user_id, status, direction)")
	c.execute("""CREATE TABLE IF NOT EXISTS budgets(
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		category TEXT NOT NULL,
		currency TEXT NOT NULL,
		limit_amount REAL NOT NULL,
		period TEXT NOT NULL DEFAULT 'month',
		created_ts INTEGER NOT NULL
	)""")
	con.commit(); con.close()
init_db()

BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

MAIN_KB = ReplyKeyboardMarkup(
	[
		[KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
		[KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
		[KeyboardButton("–î–æ–ª–≥–∏")],
	],
	resize_keyboard=True
)

def debts_menu_kb() -> ReplyKeyboardMarkup:
	rows = [
		[KeyboardButton("‚ûï –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("‚ûï –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
		[KeyboardButton("üìú –Ø –¥–æ–ª–∂–µ–Ω"), KeyboardButton("üìú –ú–Ω–µ –¥–æ–ª–∂–Ω—ã")],
		[KeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥"), KeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥")],
		[KeyboardButton(BACK_BTN)]
	]
	return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def is_authorized(user_id: int) -> bool:
	return True if not ALLOWED_USER_IDS else user_id in ALLOWED_USER_IDS

def detect_currency(t: str) -> str:
	tl = t.lower()
	if "$" in tl:
		return "usd"
	words = set(re.findall(r"[a-z–∞-—è—ë]+", tl))
	if {"usd","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"} & words:
		return "usd"
	if {"uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤"} & words:
		return "uzs"
	return "uzs"

def parse_amount(t: str) -> Optional[float]:
	s = t.replace("\u00A0", " ")
	m = re.findall(r"(?:(?<=\s)|^|(?<=[^\w]))(\d{1,3}(?:[ \u00A0\.,]\d{3})+|\d+)(?:[.,](\d{1,2}))?", s)
	if not m:
		return None
	raw, frac = m[-1]
	num = re.sub(r"[ \u00A0\.,]", "", raw)
	try:
		return float(f"{num}.{frac}") if frac else float(num)
	except ValueError:
		return None

CURRENCY_WORDS = {"usd","uzs","sum","—Å—É–º","—Å—É–º—ã","—Å—É–º–æ–≤","–¥–æ–ª–ª–∞—Ä","–¥–æ–ª–ª–∞—Ä–∞","–¥–æ–ª–ª–∞—Ä—ã","–¥–æ–ª–ª–∞—Ä–æ–≤","–±–∞–∫—Å","–±–∞–∫—Å—ã","–¥–æ–ª"}
def extract_counterparty_from_text(t: str) -> str:
	words = re.findall(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]+", t)
	names = [w for w in words if w.lower() not in CURRENCY_WORDS]
	return " ".join(names[-2:]) if names else ""

def fmt_amount(amount: float, cur: str) -> str:
	if cur == "uzs":
		return f"{int(round(amount)):,}".replace(",", " ")
	return f"{amount:.2f}"

def add_tx(uid: int, ttype: str, amount: float, cur: str, cat: str, note: str) -> int:
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("INSERT INTO tx(user_id,ttype,amount,currency,category,note,ts) VALUES(?,?,?,?,?,?,?)",
	          (uid, ttype, amount, cur, cat, note, int(time.time())))
	tx_id = c.lastrowid
	con.commit(); con.close()
	return tx_id

def last_txs(uid: int, limit: int = 10):
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""SELECT id, ttype, amount, currency, category, note, ts
	             FROM tx WHERE user_id=? ORDER BY ts DESC LIMIT ?""", (uid, limit))
	rows = c.fetchall(); con.close(); return rows

def get_balance(uid: int) -> Tuple[float,float]:
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	def s(t, cur):
		c.execute("SELECT COALESCE(SUM(amount),0) FROM tx WHERE user_id=? AND ttype=? AND currency=?",
		          (uid, t, cur))
		return c.fetchone()[0]
	bal_uzs = s("income","uzs") - s("expense","uzs")
	bal_usd = s("income","usd") - s("expense","usd")
	con.close()
	return bal_uzs, bal_usd

# Debts
def add_debt(uid: int, direction: str, counterparty: str, amount: float, currency: str, note: str) -> int:
	now = int(time.time())
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""INSERT INTO debts(user_id, direction, counterparty, amount, currency, note, status, created_ts, updated_ts)
	             VALUES(?,?,?,?,?,?, 'open', ?, ?)""",
	          (uid, direction, counterparty, amount, currency, note, now, now))
	debt_id = c.lastrowid
	con.commit(); con.close()
	return debt_id

def list_debts(uid: int, direction: str):
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("""SELECT id, counterparty, amount, currency, note, created_ts
	             FROM debts
	             WHERE user_id=? AND status='open' AND direction=?
	             ORDER BY id DESC""", (uid, direction))
	rows = c.fetchall(); con.close(); return rows

def close_debt(uid: int, debt_id: int) -> bool:
	now = int(time.time())
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("UPDATE debts SET status='closed', updated_ts=? WHERE id=? AND user_id=? AND status='open'",
	          (now, debt_id, uid))
	ok = c.rowcount > 0
	con.commit(); con.close()
	return ok

def reduce_debt(uid: int, debt_id: int, delta: float) -> Optional[Tuple[float,str,str]]:
	now = int(time.time())
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	c.execute("SELECT amount, currency FROM debts WHERE id=? AND user_id=? AND status='open'", (debt_id, uid))
	row = c.fetchone()
	if not row:
		con.close(); return None
	amount, currency = row
	new_amount = max(0.0, amount - abs(delta))
	if new_amount <= 0.0:
		c.execute("UPDATE debts SET amount=0, status='closed', updated_ts=? WHERE id=?", (now, debt_id))
		status = "closed"
	else:
		c.execute("UPDATE debts SET amount=?, updated_ts=? WHERE id=?", (new_amount, now, debt_id))
		status = "open"
	con.commit(); con.close()
	return new_amount, currency, status

def debt_totals(uid: int) -> Tuple[float,float,float,float]:
	con = sqlite3.connect(DB_PATH); c = con.cursor()
	def s(direction: str, cur: str):
		c.execute("""SELECT COALESCE(SUM(amount),0)
		             FROM debts WHERE user_id=? AND status='open' AND direction=? AND currency=?""",
		          (uid, direction, cur))
		return c.fetchone()[0] or 0.0
	iowe_uzs = s("i_owe","uzs"); iowe_usd = s("i_owe","usd")
	they_uzs = s("they_owe","uzs"); they_usd = s("they_owe","usd")
	con.close()
	return iowe_uzs, iowe_usd, they_—É–∑s, they_usd

def balance_with_debts_text(uid: int) -> str:
	uzs, usd = get_balance(uid)
	iowe_uzs, iowe_usd, they_—É–∑s, they_usd = debt_totals(uid)
	net_—É–∑s = uzs - iowe_—É–∑s + they_—É–∑s
	net_usd = usd - iowe_us–¥ + they_us–¥
	lines = [
		f"–ë–∞–ª–∞–Ω—Å –±–µ–∑ –¥–æ–ª–≥–æ–≤: {fmt_amount(uzs,'uzs')} UZS | {fmt_amount(usd,'usd')} USD",
		f"–Ø –¥–æ–ª–∂–µ–Ω: {fmt_amount(iowe_—É–∑s,'uzs')} UZS | {fmt_amount(iowe_usd,'usd')} USD",
		f"–ú–Ω–µ –¥–æ–ª–∂–Ω—ã: {fmt_amount(they_—É–∑s,'uzs')} UZS | {fmt_amount(they_usd,'usd')} USD",
		f"–ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å: {fmt_amount(net_—É–∑s,'uzs')} UZS | {fmt_amount(net_usd,'usd')} USD",
	]
	return "\n".join(lines)

async def start(update: Update, _: ContextTypes.DEFAULT_TYPE):
	if not is_authorized(update.effective_user.id):
		await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
		return
	await update.message.reply_text("–§–∏–Ω–∞–Ω—Å—ã ü§ñ\n–ö–Ω–æ–ø–∫–∏: ¬´‚ûñ –†–∞—Å—Ö–æ–¥ / ‚ûï –î–æ—Ö–æ–¥ / –î–æ–ª–≥–∏¬ª.", reply_markup=MAIN_KB)

def tx_line(ttype: str, amount: float, cur: str, cat: str, note: Optional[str], ts: int) -> str:
	dt = datetime.fromtimestamp(ts, tz=TIMEZONE).strftime("%d.%m %H:%M")
	sign = "‚ûï" if ttype == "income" else "‚ûñ"
	return f"{dt} {sign} {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat} ‚Ä¢ {note or '-'}"

async def send_history(update: Update, uid: int, limit: int = 10):
	rows = last_txs(uid, limit)
	if not rows:
		await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=MAIN_KB); return
	lines = [f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ({len(rows)}):"]
	for id_, ttype, amount, cur, cat, note, ts in rows:
		lines.append(f"#{id_} " + tx_line(ttype, amount, cur, cat, note, ts))
	await update.message.reply_text("\n".join(lines), reply_markup=MAIN_KB)

def debts_list_pretty(uid: int, direction: str) -> str:
	rows = list_debts(uid, direction)
	title = "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤:" if direction == "they_owe" else "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –¥–æ–ª–≥–æ–≤:"
	if not rows:
		return f"{title}\n‚Äî –ø—É—Å—Ç–æ ‚Äî"
	lines = [title]
	for id_, who, amount, cur, note, created_ts in rows:
		d = datetime.fromtimestamp(created_ts, tz=TIMEZONE).strftime("%d.%m.%Y")
		lines.append(f"#{id_} {who} ‚Äì {fmt_amount(amount,cur)} {cur.upper()} ({d})")
	return "\n".join(lines)

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
	uid = update.effective_user.id
	txt = (update.message.text or "").strip()
	low = txt.lower()

	if not is_authorized(uid):
		await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
		return

	# Debts flow
	debts = context.user_data.get("debts")
	if debts:
		stage = debts.get("stage")
		if txt == BACK_BTN:
			context.user_data.pop("debts", None)
			await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KB)
			return
		if stage == "menu":
			await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=debts_menu_kb())
			return
		if stage == "add_counterparty":
			amt = parse_amount(txt)
			if amt is not None:
				cur = detect_currency(txt)
				who = extract_counterparty_from_text(txt) or debts.get("counterparty") or "‚Äî"
				debt_id = add_debt(uid, debts["direction"], who, amt, cur, txt)
				now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
				msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
				      f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
				      f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
				      f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
				await update.message.reply_text(msg, reply_markup=debts_menu_kb())
				debts["stage"] = "menu"
			else:
				debts["counterparty"] = txt
				debts["stage"] = "add_amount"
				await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 000 –¥–æ–ª–≥ –∑–∞ –æ–±–µ–¥).",
				                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
			return
		if stage == "add_amount":
			amt = parse_amount(txt)
			if amt is None:
				await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 25 000 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
				                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
				return
			cur = detect_currency(txt)
			who = debts.get("counterparty") or extract_counterparty_from_text(txt) or "‚Äî"
			debt_id = add_debt(uid, debts["direction"], who, amt, cur, txt)
			now_s = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
			msg = "‚úÖ –î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω:\n" \
			      f"‚Ä¢ –°—É–º–º–∞: {fmt_amount(amt,cur)} {cur.upper()}\n" \
			      f"‚Ä¢ –î–æ–ª–∂–Ω–∏–∫: {who}\n" \
			      f"‚Ä¢ –î–∞—Ç–∞: {now_s}"
			await update.message.reply_text(msg, reply_markup=debts_menu_kb())
			debts["stage"] = "menu"
			return
		if stage == "close_ask_id":
			m = re.search(r"(\d+)", txt)
			if not m:
				await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb()); return
			ok = close_debt(uid, int(m.group(1)))
			await update.message.reply_text("–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
			debts["stage"] = "menu"; return
		if stage == "reduce_ask_id":
			m = re.search(r"(\d+)", txt)
			if not m:
				await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb()); return
			debts["reduce_id"] = int(m.group(1))
			debts["stage"] = "reduce_ask_amount"
			await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 000)",
			                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True))
			return
		if stage == "reduce_ask_amount":
			amt = parse_amount(txt)
			if amt is None or amt <= 0:
				await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: 50 000",
				                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
			res = reduce_debt(uid, debts["reduce_id"], amt)
			if not res:
				await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id.", reply_markup=debts_menu_kb())
			else:
				new_amount, cur, status = res
				await update.message.reply_text(
					"–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é." if status=="closed" else f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {fmt_amount(new_amount,cur)} {cur.upper()}",
					reply_markup=debts_menu_kb()
				)
			debts["stage"] = "menu"; debts.pop("reduce_id", None)
		 return

	# Enter debts menu
	if low == "–¥–æ–ª–≥–∏":
		context.user_data["debts"] = {"stage":"menu"}
		await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=debts_menu_kb()); return
	if low == "‚ûï —è –¥–æ–ª–∂–µ–Ω":
		context.user_data["debts"] = {"stage":"add_counterparty", "direction":"i_owe"}
		await update.message.reply_text("–ö–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd –ò–≤–∞–Ω¬ª.",
		                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
	if low == "‚ûï –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
		context.user_data["debts"] = {"stage":"add_counterparty", "direction":"they_owe"}
		await update.message.reply_text("–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º? –ò–ª–∏ —Å—Ä–∞–∑—É: ¬´5000 usd Roni¬ª.",
		                                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(BACK_BTN)]], resize_keyboard=True)); return
	if low == "üìú —è –¥–æ–ª–∂–µ–Ω":
		await update.message.reply_text(debts_list_pretty(uid, "i_owe"), reply_markup=debts_menu_kb()); return
	if low == "üìú –º–Ω–µ –¥–æ–ª–∂–Ω—ã":
		await update.message.reply_text(debts_list_pretty(uid, "they_owe"), reply_markup=debts_menu_kb()); return
	if low == "‚úñÔ∏è –∑–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥":
		context.user_data["debts"] = {"stage":"close_ask_id"}
		await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb()); return
	if low == "‚ûñ —É–º–µ–Ω—å—à–∏—Ç—å –¥–æ–ª–≥":
		context.user_data["debts"] = {"stage":"reduce_ask_id"}
		await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–ª–≥–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12).", reply_markup=debts_menu_kb()); return

	# Basics
	if "–±–∞–ª–∞–Ω—Å" in low:
		await update.message.reply_text(balance_with_debts_text(uid), reply_markup=MAIN_KB); return
	if "–∏—Å—Ç–æ—Ä–∏—è" in low:
		await send_history(update, uid, 10); return

	# Free text tx
	ttype, amount, cur, cat = ai_classify_finance(txt)
	if amount is not None:
		tx_id = add_tx(uid, ttype, amount, cur, cat, txt)
		await update.message.reply_text(f"{'–î–æ—Ö–æ–¥' if ttype=='income' else '–†–∞—Å—Ö–æ–¥'}: {fmt_amount(amount,cur)} {cur.upper()} ‚Ä¢ {cat}\n‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#{tx_id})", reply_markup=MAIN_KB)
		return

	await update.message.reply_text("–û–∫ ‚úÖ –ù–∞–ø–∏—à–∏: ¬´—Ç–∞–∫—Å–∏ 25 000¬ª –∏–ª–∏ –∑–∞–π–¥–∏ –≤ ¬´–î–æ–ª–≥–∏¬ª.", reply_markup=MAIN_KB)

async def unknown_cmd(update: Update, _: ContextTypes.DEFAULT_TYPE):
	await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç—Ä–∞—Ç—ã/–¥–æ—Ö–æ–¥.", reply_markup=MAIN_KB)

def main():
	token = DEFAULT_BOT_TOKEN
	app = Application.builder().token(token).build()
	app.add_handler(CommandHandler("start", start))
	app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
	app.add_handler(MessageHandler(filters.COMMAND, unknown_cmd))
	log.info("Starting polling")
	app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
	main()
